"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/form-schema/route";
exports.ids = ["app/api/form-schema/route"];
exports.modules = {

/***/ "better-sqlite3":
/*!*********************************!*\
  !*** external "better-sqlite3" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("better-sqlite3");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("node:child_process");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:tty":
/*!***************************!*\
  !*** external "node:tty" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:tty");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fform-schema%2Froute&page=%2Fapi%2Fform-schema%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fform-schema%2Froute.js&appDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fform-schema%2Froute&page=%2Fapi%2Fform-schema%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fform-schema%2Froute.js&appDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_swagatmishra_Desktop_raj_official_core_verify_app_api_form_schema_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/form-schema/route.js */ \"(rsc)/./app/api/form-schema/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/form-schema/route\",\n        pathname: \"/api/form-schema\",\n        filename: \"route\",\n        bundlePath: \"app/api/form-schema/route\"\n    },\n    resolvedPagePath: \"/Users/swagatmishra/Desktop/raj/official/core_verify/app/api/form-schema/route.js\",\n    nextConfigOutput,\n    userland: _Users_swagatmishra_Desktop_raj_official_core_verify_app_api_form_schema_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/form-schema/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZmb3JtLXNjaGVtYSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZm9ybS1zY2hlbWElMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZmb3JtLXNjaGVtYSUyRnJvdXRlLmpzJmFwcERpcj0lMkZVc2VycyUyRnN3YWdhdG1pc2hyYSUyRkRlc2t0b3AlMkZyYWolMkZvZmZpY2lhbCUyRmNvcmVfdmVyaWZ5JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnN3YWdhdG1pc2hyYSUyRkRlc2t0b3AlMkZyYWolMkZvZmZpY2lhbCUyRmNvcmVfdmVyaWZ5JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDaUM7QUFDOUc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb3JlX3ZlcmlmeS8/Y2EyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvc3dhZ2F0bWlzaHJhL0Rlc2t0b3AvcmFqL29mZmljaWFsL2NvcmVfdmVyaWZ5L2FwcC9hcGkvZm9ybS1zY2hlbWEvcm91dGUuanNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9mb3JtLXNjaGVtYS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Zvcm0tc2NoZW1hXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9mb3JtLXNjaGVtYS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9zd2FnYXRtaXNocmEvRGVza3RvcC9yYWovb2ZmaWNpYWwvY29yZV92ZXJpZnkvYXBwL2FwaS9mb3JtLXNjaGVtYS9yb3V0ZS5qc1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZm9ybS1zY2hlbWEvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fform-schema%2Froute&page=%2Fapi%2Fform-schema%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fform-schema%2Froute.js&appDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/form-schema/route.js":
/*!**************************************!*\
  !*** ./app/api/form-schema/route.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _services_documentService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/documentService */ \"(rsc)/./app/services/documentService.js\");\n/* harmony import */ var _utils_logUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/logUtils */ \"(rsc)/./utils/logUtils.js\");\n\n\n\n\n\n// Helper function to log data for debugging\nconst logDebug = (label, data)=>{\n    console.log(`===== ${label} =====`);\n    console.log(JSON.stringify(data, null, 2));\n    console.log(\"===================\");\n};\n/**\n * GET handler to fetch form schema\n * @param {Request} request - Request object\n * @returns {NextResponse} - Response with form schema or error\n */ async function GET(request) {\n    try {\n        // Parse query parameters\n        const { searchParams } = new URL(request.url);\n        const documentType = searchParams.get(\"type\") || \"certificate\";\n        const locationId = searchParams.get(\"locationId\");\n        const childTypeId = searchParams.get(\"childTypeId\");\n        logDebug(\"FORM_SCHEMA_REQUEST\", {\n            documentType,\n            locationId,\n            childTypeId,\n            url: request.url\n        });\n        try {\n            // If childTypeId is provided, get schema for specific child type\n            if (childTypeId) {\n                const schema = await _services_documentService__WEBPACK_IMPORTED_MODULE_3__.DocumentService.getFormSchemaByTypeAndSubType(documentType, childTypeId, {\n                    locationId: locationId ? parseInt(locationId) : null\n                });\n                if (!schema) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Failed to fetch form schema\",\n                        message: `No schema found for document type: ${documentType}, child type: ${childTypeId}`\n                    }, {\n                        status: 404\n                    });\n                }\n                logDebug(\"CHILD_SCHEMA_FOUND\", {\n                    documentType,\n                    childTypeId,\n                    fieldCount: schema.fields.length\n                });\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(schema);\n            }\n            // Otherwise fetch parent document type schema\n            const schema = await _services_documentService__WEBPACK_IMPORTED_MODULE_3__.DocumentService.getFormSchemaByTypeId(documentType, {\n                locationId: locationId ? parseInt(locationId) : null\n            });\n            if (!schema) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to fetch form schema\",\n                    message: `No schema found for document type: ${documentType}`\n                }, {\n                    status: 404\n                });\n            }\n            logDebug(\"SCHEMA_FOUND_IN_DB\", {\n                documentType,\n                isChildTypeSelector: schema.isChildTypeSelector || false,\n                fieldCount: schema.fields.length\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                schema,\n                locationId: locationId ? parseInt(locationId) : null\n            });\n        } catch (dbError) {\n            logDebug(\"SCHEMA_NOT_FOUND_IN_DB\", {\n                documentType,\n                error: dbError.message\n            });\n            // Try to load from configuration file first\n            try {\n                const schemaFromConfig = await _services_documentService__WEBPACK_IMPORTED_MODULE_3__.DocumentService.getFormSchemaByTypeId(documentType, {\n                    locationId: locationId ? parseInt(locationId) : null,\n                    useConfigOnly: true\n                });\n                if (schemaFromConfig) {\n                    logDebug(\"USING_CONFIG_SCHEMA\", {\n                        documentType,\n                        isChildTypeSelector: schemaFromConfig.isChildTypeSelector || false,\n                        fieldCount: schemaFromConfig.fields.length\n                    });\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        schema: schemaFromConfig,\n                        locationId: locationId ? parseInt(locationId) : null,\n                        usingConfig: true\n                    });\n                }\n            } catch (configError) {\n                logDebug(\"CONFIG_SCHEMA_NOT_FOUND\", {\n                    documentType,\n                    error: configError.message\n                });\n            }\n            // If both database and config fail, try to use default\n            if (documentType !== \"certificate\") {\n                try {\n                    const defaultSchema = await _services_documentService__WEBPACK_IMPORTED_MODULE_3__.DocumentService.getFormSchemaByTypeId(\"certificate\");\n                    logDebug(\"USING_DEFAULT_SCHEMA\", {\n                        documentType: \"certificate\",\n                        fieldCount: defaultSchema.fields.length\n                    });\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        schema: defaultSchema,\n                        locationId: locationId ? parseInt(locationId) : null,\n                        usingDefault: true\n                    });\n                } catch (defaultError) {\n                    logDebug(\"DEFAULT_SCHEMA_NOT_FOUND\", {\n                        error: defaultError.message\n                    });\n                }\n            }\n            // Return error if neither the requested schema nor default schema can be found\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Schema not found\",\n                message: `No schema found for document type: ${documentType}`,\n                locationId: locationId ? parseInt(locationId) : null\n            }, {\n                status: 404\n            });\n        }\n    } catch (error) {\n        logDebug(\"FORM_SCHEMA_ERROR\", {\n            error: error.message\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Error fetching form schema\",\n            message: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * POST handler to validate schema extensions or customizations\n * Can be used for future enhancements like custom field validation\n */ async function POST(request) {\n    try {\n        const data = await request.json();\n        const { documentType, customFields, locationId } = data;\n        logDebug(\"CUSTOM_FORM_SCHEMA_REQUEST\", {\n            documentType,\n            customFieldCount: customFields ? customFields.length : 0,\n            locationId\n        });\n        try {\n            // Fetch base schema from database\n            const baseSchema = await _services_documentService__WEBPACK_IMPORTED_MODULE_3__.DocumentService.getFormSchemaByTypeId(documentType, {\n                locationId\n            });\n            if (!baseSchema) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to fetch base form schema\",\n                    message: `No schema found for document type: ${documentType}`\n                }, {\n                    status: 404\n                });\n            }\n            // If no custom fields, just return the base schema\n            if (!customFields || customFields.length === 0) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    schema: baseSchema\n                });\n            }\n            // Merge custom fields with base schema\n            // This is a simplified implementation - in a real app you'd want more validation\n            const mergedSchema = {\n                ...baseSchema,\n                fields: [\n                    ...baseSchema.fields\n                ]\n            };\n            // Process custom fields\n            customFields.forEach((customField)=>{\n                const existingFieldIndex = mergedSchema.fields.findIndex((f)=>f.id === customField.id);\n                if (existingFieldIndex >= 0) {\n                    // Update existing field\n                    mergedSchema.fields[existingFieldIndex] = {\n                        ...mergedSchema.fields[existingFieldIndex],\n                        ...customField\n                    };\n                } else {\n                    // Add new field\n                    mergedSchema.fields.push(customField);\n                }\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                schema: mergedSchema,\n                customized: true,\n                locationId: locationId ? parseInt(locationId) : null\n            });\n        } catch (dbError) {\n            logDebug(\"ERROR_FETCHING_BASE_SCHEMA\", {\n                documentType,\n                error: dbError.message\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Schema customization failed\",\n                message: \"Failed to fetch base schema for customization\",\n                locationId: locationId ? parseInt(locationId) : null\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        logDebug(\"CUSTOM_FORM_SCHEMA_ERROR\", {\n            error: error.message\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Error processing custom form schema\",\n            message: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/form-schema/route.js\n");

/***/ }),

/***/ "(rsc)/./app/generated/prisma/index.js":
/*!***************************************!*\
  !*** ./app/generated/prisma/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./app/generated/prisma/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.6.0\n * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a\n */ Prisma.prismaVersion = {\n    client: \"6.6.0\",\n    engine: \"f676762280b54cd07c770017ed3711ddde35f37a\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: \"ReadUncommitted\",\n    ReadCommitted: \"ReadCommitted\",\n    RepeatableRead: \"RepeatableRead\",\n    Serializable: \"Serializable\"\n});\nexports.Prisma.DocumentTypeScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    description: \"description\",\n    formId: \"formId\",\n    hideHeader: \"hideHeader\",\n    showFormButtons: \"showFormButtons\",\n    parent_type_id: \"parent_type_id\",\n    parent_name: \"parent_name\",\n    child_type_id: \"child_type_id\",\n    child_name: \"child_name\",\n    form_template_id: \"form_template_id\"\n};\nexports.Prisma.DocumentTitleScalarFieldEnum = {\n    id: \"id\",\n    title: \"title\",\n    created_at: \"created_at\",\n    updated_at: \"updated_at\",\n    shareable: \"shareable\",\n    document_type_id: \"document_type_id\",\n    is_display: \"is_display\",\n    require_number: \"require_number\",\n    require_valid_date: \"require_valid_date\",\n    require_expire_date: \"require_expire_date\",\n    require_doc_data: \"require_doc_data\",\n    doc_data_options: \"doc_data_options\",\n    doc_data_name: \"doc_data_name\",\n    require_attachment_front: \"require_attachment_front\",\n    require_attachment_back: \"require_attachment_back\",\n    description: \"description\",\n    form_description: \"form_description\",\n    form_title: \"form_title\"\n};\nexports.Prisma.FormFieldScalarFieldEnum = {\n    id: \"id\",\n    template_id: \"template_id\",\n    field_id: \"field_id\",\n    field_name: \"field_name\",\n    field_type: \"field_type\",\n    label: \"label\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    is_hidden: \"is_hidden\",\n    order: \"order\",\n    full_width: \"full_width\",\n    display_conditions: \"display_conditions\",\n    validation_rules: \"validation_rules\",\n    created_at: \"created_at\",\n    updated_at: \"updated_at\"\n};\nexports.Prisma.DocumentConfigurationScalarFieldEnum = {\n    id: \"id\",\n    regionId: \"regionId\",\n    documentTypeId: \"documentTypeId\",\n    documentTitleId: \"documentTitleId\",\n    typeOfCondition: \"typeOfCondition\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    active: \"active\",\n    priority: \"priority\",\n    customFields: \"customFields\"\n};\nexports.Prisma.RegionScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    code: \"code\",\n    country: \"country\",\n    active: \"active\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.Document_fieldsScalarFieldEnum = {\n    id: \"id\",\n    field_id: \"field_id\",\n    name: \"name\",\n    label: \"label\",\n    type: \"type\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    order: \"order\",\n    full_width: \"full_width\",\n    hidden: \"hidden\",\n    default_value: \"default_value\",\n    options: \"options\",\n    validation: \"validation\",\n    conditional_display: \"conditional_display\",\n    help_text: \"help_text\",\n    document_type_id: \"document_type_id\",\n    document_title_id: \"document_title_id\",\n    created_at: \"created_at\",\n    updated_at: \"updated_at\"\n};\nexports.Prisma.FormTemplateScalarFieldEnum = {\n    id: \"id\",\n    form_key: \"form_key\",\n    name: \"name\",\n    description: \"description\",\n    version: \"version\",\n    is_active: \"is_active\",\n    created_at: \"created_at\",\n    updated_at: \"updated_at\"\n};\nexports.Prisma.FieldOptionScalarFieldEnum = {\n    id: \"id\",\n    field_id: \"field_id\",\n    option_value: \"option_value\",\n    option_label: \"option_label\",\n    order: \"order\",\n    created_at: \"created_at\",\n    updated_at: \"updated_at\"\n};\nexports.Prisma.DocumentTypeLocationScalarFieldEnum = {\n    id: \"id\",\n    document_type_id: \"document_type_id\",\n    location_id: \"location_id\",\n    created_at: \"created_at\",\n    updated_at: \"updated_at\"\n};\nexports.Prisma.SortOrder = {\n    asc: \"asc\",\n    desc: \"desc\"\n};\nexports.Prisma.NullableJsonNullValueInput = {\n    DbNull: Prisma.DbNull,\n    JsonNull: Prisma.JsonNull\n};\nexports.Prisma.QueryMode = {\n    default: \"default\",\n    insensitive: \"insensitive\"\n};\nexports.Prisma.NullsOrder = {\n    first: \"first\",\n    last: \"last\"\n};\nexports.Prisma.JsonNullValueFilter = {\n    DbNull: Prisma.DbNull,\n    JsonNull: Prisma.JsonNull,\n    AnyNull: Prisma.AnyNull\n};\nexports.Prisma.ModelName = {\n    DocumentType: \"DocumentType\",\n    DocumentTitle: \"DocumentTitle\",\n    FormField: \"FormField\",\n    DocumentConfiguration: \"DocumentConfiguration\",\n    Region: \"Region\",\n    document_fields: \"document_fields\",\n    FormTemplate: \"FormTemplate\",\n    FieldOption: \"FieldOption\",\n    DocumentTypeLocation: \"DocumentTypeLocation\"\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"/Users/swagatmishra/Desktop/raj/official/core_verify/app/generated/prisma\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"darwin-arm64\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"/Users/swagatmishra/Desktop/raj/official/core_verify/prisma/schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null,\n        \"schemaEnvPath\": \"../../../.env\"\n    },\n    \"relativePath\": \"../../../prisma\",\n    \"clientVersion\": \"6.6.0\",\n    \"engineVersion\": \"f676762280b54cd07c770017ed3711ddde35f37a\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"postgresql\",\n    \"postinstall\": true,\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": 'generator client {\\n  provider = \"prisma-client-js\"\\n  output   = \"../app/generated/prisma\"\\n}\\n\\ndatasource db {\\n  provider  = \"postgresql\"\\n  url       = env(\"DATABASE_URL\")\\n  directUrl = env(\"DIRECT_URL\")\\n}\\n\\nmodel DocumentType {\\n  id                     Int                     @id @default(autoincrement())\\n  name                   String                  @unique\\n  createdAt              DateTime                @default(now()) @map(\"created_at\")\\n  updatedAt              DateTime                @updatedAt @map(\"updated_at\")\\n  description            String?\\n  formId                 String?                 @map(\"form_id\")\\n  hideHeader             Boolean                 @default(false) @map(\"hide_header\")\\n  showFormButtons        Boolean                 @default(true) @map(\"show_form_buttons\")\\n  documentTitles         DocumentTitle[]\\n  documentConfigurations DocumentConfiguration[]\\n  document_fields        document_fields[]\\n  parent_type_id         String?\\n  parent_name            String?\\n  child_type_id          String?\\n  child_name             String?\\n  form_template_id       Int?\\n  form_template          FormTemplate?           @relation(\"FormTemplateToDocumentType\", fields: [form_template_id], references: [id])\\n  locations              DocumentTypeLocation[]\\n\\n  @@unique([parent_type_id, child_type_id], name: \"parent_type_id_child_type_id\")\\n  @@index([form_template_id])\\n  @@map(\"document_types\")\\n}\\n\\nmodel DocumentTitle {\\n  id                       Int                     @id @default(autoincrement())\\n  title                    String\\n  created_at               DateTime                @default(now())\\n  updated_at               DateTime\\n  shareable                Boolean                 @default(false)\\n  document_type_id         Int\\n  is_display               Boolean                 @default(true)\\n  require_number           Boolean                 @default(false)\\n  require_valid_date       Boolean                 @default(false)\\n  require_expire_date      Boolean                 @default(false)\\n  require_doc_data         Boolean                 @default(false)\\n  doc_data_options         Json?\\n  doc_data_name            String?\\n  require_attachment_front Boolean                 @default(false)\\n  require_attachment_back  Boolean                 @default(false)\\n  description              String?\\n  form_description         String?\\n  form_title               String?\\n  document_types           DocumentType            @relation(fields: [document_type_id], references: [id], onDelete: Cascade)\\n  documentConfigurations   DocumentConfiguration[]\\n  document_fields          document_fields[]\\n\\n  @@index([document_type_id])\\n  @@map(\"documentTitles\")\\n}\\n\\nmodel FormField {\\n  id                 Int      @id @default(autoincrement())\\n  template_id        Int\\n  field_id           String\\n  field_name         String\\n  field_type         String\\n  label              String\\n  placeholder        String?\\n  required           Boolean  @default(false)\\n  is_hidden          Boolean  @default(false)\\n  order              Int      @default(0)\\n  full_width         Boolean  @default(true)\\n  display_conditions Json?\\n  validation_rules   Json?\\n  created_at         DateTime @default(now())\\n  updated_at         DateTime @updatedAt\\n\\n  form_template FormTemplate  @relation(fields: [template_id], references: [id], onDelete: Cascade)\\n  field_options FieldOption[]\\n\\n  @@index([template_id])\\n  @@map(\"form_fields\")\\n}\\n\\nmodel DocumentConfiguration {\\n  id              Int           @id @default(autoincrement())\\n  regionId        Int           @map(\"region_id\")\\n  documentTypeId  Int           @map(\"document_type_id\")\\n  documentTitleId Int           @map(\"document_title_id\")\\n  typeOfCondition Int           @default(0) @map(\"type_of_condition\")\\n  createdAt       DateTime      @default(now()) @map(\"created_at\")\\n  updatedAt       DateTime      @updatedAt @map(\"updated_at\")\\n  active          Boolean       @default(true)\\n  priority        Int           @default(0)\\n  customFields    Json?         @map(\"custom_fields\")\\n  documentTitle   DocumentTitle @relation(fields: [documentTitleId], references: [id], onDelete: Cascade)\\n  documentType    DocumentType  @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)\\n  region          Region        @relation(fields: [regionId], references: [id], onDelete: Cascade)\\n\\n  @@unique([regionId, documentTitleId])\\n  @@index([documentTypeId])\\n  @@index([documentTitleId])\\n  @@index([regionId])\\n  @@map(\"document_configurations\")\\n}\\n\\nmodel Region {\\n  id                     Int                     @id @default(autoincrement())\\n  name                   String\\n  code                   String                  @unique\\n  country                String                  @default(\"US\")\\n  active                 Boolean                 @default(true)\\n  createdAt              DateTime                @default(now()) @map(\"created_at\")\\n  updatedAt              DateTime                @updatedAt @map(\"updated_at\")\\n  documentConfigurations DocumentConfiguration[]\\n\\n  @@map(\"regions\")\\n}\\n\\nmodel document_fields {\\n  id                  Int            @id @default(autoincrement())\\n  field_id            String\\n  name                String\\n  label               String\\n  type                String\\n  placeholder         String?\\n  required            Boolean        @default(false)\\n  order               Int\\n  full_width          Boolean        @default(true)\\n  hidden              Boolean        @default(false)\\n  default_value       String?\\n  options             Json?\\n  validation          Json?\\n  conditional_display Json?\\n  help_text           String?\\n  document_type_id    Int\\n  document_title_id   Int?\\n  created_at          DateTime       @default(now())\\n  updated_at          DateTime\\n  document_titles     DocumentTitle? @relation(fields: [document_title_id], references: [id])\\n  document_types      DocumentType   @relation(fields: [document_type_id], references: [id], onDelete: Cascade)\\n\\n  @@index([document_title_id])\\n  @@index([document_type_id])\\n}\\n\\nmodel FormTemplate {\\n  id             Int            @id @default(autoincrement())\\n  form_key       String         @unique\\n  name           String\\n  description    String?\\n  version        Int            @default(1)\\n  is_active      Boolean        @default(true)\\n  created_at     DateTime       @default(now())\\n  updated_at     DateTime       @updatedAt\\n  form_fields    FormField[]\\n  document_types DocumentType[] @relation(\"FormTemplateToDocumentType\")\\n\\n  @@map(\"form_templates\")\\n}\\n\\nmodel FieldOption {\\n  id           Int      @id @default(autoincrement())\\n  field_id     Int\\n  option_value String\\n  option_label String\\n  order        Int      @default(0)\\n  created_at   DateTime @default(now())\\n  updated_at   DateTime @updatedAt\\n\\n  form_field FormField @relation(fields: [field_id], references: [id], onDelete: Cascade)\\n\\n  @@index([field_id])\\n  @@map(\"field_options\")\\n}\\n\\nmodel DocumentTypeLocation {\\n  id               Int      @id @default(autoincrement())\\n  document_type_id Int\\n  location_id      Int\\n  created_at       DateTime @default(now())\\n  updated_at       DateTime @updatedAt\\n\\n  document_type DocumentType @relation(fields: [document_type_id], references: [id], onDelete: Cascade)\\n\\n  @@unique([document_type_id, location_id])\\n  @@map(\"document_type_locations\")\\n}\\n',\n    \"inlineSchemaHash\": \"403b15bb8ca2b6fceeb88b5de38f170a8cf9cb3b2c4cccc41129e9bde1eb563c\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, \"schema.prisma\"))) {\n    const alternativePaths = [\n        \"app/generated/prisma\",\n        \"generated/prisma\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, \"schema.prisma\"));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse('{\"models\":{\"DocumentType\":{\"dbName\":\"document_types\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"dbName\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"dbName\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"formId\",\"dbName\":\"form_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"hideHeader\",\"dbName\":\"hide_header\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"showFormButtons\",\"dbName\":\"show_form_buttons\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentTitles\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentTitle\",\"nativeType\":null,\"relationName\":\"DocumentTitleToDocumentType\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentConfigurations\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentConfiguration\",\"nativeType\":null,\"relationName\":\"DocumentConfigurationToDocumentType\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_fields\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"document_fields\",\"nativeType\":null,\"relationName\":\"DocumentTypeTodocument_fields\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"parent_type_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"parent_name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"child_type_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"child_name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"form_template_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"form_template\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"FormTemplate\",\"nativeType\":null,\"relationName\":\"FormTemplateToDocumentType\",\"relationFromFields\":[\"form_template_id\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locations\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentTypeLocation\",\"nativeType\":null,\"relationName\":\"DocumentTypeToDocumentTypeLocation\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"parent_type_id\",\"child_type_id\"]],\"uniqueIndexes\":[{\"name\":\"parent_type_id_child_type_id\",\"fields\":[\"parent_type_id\",\"child_type_id\"]}],\"isGenerated\":false},\"DocumentTitle\":{\"dbName\":\"documentTitles\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"shareable\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_type_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"is_display\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"require_number\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"require_valid_date\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"require_expire_date\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"require_doc_data\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"doc_data_options\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"doc_data_name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"require_attachment_front\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"require_attachment_back\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"form_description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"form_title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_types\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentType\",\"nativeType\":null,\"relationName\":\"DocumentTitleToDocumentType\",\"relationFromFields\":[\"document_type_id\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentConfigurations\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentConfiguration\",\"nativeType\":null,\"relationName\":\"DocumentConfigurationToDocumentTitle\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_fields\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"document_fields\",\"nativeType\":null,\"relationName\":\"DocumentTitleTodocument_fields\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"FormField\":{\"dbName\":\"form_fields\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"template_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"field_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"field_name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"field_type\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"placeholder\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"required\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"is_hidden\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"full_width\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"display_conditions\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"validation_rules\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"form_template\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"FormTemplate\",\"nativeType\":null,\"relationName\":\"FormFieldToFormTemplate\",\"relationFromFields\":[\"template_id\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"field_options\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"FieldOption\",\"nativeType\":null,\"relationName\":\"FieldOptionToFormField\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"DocumentConfiguration\":{\"dbName\":\"document_configurations\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionId\",\"dbName\":\"region_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentTypeId\",\"dbName\":\"document_type_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentTitleId\",\"dbName\":\"document_title_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"typeOfCondition\",\"dbName\":\"type_of_condition\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"dbName\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"dbName\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"active\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"priority\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"customFields\",\"dbName\":\"custom_fields\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentTitle\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentTitle\",\"nativeType\":null,\"relationName\":\"DocumentConfigurationToDocumentTitle\",\"relationFromFields\":[\"documentTitleId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"documentType\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentType\",\"nativeType\":null,\"relationName\":\"DocumentConfigurationToDocumentType\",\"relationFromFields\":[\"documentTypeId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"region\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Region\",\"nativeType\":null,\"relationName\":\"DocumentConfigurationToRegion\",\"relationFromFields\":[\"regionId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"regionId\",\"documentTitleId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"regionId\",\"documentTitleId\"]}],\"isGenerated\":false},\"Region\":{\"dbName\":\"regions\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"code\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"country\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"US\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"active\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"dbName\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"dbName\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"documentConfigurations\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentConfiguration\",\"nativeType\":null,\"relationName\":\"DocumentConfigurationToRegion\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"document_fields\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"field_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"type\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"placeholder\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"required\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"full_width\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"hidden\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"default_value\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"options\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"validation\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"conditional_display\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"help_text\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_type_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_title_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_titles\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentTitle\",\"nativeType\":null,\"relationName\":\"DocumentTitleTodocument_fields\",\"relationFromFields\":[\"document_title_id\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_types\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentType\",\"nativeType\":null,\"relationName\":\"DocumentTypeTodocument_fields\",\"relationFromFields\":[\"document_type_id\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"FormTemplate\":{\"dbName\":\"form_templates\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"form_key\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"version\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":1,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"is_active\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"form_fields\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"FormField\",\"nativeType\":null,\"relationName\":\"FormFieldToFormTemplate\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_types\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentType\",\"nativeType\":null,\"relationName\":\"FormTemplateToDocumentType\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"FieldOption\":{\"dbName\":\"field_options\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"field_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"option_value\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"option_label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"form_field\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"FormField\",\"nativeType\":null,\"relationName\":\"FieldOptionToFormField\",\"relationFromFields\":[\"field_id\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"DocumentTypeLocation\":{\"dbName\":\"document_type_locations\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"document_type_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"location_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"created_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"document_type\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DocumentType\",\"nativeType\":null,\"relationName\":\"DocumentTypeToDocumentTypeLocation\",\"relationFromFields\":[\"document_type_id\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"document_type_id\",\"location_id\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"document_type_id\",\"location_id\"]}],\"isGenerated\":false}},\"enums\":{},\"types\":{}}');\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./app/generated/prisma/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"libquery_engine-darwin-arm64.dylib.node\");\npath.join(process.cwd(), \"app/generated/prisma/libquery_engine-darwin-arm64.dylib.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"app/generated/prisma/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/generated/prisma/index.js\n");

/***/ }),

/***/ "(rsc)/./app/generated/prisma/runtime/library.js":
/*!*************************************************!*\
  !*** ./app/generated/prisma/runtime/library.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar yu = Object.create;\nvar qt = Object.defineProperty;\nvar bu = Object.getOwnPropertyDescriptor;\nvar Eu = Object.getOwnPropertyNames;\nvar wu = Object.getPrototypeOf, xu = Object.prototype.hasOwnProperty;\nvar Do = (e, r)=>()=>(e && (r = e(e = 0)), r);\nvar ne = (e, r)=>()=>(r || e((r = {\n            exports: {}\n        }).exports, r), r.exports), tr = (e, r)=>{\n    for(var t in r)qt(e, t, {\n        get: r[t],\n        enumerable: !0\n    });\n}, _o = (e, r, t, n)=>{\n    if (r && typeof r == \"object\" || typeof r == \"function\") for (let i of Eu(r))!xu.call(e, i) && i !== t && qt(e, i, {\n        get: ()=>r[i],\n        enumerable: !(n = bu(r, i)) || n.enumerable\n    });\n    return e;\n};\nvar k = (e, r, t)=>(t = e != null ? yu(wu(e)) : {}, _o(r || !e || !e.__esModule ? qt(t, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : t, e)), vu = (e)=>_o(qt({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar mi = ne((_g, ss)=>{\n    \"use strict\";\n    ss.exports = (e, r = process.argv)=>{\n        let t = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = r.indexOf(t + e), i = r.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar us = ne((Ng, ls)=>{\n    \"use strict\";\n    var Lc = __webpack_require__(/*! node:os */ \"node:os\"), as = __webpack_require__(/*! node:tty */ \"node:tty\"), de = mi(), { env: Q } = process, Ge;\n    de(\"no-color\") || de(\"no-colors\") || de(\"color=false\") || de(\"color=never\") ? Ge = 0 : (de(\"color\") || de(\"colors\") || de(\"color=true\") || de(\"color=always\")) && (Ge = 1);\n    \"FORCE_COLOR\" in Q && (Q.FORCE_COLOR === \"true\" ? Ge = 1 : Q.FORCE_COLOR === \"false\" ? Ge = 0 : Ge = Q.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(Q.FORCE_COLOR, 10), 3));\n    function fi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function gi(e, r) {\n        if (Ge === 0) return 0;\n        if (de(\"color=16m\") || de(\"color=full\") || de(\"color=truecolor\")) return 3;\n        if (de(\"color=256\")) return 2;\n        if (e && !r && Ge === void 0) return 0;\n        let t = Ge || 0;\n        if (Q.TERM === \"dumb\") return t;\n        if (process.platform === \"win32\") {\n            let n = Lc.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in Q) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in Q) || Q.CI_NAME === \"codeship\" ? 1 : t;\n        if (\"TEAMCITY_VERSION\" in Q) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(Q.TEAMCITY_VERSION) ? 1 : 0;\n        if (Q.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in Q) {\n            let n = parseInt((Q.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(Q.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(Q.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Q.TERM) || \"COLORTERM\" in Q ? 1 : t;\n    }\n    function Mc(e) {\n        let r = gi(e, e && e.isTTY);\n        return fi(r);\n    }\n    ls.exports = {\n        supportsColor: Mc,\n        stdout: fi(gi(!0, as.isatty(1))),\n        stderr: fi(gi(!0, as.isatty(2)))\n    };\n});\nvar ds = ne((Fg, ps)=>{\n    \"use strict\";\n    var $c = us(), br = mi();\n    function cs(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let t = /(\\d{1,2})(\\d{2})/.exec(e) || [];\n            return {\n                major: 0,\n                minor: parseInt(t[1], 10),\n                patch: parseInt(t[2], 10)\n            };\n        }\n        let r = (e || \"\").split(\".\").map((t)=>parseInt(t, 10));\n        return {\n            major: r[0],\n            minor: r[1],\n            patch: r[2]\n        };\n    }\n    function hi(e) {\n        let { CI: r, FORCE_HYPERLINK: t, NETLIFY: n, TEAMCITY_VERSION: i, TERM_PROGRAM: o, TERM_PROGRAM_VERSION: s, VTE_VERSION: a, TERM: l } = process.env;\n        if (t) return !(t.length > 0 && parseInt(t, 10) === 0);\n        if (br(\"no-hyperlink\") || br(\"no-hyperlinks\") || br(\"hyperlink=false\") || br(\"hyperlink=never\")) return !1;\n        if (br(\"hyperlink=true\") || br(\"hyperlink=always\") || n) return !0;\n        if (!$c.supportsColor(e) || e && !e.isTTY) return !1;\n        if (\"WT_SESSION\" in process.env) return !0;\n        if (process.platform === \"win32\" || r || i) return !1;\n        if (o) {\n            let u = cs(s || \"\");\n            switch(o){\n                case \"iTerm.app\":\n                    return u.major === 3 ? u.minor >= 1 : u.major > 3;\n                case \"WezTerm\":\n                    return u.major >= 20200620;\n                case \"vscode\":\n                    return u.major > 1 || u.major === 1 && u.minor >= 72;\n                case \"ghostty\":\n                    return !0;\n            }\n        }\n        if (a) {\n            if (a === \"0.50.0\") return !1;\n            let u = cs(a);\n            return u.major > 0 || u.minor >= 50;\n        }\n        switch(l){\n            case \"alacritty\":\n                return !0;\n        }\n        return !1;\n    }\n    ps.exports = {\n        supportsHyperlink: hi,\n        stdout: hi(process.stdout),\n        stderr: hi(process.stderr)\n    };\n});\nvar ms = ne((Hg, qc)=>{\n    qc.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.7.0\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.4.7\",\n            esbuild: \"0.25.1\",\n            \"escape-string-regexp\": \"5.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-dirs\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            \"read-package-up\": \"11.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"7.2.0\",\n            \"strip-ansi\": \"6.0.1\",\n            \"strip-indent\": \"4.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"4.0.0\",\n            tmp: \"0.2.3\",\n            \"ts-node\": \"10.9.2\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/dmmf\": \"workspace:*\",\n            \"@prisma/driver-adapter-utils\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed\",\n            \"@prisma/schema-engine-wasm\": \"6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar Ei = ne((zg, Uc)=>{\n    Uc.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"3cff47a7f5d65c3ea74883f1d736e41d68ce91ed\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar wi = ne((Xt)=>{\n    \"use strict\";\n    Object.defineProperty(Xt, \"__esModule\", {\n        value: !0\n    });\n    Xt.enginesVersion = void 0;\n    Xt.enginesVersion = Ei().prisma.enginesVersion;\n});\nvar ys = ne((hh, hs)=>{\n    \"use strict\";\n    hs.exports = (e)=>{\n        let r = e.match(/^[ \\t]*(?=\\S)/gm);\n        return r ? r.reduce((t, n)=>Math.min(t, n.length), 1 / 0) : 0;\n    };\n});\nvar Ri = ne((Eh, ws)=>{\n    \"use strict\";\n    ws.exports = (e, r = 1, t)=>{\n        if (t = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...t\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof r != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof r}\\``);\n        if (typeof t.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof t.indent}\\``);\n        if (r === 0) return e;\n        let n = t.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, t.indent.repeat(r));\n    };\n});\nvar Ts = ne((vh, Ps)=>{\n    \"use strict\";\n    Ps.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let r = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(r, e ? void 0 : \"g\");\n    };\n});\nvar ki = ne((Ph, Ss)=>{\n    \"use strict\";\n    var Xc = Ts();\n    Ss.exports = (e)=>typeof e == \"string\" ? e.replace(Xc(), \"\") : e;\n});\nvar Rs = ne((Ch, ep)=>{\n    ep.exports = {\n        name: \"dotenv\",\n        version: \"16.4.7\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar ks = ne((Ah, Ne)=>{\n    \"use strict\";\n    var Di = __webpack_require__(/*! node:fs */ \"node:fs\"), _i = __webpack_require__(/*! node:path */ \"node:path\"), rp = __webpack_require__(/*! node:os */ \"node:os\"), tp = __webpack_require__(/*! node:crypto */ \"node:crypto\"), np = Rs(), Ni = np.version, ip = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function op(e) {\n        let r = {}, t = e.toString();\n        t = t.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = ip.exec(t)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), r[i] = o;\n        }\n        return r;\n    }\n    function sp(e) {\n        let r = Is(e), t = B.configDotenv({\n            path: r\n        });\n        if (!t.parsed) {\n            let s = new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);\n            throw s.code = \"MISSING_DATA\", s;\n        }\n        let n = As(e).split(\",\"), i = n.length, o;\n        for(let s = 0; s < i; s++)try {\n            let a = n[s].trim(), l = up(t, a);\n            o = B.decrypt(l.ciphertext, l.key);\n            break;\n        } catch (a) {\n            if (s + 1 >= i) throw a;\n        }\n        return B.parse(o);\n    }\n    function ap(e) {\n        console.log(`[dotenv@${Ni}][INFO] ${e}`);\n    }\n    function lp(e) {\n        console.log(`[dotenv@${Ni}][WARN] ${e}`);\n    }\n    function tn(e) {\n        console.log(`[dotenv@${Ni}][DEBUG] ${e}`);\n    }\n    function As(e) {\n        return e && e.DOTENV_KEY && e.DOTENV_KEY.length > 0 ? e.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function up(e, r) {\n        let t;\n        try {\n            t = new URL(r);\n        } catch (a) {\n            if (a.code === \"ERR_INVALID_URL\") {\n                let l = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l.code = \"INVALID_DOTENV_KEY\", l;\n            }\n            throw a;\n        }\n        let n = t.password;\n        if (!n) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let i = t.searchParams.get(\"environment\");\n        if (!i) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let o = `DOTENV_VAULT_${i.toUpperCase()}`, s = e.parsed[o];\n        if (!s) {\n            let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);\n            throw a.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a;\n        }\n        return {\n            ciphertext: s,\n            key: n\n        };\n    }\n    function Is(e) {\n        let r = null;\n        if (e && e.path && e.path.length > 0) if (Array.isArray(e.path)) for (let t of e.path)Di.existsSync(t) && (r = t.endsWith(\".vault\") ? t : `${t}.vault`);\n        else r = e.path.endsWith(\".vault\") ? e.path : `${e.path}.vault`;\n        else r = _i.resolve(process.cwd(), \".env.vault\");\n        return Di.existsSync(r) ? r : null;\n    }\n    function Cs(e) {\n        return e[0] === \"~\" ? _i.join(rp.homedir(), e.slice(1)) : e;\n    }\n    function cp(e) {\n        ap(\"Loading env from encrypted .env.vault\");\n        let r = B._parseVault(e), t = process.env;\n        return e && e.processEnv != null && (t = e.processEnv), B.populate(t, r, e), {\n            parsed: r\n        };\n    }\n    function pp(e) {\n        let r = _i.resolve(process.cwd(), \".env\"), t = \"utf8\", n = !!(e && e.debug);\n        e && e.encoding ? t = e.encoding : n && tn(\"No encoding is specified. UTF-8 is used by default\");\n        let i = [\n            r\n        ];\n        if (e && e.path) if (!Array.isArray(e.path)) i = [\n            Cs(e.path)\n        ];\n        else {\n            i = [];\n            for (let l of e.path)i.push(Cs(l));\n        }\n        let o, s = {};\n        for (let l of i)try {\n            let u = B.parse(Di.readFileSync(l, {\n                encoding: t\n            }));\n            B.populate(s, u, e);\n        } catch (u) {\n            n && tn(`Failed to load ${l} ${u.message}`), o = u;\n        }\n        let a = process.env;\n        return e && e.processEnv != null && (a = e.processEnv), B.populate(a, s, e), o ? {\n            parsed: s,\n            error: o\n        } : {\n            parsed: s\n        };\n    }\n    function dp(e) {\n        if (As(e).length === 0) return B.configDotenv(e);\n        let r = Is(e);\n        return r ? B._configVault(e) : (lp(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`), B.configDotenv(e));\n    }\n    function mp(e, r) {\n        let t = Buffer.from(r.slice(-64), \"hex\"), n = Buffer.from(e, \"base64\"), i = n.subarray(0, 12), o = n.subarray(-16);\n        n = n.subarray(12, -16);\n        try {\n            let s = tp.createDecipheriv(\"aes-256-gcm\", t, i);\n            return s.setAuthTag(o), `${s.update(n)}${s.final()}`;\n        } catch (s) {\n            let a = s instanceof RangeError, l = s.message === \"Invalid key length\", u = s.message === \"Unsupported state or unable to authenticate data\";\n            if (a || l) {\n                let c = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c.code = \"INVALID_DOTENV_KEY\", c;\n            } else if (u) {\n                let c = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c.code = \"DECRYPTION_FAILED\", c;\n            } else throw s;\n        }\n    }\n    function fp(e, r, t = {}) {\n        let n = !!(t && t.debug), i = !!(t && t.override);\n        if (typeof r != \"object\") {\n            let o = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o.code = \"OBJECT_REQUIRED\", o;\n        }\n        for (let o of Object.keys(r))Object.prototype.hasOwnProperty.call(e, o) ? (i === !0 && (e[o] = r[o]), n && tn(i === !0 ? `\"${o}\" is already defined and WAS overwritten` : `\"${o}\" is already defined and was NOT overwritten`)) : e[o] = r[o];\n    }\n    var B = {\n        configDotenv: pp,\n        _configVault: cp,\n        _parseVault: sp,\n        config: dp,\n        decrypt: mp,\n        parse: op,\n        populate: fp\n    };\n    Ne.exports.configDotenv = B.configDotenv;\n    Ne.exports._configVault = B._configVault;\n    Ne.exports._parseVault = B._parseVault;\n    Ne.exports.config = B.config;\n    Ne.exports.decrypt = B.decrypt;\n    Ne.exports.parse = B.parse;\n    Ne.exports.populate = B.populate;\n    Ne.exports = B;\n});\nvar Ns = ne((Nh, on)=>{\n    \"use strict\";\n    on.exports = (e = {})=>{\n        let r;\n        if (e.repoUrl) r = e.repoUrl;\n        else if (e.user && e.repo) r = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let t = new URL(`${r}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                t.searchParams.set(i, o);\n            }\n        }\n        return t.toString();\n    };\n    on.exports.default = on.exports;\n});\nvar Gi = ne((pb, na)=>{\n    \"use strict\";\n    na.exports = function() {\n        function e(r, t, n, i, o) {\n            return r < t || n < t ? r > n ? n + 1 : r + 1 : i === o ? t : t + 1;\n        }\n        return function(r, t) {\n            if (r === t) return 0;\n            if (r.length > t.length) {\n                var n = r;\n                r = t, t = n;\n            }\n            for(var i = r.length, o = t.length; i > 0 && r.charCodeAt(i - 1) === t.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && r.charCodeAt(s) === t.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, g, h, I, P, S, b, O = [];\n            for(l = 0; l < i; l++)O.push(l + 1), O.push(r.charCodeAt(s + l));\n            for(var me = O.length - 1; a < o - 3;)for(I = t.charCodeAt(s + (u = a)), P = t.charCodeAt(s + (c = a + 1)), S = t.charCodeAt(s + (p = a + 2)), b = t.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2)g = O[l], h = O[l + 1], u = e(g, u, c, I, h), c = e(u, c, p, P, h), p = e(c, p, d, S, h), f = e(p, d, f, b, h), O[l] = f, d = p, p = c, c = u, u = g;\n            for(; a < o;)for(I = t.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2)g = O[l], O[l] = f = e(g, u, f, I, O[l + 1]), u = g;\n            return f;\n        };\n    }();\n});\nvar la = Do(()=>{\n    \"use strict\";\n});\nvar ua = Do(()=>{\n    \"use strict\";\n});\nvar Vf = {};\ntr(Vf, {\n    DMMF: ()=>lt,\n    Debug: ()=>N,\n    Decimal: ()=>ve,\n    Extensions: ()=>ei,\n    MetricsClient: ()=>Fr,\n    PrismaClientInitializationError: ()=>T,\n    PrismaClientKnownRequestError: ()=>z,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>j,\n    PrismaClientValidationError: ()=>Z,\n    Public: ()=>ri,\n    Sql: ()=>oe,\n    createParam: ()=>Sa,\n    defineDmmfProperty: ()=>Oa,\n    deserializeJsonResponse: ()=>Tr,\n    deserializeRawResult: ()=>Yn,\n    dmmfToRuntimeDataModel: ()=>zs,\n    empty: ()=>Na,\n    getPrismaClient: ()=>fu,\n    getRuntime: ()=>qn,\n    join: ()=>_a,\n    makeStrictEnum: ()=>gu,\n    makeTypedQueryFactory: ()=>Da,\n    objectEnumValues: ()=>Sn,\n    raw: ()=>eo,\n    serializeJsonQuery: ()=>Dn,\n    skip: ()=>On,\n    sqltag: ()=>ro,\n    warnEnvConflicts: ()=>hu,\n    warnOnce: ()=>ot\n});\nmodule.exports = vu(Vf);\nvar ei = {};\ntr(ei, {\n    defineExtension: ()=>No,\n    getExtensionContext: ()=>Fo\n});\nfunction No(e) {\n    return typeof e == \"function\" ? e : (r)=>r.$extends(e);\n}\nfunction Fo(e) {\n    return e;\n}\nvar ri = {};\ntr(ri, {\n    validator: ()=>Lo\n});\nfunction Lo(...e) {\n    return (r)=>r;\n}\nvar jt = {};\ntr(jt, {\n    $: ()=>Vo,\n    bgBlack: ()=>Du,\n    bgBlue: ()=>Lu,\n    bgCyan: ()=>$u,\n    bgGreen: ()=>Nu,\n    bgMagenta: ()=>Mu,\n    bgRed: ()=>_u,\n    bgWhite: ()=>qu,\n    bgYellow: ()=>Fu,\n    black: ()=>Au,\n    blue: ()=>nr,\n    bold: ()=>W,\n    cyan: ()=>Oe,\n    dim: ()=>Ie,\n    gray: ()=>Hr,\n    green: ()=>qe,\n    grey: ()=>Ou,\n    hidden: ()=>Ru,\n    inverse: ()=>Su,\n    italic: ()=>Tu,\n    magenta: ()=>Iu,\n    red: ()=>ce,\n    reset: ()=>Pu,\n    strikethrough: ()=>Cu,\n    underline: ()=>Y,\n    white: ()=>ku,\n    yellow: ()=>ke\n});\nvar ti, Mo, $o, qo, jo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: ti, NODE_DISABLE_COLORS: Mo, NO_COLOR: $o, TERM: qo } = process.env || {}, jo = process.stdout && process.stdout.isTTY);\nvar Vo = {\n    enabled: !Mo && $o == null && qo !== \"dumb\" && (ti != null && ti !== \"0\" || jo)\n};\nfunction L(e, r) {\n    let t = new RegExp(`\\\\x1b\\\\[${r}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${r}m`;\n    return function(o) {\n        return !Vo.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(t, i + n) : o) + i;\n    };\n}\nvar Pu = L(0, 0), W = L(1, 22), Ie = L(2, 22), Tu = L(3, 23), Y = L(4, 24), Su = L(7, 27), Ru = L(8, 28), Cu = L(9, 29), Au = L(30, 39), ce = L(31, 39), qe = L(32, 39), ke = L(33, 39), nr = L(34, 39), Iu = L(35, 39), Oe = L(36, 39), ku = L(37, 39), Hr = L(90, 39), Ou = L(90, 39), Du = L(40, 49), _u = L(41, 49), Nu = L(42, 49), Fu = L(43, 49), Lu = L(44, 49), Mu = L(45, 49), $u = L(46, 49), qu = L(47, 49);\nvar ju = 100, Bo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Kr = [], Uo = Date.now(), Vu = 0, ni = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= ni.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= ni.DEBUG_COLORS ? ni.DEBUG_COLORS === \"true\" : !0;\nvar Yr = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let r = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), t = r.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = r.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return t && !n;\n    },\n    log: (...e)=>{\n        let [r, t, ...n] = e;\n        (console.warn ?? console.log)(`${r} ${t}`, ...n);\n    },\n    formatters: {}\n};\nfunction Bu(e) {\n    let r = {\n        color: Bo[Vu++ % Bo.length],\n        enabled: Yr.enabled(e),\n        namespace: e,\n        log: Yr.log,\n        extend: ()=>{}\n    }, t = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = r;\n        if (n.length !== 0 && Kr.push([\n            o,\n            ...n\n        ]), Kr.length > ju && Kr.shift(), Yr.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Uu(c)), u = `+${Date.now() - Uo}ms`;\n            Uo = Date.now(), globalThis.DEBUG_COLORS ? a(jt[s](W(o)), ...l, jt[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(t, {\n        get: (n, i)=>r[i],\n        set: (n, i, o)=>r[i] = o\n    });\n}\nvar N = new Proxy(Bu, {\n    get: (e, r)=>Yr[r],\n    set: (e, r, t)=>Yr[r] = t\n});\nfunction Uu(e, r = 2) {\n    let t = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (t.has(i)) return \"[Circular *]\";\n            t.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, r);\n}\nfunction Qo(e = 7500) {\n    let r = Kr.map(([t, ...n])=>`${t} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return r.length < e ? r : r.slice(-e);\n}\nfunction Go() {\n    Kr.length = 0;\n}\nvar gr = N;\nvar Wo = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nfunction ii() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && Wo.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar oi = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Vt = \"libquery_engine\";\nfunction Bt(e, r) {\n    let t = r === \"url\";\n    return e.includes(\"windows\") ? t ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? t ? `${Vt}.dylib.node` : `${Vt}-${e}.dylib.node` : t ? `${Vt}.so.node` : `${Vt}-${e}.so.node`;\n}\nvar Yo = k(__webpack_require__(/*! node:child_process */ \"node:child_process\")), ci = k(__webpack_require__(/*! node:fs/promises */ \"node:fs/promises\")), Jt = k(__webpack_require__(/*! node:os */ \"node:os\"));\nvar De = Symbol.for(\"@ts-pattern/matcher\"), Qu = Symbol.for(\"@ts-pattern/isVariadic\"), Qt = \"@ts-pattern/anonymous-select-key\", si = (e)=>!!(e && typeof e == \"object\"), Ut = (e)=>e && !!e[De], Ee = (e, r, t)=>{\n    if (Ut(e)) {\n        let n = e[De](), { matched: i, selections: o } = n.match(r);\n        return i && o && Object.keys(o).forEach((s)=>t(s, o[s])), i;\n    }\n    if (si(e)) {\n        if (!si(r)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(r)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Ut(a) && a[Qu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (r.length < n.length + i.length) return !1;\n                let s = r.slice(0, n.length), a = i.length === 0 ? [] : r.slice(-i.length), l = r.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Ee(u, s[c], t)) && i.every((u, c)=>Ee(u, a[c], t)) && (o.length === 0 || Ee(o[0], l, t));\n            }\n            return e.length === r.length && e.every((s, a)=>Ee(s, r[a], t));\n        }\n        return Reflect.ownKeys(e).every((n)=>{\n            let i = e[n];\n            return (n in r || Ut(o = i) && o[De]().matcherType === \"optional\") && Ee(i, r[n], t);\n            var o;\n        });\n    }\n    return Object.is(r, e);\n}, Qe = (e)=>{\n    var r, t, n;\n    return si(e) ? Ut(e) ? (r = (t = (n = e[De]()).getSelectionKeys) == null ? void 0 : t.call(n)) != null ? r : [] : Array.isArray(e) ? zr(e, Qe) : zr(Object.values(e), Qe) : [];\n}, zr = (e, r)=>e.reduce((t, n)=>t.concat(r(n)), []);\nfunction pe(e) {\n    return Object.assign(e, {\n        optional: ()=>Gu(e),\n        and: (r)=>q(e, r),\n        or: (r)=>Wu(e, r),\n        select: (r)=>r === void 0 ? Jo(e) : Jo(r, e)\n    });\n}\nfunction Gu(e) {\n    return pe({\n        [De]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return r === void 0 ? (Qe(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: t\n                    }) : {\n                        matched: Ee(e, r, n),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Qe(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction q(...e) {\n    return pe({\n        [De]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>zr(e, Qe),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Wu(...e) {\n    return pe({\n        [De]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return zr(e, Qe).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>zr(e, Qe),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction C(e) {\n    return {\n        [De]: ()=>({\n                match: (r)=>({\n                        matched: !!e(r)\n                    })\n            })\n    };\n}\nfunction Jo(...e) {\n    let r = typeof e[0] == \"string\" ? e[0] : void 0, t = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return pe({\n        [De]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [r ?? Qt]: n\n                    };\n                    return {\n                        matched: t === void 0 || Ee(t, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        r ?? Qt\n                    ].concat(t === void 0 ? [] : Qe(t))\n            })\n    });\n}\nfunction ye(e) {\n    return typeof e == \"number\";\n}\nfunction je(e) {\n    return typeof e == \"string\";\n}\nfunction Ve(e) {\n    return typeof e == \"bigint\";\n}\nvar eg = pe(C(function(e) {\n    return !0;\n}));\nvar Be = (e)=>Object.assign(pe(e), {\n        startsWith: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && n.startsWith(t)))));\n            var t;\n        },\n        endsWith: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && n.endsWith(t)))));\n            var t;\n        },\n        minLength: (r)=>Be(q(e, ((t)=>C((n)=>je(n) && n.length >= t))(r))),\n        length: (r)=>Be(q(e, ((t)=>C((n)=>je(n) && n.length === t))(r))),\n        maxLength: (r)=>Be(q(e, ((t)=>C((n)=>je(n) && n.length <= t))(r))),\n        includes: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && n.includes(t)))));\n            var t;\n        },\n        regex: (r)=>{\n            return Be(q(e, (t = r, C((n)=>je(n) && !!n.match(t)))));\n            var t;\n        }\n    }), rg = Be(C(je)), be = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>be(q(e, ((n, i)=>C((o)=>ye(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n < t))(r))),\n        gt: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n > t))(r))),\n        lte: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n <= t))(r))),\n        gte: (r)=>be(q(e, ((t)=>C((n)=>ye(n) && n >= t))(r))),\n        int: ()=>be(q(e, C((r)=>ye(r) && Number.isInteger(r)))),\n        finite: ()=>be(q(e, C((r)=>ye(r) && Number.isFinite(r)))),\n        positive: ()=>be(q(e, C((r)=>ye(r) && r > 0))),\n        negative: ()=>be(q(e, C((r)=>ye(r) && r < 0)))\n    }), tg = be(C(ye)), Ue = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>Ue(q(e, ((n, i)=>C((o)=>Ve(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n < t))(r))),\n        gt: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n > t))(r))),\n        lte: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n <= t))(r))),\n        gte: (r)=>Ue(q(e, ((t)=>C((n)=>Ve(n) && n >= t))(r))),\n        positive: ()=>Ue(q(e, C((r)=>Ve(r) && r > 0))),\n        negative: ()=>Ue(q(e, C((r)=>Ve(r) && r < 0)))\n    }), ng = Ue(C(Ve)), ig = pe(C(function(e) {\n    return typeof e == \"boolean\";\n})), og = pe(C(function(e) {\n    return typeof e == \"symbol\";\n})), sg = pe(C(function(e) {\n    return e == null;\n})), ag = pe(C(function(e) {\n    return e != null;\n}));\nvar ai = class extends Error {\n    constructor(r){\n        let t;\n        try {\n            t = JSON.stringify(r);\n        } catch  {\n            t = r;\n        }\n        super(`Pattern matching error: no pattern matches value ${t}`), this.input = void 0, this.input = r;\n    }\n}, li = {\n    matched: !1,\n    value: void 0\n};\nfunction hr(e) {\n    return new ui(e, li);\n}\nvar ui = class e {\n    constructor(r, t){\n        this.input = void 0, this.state = void 0, this.input = r, this.state = t;\n    }\n    with(...r) {\n        if (this.state.matched) return this;\n        let t = r[r.length - 1], n = [\n            r[0]\n        ], i;\n        r.length === 3 && typeof r[1] == \"function\" ? i = r[1] : r.length > 2 && n.push(...r.slice(1, r.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Ee(u, this.input, a)) || i && !i(this.input) ? li : {\n            matched: !0,\n            value: t(o ? Qt in s ? s[Qt] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(r, t) {\n        if (this.state.matched) return this;\n        let n = !!r(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: t(this.input, this.input)\n        } : li);\n    }\n    otherwise(r) {\n        return this.state.matched ? this.state.value : r(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new ai(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar zo = __webpack_require__(/*! node:util */ \"node:util\");\nvar Ju = {\n    warn: ke(\"prisma:warn\")\n}, Hu = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Gt(e, ...r) {\n    Hu.warn() && console.warn(`${Ju.warn} ${e}`, ...r);\n}\nvar Ku = (0, zo.promisify)(Yo.default.exec), ee = gr(\"prisma:get-platform\"), Yu = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Zo() {\n    let e = Jt.default.platform(), r = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Ht(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: r\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: r\n    };\n    let t = await Zu(), n = await sc(), i = ec({\n        arch: r,\n        archFromUname: n,\n        familyDistro: t.familyDistro\n    }), { libssl: o } = await rc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: r,\n        archFromUname: n,\n        ...t\n    };\n}\nfunction zu(e) {\n    let r = /^ID=\"?([^\"\\n]*)\"?$/im, t = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = r.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = t.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = hr({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return ee(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function Zu() {\n    let e = \"/etc/os-release\";\n    try {\n        let r = await ci.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return zu(r);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction Xu(e) {\n    let r = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (r) {\n        let t = `${r[1]}.x`;\n        return Xo(t);\n    }\n}\nfunction Ho(e) {\n    let r = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (r) {\n        let t = `${r[1]}${r[2] ?? \".0\"}.x`;\n        return Xo(t);\n    }\n}\nfunction Xo(e) {\n    let r = (()=>{\n        if (rs(e)) return e;\n        let t = e.split(\".\");\n        return t[1] = \"0\", t.join(\".\");\n    })();\n    if (Yu.includes(r)) return r;\n}\nfunction ec(e) {\n    return hr(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(ee('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: r })=>(ee('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${r}-linux-gnu`,\n            `/lib/${r}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ee('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: r, arch: t, archFromUname: n })=>(ee(`Don't know any platform-specific paths for \"${r}\" on ${t} (${n})`), []));\n}\nasync function rc(e) {\n    let r = 'grep -v \"libssl.so.0\"', t = await Ko(e);\n    if (t) {\n        ee(`Found libssl.so file using platform-specific paths: ${t}`);\n        let o = Ho(t);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ee('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Ht(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${r}`);\n    if (n || (n = await Ko([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n) {\n        ee(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = Ho(n);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Ht(\"openssl version -v\");\n    if (i) {\n        ee(`Found openssl binary with version: ${i}`);\n        let o = Xu(i);\n        if (ee(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ee(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Ko(e) {\n    for (let r of e){\n        let t = await tc(r);\n        if (t) return t;\n    }\n}\nasync function tc(e) {\n    try {\n        return (await ci.default.readdir(e)).find((t)=>t.startsWith(\"libssl.so.\") && !t.startsWith(\"libssl.so.0\"));\n    } catch (r) {\n        if (r.code === \"ENOENT\") return;\n        throw r;\n    }\n}\nasync function ir() {\n    let { binaryTarget: e } = await es();\n    return e;\n}\nfunction nc(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function pi() {\n    let { memoized: e, ...r } = await es();\n    return r;\n}\nvar Wt = {};\nasync function es() {\n    if (nc(Wt)) return Promise.resolve({\n        ...Wt,\n        memoized: !0\n    });\n    let e = await Zo(), r = ic(e);\n    return Wt = {\n        ...e,\n        binaryTarget: r\n    }, {\n        ...Wt,\n        memoized: !1\n    };\n}\nfunction ic(e) {\n    let { platform: r, arch: t, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    r === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(t) && Gt(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${t}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (r === \"linux\" && i === void 0) {\n        let c = hr({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Gt(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (r === \"linux\" && o === void 0 && ee(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), r === \"darwin\" && t === \"arm64\") return \"darwin-arm64\";\n    if (r === \"darwin\") return \"darwin\";\n    if (r === \"win32\") return \"windows\";\n    if (r === \"freebsd\") return o;\n    if (r === \"openbsd\") return \"openbsd\";\n    if (r === \"netbsd\") return \"netbsd\";\n    if (r === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (r === \"linux\" && t === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (r === \"linux\" && t === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (r === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || rs(i) ? c : `${c}-openssl-${i}`;\n    }\n    return r === \"linux\" && o && i ? `${o}-openssl-${i}` : (r !== \"linux\" && Gt(`Prisma detected unknown OS \"${r}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function oc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Ht(e) {\n    return oc(async ()=>{\n        let r = await Ku(e);\n        return ee(`Command \"${e}\" successfully returned \"${r.stdout}\"`), r.stdout;\n    });\n}\nasync function sc() {\n    return typeof Jt.default.machine == \"function\" ? Jt.default.machine() : (await Ht(\"uname -m\"))?.trim();\n}\nfunction rs(e) {\n    return e.startsWith(\"1.\");\n}\nvar zt = {};\ntr(zt, {\n    beep: ()=>Dc,\n    clearScreen: ()=>Ac,\n    clearTerminal: ()=>Ic,\n    cursorBackward: ()=>mc,\n    cursorDown: ()=>pc,\n    cursorForward: ()=>dc,\n    cursorGetPosition: ()=>hc,\n    cursorHide: ()=>Ec,\n    cursorLeft: ()=>is,\n    cursorMove: ()=>cc,\n    cursorNextLine: ()=>yc,\n    cursorPrevLine: ()=>bc,\n    cursorRestorePosition: ()=>gc,\n    cursorSavePosition: ()=>fc,\n    cursorShow: ()=>wc,\n    cursorTo: ()=>uc,\n    cursorUp: ()=>ns,\n    enterAlternativeScreen: ()=>kc,\n    eraseDown: ()=>Tc,\n    eraseEndLine: ()=>vc,\n    eraseLine: ()=>os,\n    eraseLines: ()=>xc,\n    eraseScreen: ()=>di,\n    eraseStartLine: ()=>Pc,\n    eraseUp: ()=>Sc,\n    exitAlternativeScreen: ()=>Oc,\n    iTerm: ()=>Fc,\n    image: ()=>Nc,\n    link: ()=>_c,\n    scrollDown: ()=>Cc,\n    scrollUp: ()=>Rc\n});\nvar Yt = k(__webpack_require__(/*! node:process */ \"node:process\"), 1);\nvar Kt = globalThis.window?.document !== void 0, gg = globalThis.process?.versions?.node !== void 0, hg = globalThis.process?.versions?.bun !== void 0, yg = globalThis.Deno?.version?.deno !== void 0, bg = globalThis.process?.versions?.electron !== void 0, Eg = globalThis.navigator?.userAgent?.includes(\"jsdom\") === !0, wg = typeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope, xg = typeof DedicatedWorkerGlobalScope < \"u\" && globalThis instanceof DedicatedWorkerGlobalScope, vg = typeof SharedWorkerGlobalScope < \"u\" && globalThis instanceof SharedWorkerGlobalScope, Pg = typeof ServiceWorkerGlobalScope < \"u\" && globalThis instanceof ServiceWorkerGlobalScope, Zr = globalThis.navigator?.userAgentData?.platform, Tg = Zr === \"macOS\" || globalThis.navigator?.platform === \"MacIntel\" || globalThis.navigator?.userAgent?.includes(\" Mac \") === !0 || globalThis.process?.platform === \"darwin\", Sg = Zr === \"Windows\" || globalThis.navigator?.platform === \"Win32\" || globalThis.process?.platform === \"win32\", Rg = Zr === \"Linux\" || globalThis.navigator?.platform?.startsWith(\"Linux\") === !0 || globalThis.navigator?.userAgent?.includes(\" Linux \") === !0 || globalThis.process?.platform === \"linux\", Cg = Zr === \"iOS\" || globalThis.navigator?.platform === \"MacIntel\" && globalThis.navigator?.maxTouchPoints > 1 || /iPad|iPhone|iPod/.test(globalThis.navigator?.platform), Ag = Zr === \"Android\" || globalThis.navigator?.platform === \"Android\" || globalThis.navigator?.userAgent?.includes(\" Android \") === !0 || globalThis.process?.platform === \"android\";\nvar A = \"\\x1b[\", et = \"\\x1b]\", yr = \"\\x07\", Xr = \";\", ts = !Kt && Yt.default.env.TERM_PROGRAM === \"Apple_Terminal\", ac = !Kt && Yt.default.platform === \"win32\", lc = Kt ? ()=>{\n    throw new Error(\"`process.cwd()` only works in Node.js, not the browser.\");\n} : Yt.default.cwd, uc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    return typeof r != \"number\" ? A + (e + 1) + \"G\" : A + (r + 1) + Xr + (e + 1) + \"H\";\n}, cc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    let t = \"\";\n    return e < 0 ? t += A + -e + \"D\" : e > 0 && (t += A + e + \"C\"), r < 0 ? t += A + -r + \"A\" : r > 0 && (t += A + r + \"B\"), t;\n}, ns = (e = 1)=>A + e + \"A\", pc = (e = 1)=>A + e + \"B\", dc = (e = 1)=>A + e + \"C\", mc = (e = 1)=>A + e + \"D\", is = A + \"G\", fc = ts ? \"\\x1b7\" : A + \"s\", gc = ts ? \"\\x1b8\" : A + \"u\", hc = A + \"6n\", yc = A + \"E\", bc = A + \"F\", Ec = A + \"?25l\", wc = A + \"?25h\", xc = (e)=>{\n    let r = \"\";\n    for(let t = 0; t < e; t++)r += os + (t < e - 1 ? ns() : \"\");\n    return e && (r += is), r;\n}, vc = A + \"K\", Pc = A + \"1K\", os = A + \"2K\", Tc = A + \"J\", Sc = A + \"1J\", di = A + \"2J\", Rc = A + \"S\", Cc = A + \"T\", Ac = \"\\x1bc\", Ic = ac ? `${di}${A}0f` : `${di}${A}3J${A}H`, kc = A + \"?1049h\", Oc = A + \"?1049l\", Dc = yr, _c = (e, r)=>[\n        et,\n        \"8\",\n        Xr,\n        Xr,\n        r,\n        yr,\n        e,\n        et,\n        \"8\",\n        Xr,\n        Xr,\n        yr\n    ].join(\"\"), Nc = (e, r = {})=>{\n    let t = `${et}1337;File=inline=1`;\n    return r.width && (t += `;width=${r.width}`), r.height && (t += `;height=${r.height}`), r.preserveAspectRatio === !1 && (t += \";preserveAspectRatio=0\"), t + \":\" + Buffer.from(e).toString(\"base64\") + yr;\n}, Fc = {\n    setCwd: (e = lc())=>`${et}50;CurrentDir=${e}${yr}`,\n    annotation (e, r = {}) {\n        let t = `${et}1337;`, n = r.x !== void 0, i = r.y !== void 0;\n        if ((n || i) && !(n && i && r.length !== void 0)) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        return e = e.replaceAll(\"|\", \"\"), t += r.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", r.length > 0 ? t += (n ? [\n            e,\n            r.length,\n            r.x,\n            r.y\n        ] : [\n            r.length,\n            e\n        ]).join(\"|\") : t += e, t + yr;\n    }\n};\nvar Zt = k(ds(), 1);\nfunction or(e, r, { target: t = \"stdout\", ...n } = {}) {\n    return Zt.default[t] ? zt.link(e, r) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, r) : `${e} (\\u200B${r}\\u200B)`;\n}\nor.isSupported = Zt.default.stdout;\nor.stderr = (e, r, t = {})=>or(e, r, {\n        target: \"stderr\",\n        ...t\n    });\nor.stderr.isSupported = Zt.default.stderr;\nfunction yi(e) {\n    return or(e, e, {\n        fallback: Y\n    });\n}\nvar jc = ms(), bi = jc.version;\nfunction Er(e) {\n    let r = Vc();\n    return r || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"client\" ? \"client\" : Bc(e));\n}\nfunction Vc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"client\" ? \"client\" : void 0;\n}\nfunction Bc(e) {\n    return e?.previewFeatures.includes(\"queryCompiler\") ? \"client\" : \"library\";\n}\nvar Qc = k(wi());\nvar M = k(__webpack_require__(/*! node:path */ \"node:path\")), Gc = k(wi()), ah = N(\"prisma:engines\");\nfunction fs() {\n    return M.default.join(__dirname, \"../\");\n}\nvar lh = \"libquery-engine\";\nM.default.join(__dirname, \"../query-engine-darwin\");\nM.default.join(__dirname, \"../query-engine-darwin-arm64\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nM.default.join(__dirname, \"../query-engine-linux-static-x64\");\nM.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nM.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar xi = k(__webpack_require__(/*! node:fs */ \"node:fs\")), gs = gr(\"chmodPlusX\");\nfunction vi(e) {\n    if (process.platform === \"win32\") return;\n    let r = xi.default.statSync(e), t = r.mode | 64 | 8 | 1;\n    if (r.mode === t) {\n        gs(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = t.toString(8).slice(-3);\n    gs(`Have to call chmodPlusX on ${e}`), xi.default.chmodSync(e, n);\n}\nfunction Pi(e) {\n    let r = e.e, t = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = r.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${yi(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Ie(e.id)}\\`).`, s = hr({\n        message: r.message,\n        code: r.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${t(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${t(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${t(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${r.message}`;\n}\nvar bs = k(ys(), 1);\nfunction Ti(e) {\n    let r = (0, bs.default)(e);\n    if (r === 0) return e;\n    let t = new RegExp(`^[ \\\\t]{${r}}`, \"gm\");\n    return e.replace(t, \"\");\n}\nvar Es = \"prisma+postgres\", en = `${Es}:`;\nfunction Si(e) {\n    return e?.startsWith(`${en}//`) ?? !1;\n}\nvar xs = k(Ri());\nfunction Ai(e) {\n    return String(new Ci(e));\n}\nvar Ci = class {\n    constructor(r){\n        this.config = r;\n    }\n    toString() {\n        let { config: r } = this, t = r.provider.fromEnvVar ? `env(\"${r.provider.fromEnvVar}\")` : r.provider.value, n = JSON.parse(JSON.stringify({\n            provider: t,\n            binaryTargets: Wc(r.binaryTargets)\n        }));\n        return `generator ${r.name} {\n${(0, xs.default)(Jc(n), 2)}\n}`;\n    }\n};\nfunction Wc(e) {\n    let r;\n    if (e.length > 0) {\n        let t = e.find((n)=>n.fromEnvVar !== null);\n        t ? r = `env(\"${t.fromEnvVar}\")` : r = e.map((n)=>n.native ? \"native\" : n.value);\n    } else r = void 0;\n    return r;\n}\nfunction Jc(e) {\n    let r = Object.keys(e).reduce((t, n)=>Math.max(t, n.length), 0);\n    return Object.entries(e).map(([t, n])=>`${t.padEnd(r)} = ${Hc(n)}`).join(`\n`);\n}\nfunction Hc(e) {\n    return JSON.parse(JSON.stringify(e, (r, t)=>Array.isArray(t) ? `[${t.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(t)));\n}\nvar tt = {};\ntr(tt, {\n    error: ()=>zc,\n    info: ()=>Yc,\n    log: ()=>Kc,\n    query: ()=>Zc,\n    should: ()=>vs,\n    tags: ()=>rt,\n    warn: ()=>Ii\n});\nvar rt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: Oe(\"prisma:info\"),\n    query: nr(\"prisma:query\")\n}, vs = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Kc(...e) {\n    console.log(...e);\n}\nfunction Ii(e, ...r) {\n    vs.warn() && console.warn(`${rt.warn} ${e}`, ...r);\n}\nfunction Yc(e, ...r) {\n    console.info(`${rt.info} ${e}`, ...r);\n}\nfunction zc(e, ...r) {\n    console.error(`${rt.error} ${e}`, ...r);\n}\nfunction Zc(e, ...r) {\n    console.log(`${rt.query} ${e}`, ...r);\n}\nfunction rn(e, r) {\n    if (!e) throw new Error(`${r}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction _e(e, r) {\n    throw new Error(r);\n}\nvar nt = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Oi(e) {\n    return nt.default.sep === nt.default.posix.sep ? e : e.split(nt.default.sep).join(nt.default.posix.sep);\n}\nvar Li = k(ks()), nn = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar wr = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Os(e) {\n    let r = e.ignoreProcessEnv ? {} : process.env, t = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(r, p) ? r[p] : e.parsed[p] || \"\", u = t(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(r, n) ? r[n] : e.parsed[n];\n        e.parsed[n] = t(i);\n    }\n    for(let n in e.parsed)r[n] = e.parsed[n];\n    return e;\n}\nvar Fi = gr(\"prisma:tryLoadEnv\");\nfunction it({ rootEnvPath: e, schemaEnvPath: r }, t = {\n    conflictCheck: \"none\"\n}) {\n    let n = Ds(e);\n    t.conflictCheck !== \"none\" && gp(n, r, t.conflictCheck);\n    let i = null;\n    return _s(n?.path, r) || (i = Ds(r)), !n && !i && Fi(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(ce(W(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction gp(e, r, t) {\n    let n = e?.dotenvResult.parsed, i = !_s(e?.path, r);\n    if (n && r && i && nn.default.existsSync(r)) {\n        let o = Li.default.parse(nn.default.readFileSync(r)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = wr.default.relative(process.cwd(), e.path), l = wr.default.relative(process.cwd(), r);\n            if (t === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${Y(a)} and ${Y(l)}\nConflicting env vars:\n${s.map((c)=>`  ${W(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${Y(l)} to ${Y(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (t === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>W(c)).join(\", \")} in ${Y(a)} and ${Y(l)}\nEnv vars from ${Y(l)} overwrite the ones from ${Y(a)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction Ds(e) {\n    if (hp(e)) {\n        Fi(`Environment variables loaded from ${e}`);\n        let r = Li.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: Os(r),\n            message: Ie(`Environment variables loaded from ${wr.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else Fi(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction _s(e, r) {\n    return e && r && wr.default.resolve(e) === wr.default.resolve(r);\n}\nfunction hp(e) {\n    return !!(e && nn.default.existsSync(e));\n}\nfunction Mi(e, r) {\n    return Object.prototype.hasOwnProperty.call(e, r);\n}\nfunction xr(e, r) {\n    let t = {};\n    for (let n of Object.keys(e))t[n] = r(e[n], n);\n    return t;\n}\nfunction $i(e, r) {\n    if (e.length === 0) return;\n    let t = e[0];\n    for(let n = 1; n < e.length; n++)r(t, e[n]) < 0 && (t = e[n]);\n    return t;\n}\nfunction x(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar Fs = new Set, ot = (e, r, ...t)=>{\n    Fs.has(e) || (Fs.add(e), Ii(r, ...t));\n};\nvar T = class e extends Error {\n    constructor(r, t, n){\n        super(r), this.name = \"PrismaClientInitializationError\", this.clientVersion = t, this.errorCode = n, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(T, \"PrismaClientInitializationError\");\nvar z = class extends Error {\n    constructor(r, { code: t, clientVersion: n, meta: i, batchRequestIdx: o }){\n        super(r), this.name = \"PrismaClientKnownRequestError\", this.code = t, this.clientVersion = n, this.meta = i, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(z, \"PrismaClientKnownRequestError\");\nvar le = class extends Error {\n    constructor(r, t){\n        super(r), this.name = \"PrismaClientRustPanicError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(le, \"PrismaClientRustPanicError\");\nvar j = class extends Error {\n    constructor(r, { clientVersion: t, batchRequestIdx: n }){\n        super(r), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = t, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(j, \"PrismaClientUnknownRequestError\");\nvar Z = class extends Error {\n    constructor(r, { clientVersion: t }){\n        var _temp;\n        _temp = super(r), this.name = \"PrismaClientValidationError\", _temp, this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(Z, \"PrismaClientValidationError\");\nvar vr = 9e15, Ke = 1e9, qi = \"0123456789abcdef\", un = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", cn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", ji = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -vr,\n    maxE: vr,\n    crypto: !1\n}, qs, Fe, w = !0, dn = \"[DecimalError] \", He = dn + \"Invalid argument: \", js = dn + \"Precision limit exceeded\", Vs = dn + \"crypto unavailable\", Bs = \"[object Decimal]\", X = Math.floor, U = Math.pow, yp = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, bp = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Ep = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Us = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, fe = 1e7, E = 7, wp = 9007199254740991, xp = un.length - 1, Vi = cn.length - 1, m = {\n    toStringTag: Bs\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), y(e);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, r) {\n    var t, n = this, i = n.constructor;\n    if (e = new i(e), r = new i(r), !e.s || !r.s) return new i(NaN);\n    if (e.gt(r)) throw Error(He + r);\n    return t = n.cmp(e), t < 0 ? e : n.cmp(r) > 0 ? r : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var r, t, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, r = 0, t = n < i ? n : i; r < t; ++r)if (s[r] !== a[r]) return s[r] > a[r] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.d ? t.d[0] ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = vp(n, Hs(n, t)), n.precision = e, n.rounding = r, y(Fe == 2 || Fe == 3 ? t.neg() : t, e, r, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, r, t, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(w = !1, o = c.s * U(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (t = J(c.d), e = c.e, (o = (e - t.length + 1) % 3) && (t += o == 1 || o == -2 ? \"0\" : \"00\"), o = U(t, 1 / 3), e = X((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? t = \"5e\" + e : (t = o.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + e), n = new p(t), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = F(u.plus(c).times(a), u.plus(l), s + 2, 1), J(a.d).slice(0, s) === (t = J(n.d)).slice(0, s)) if (t = t.slice(s - 3, s + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (y(n, e + 1, 1), r = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return w = !0, y(n, e, p.rounding, r);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, r = this.d, t = NaN;\n    if (r) {\n        if (e = r.length - 1, t = (e - X(this.e / E)) * E, e = r[e], e) for(; e % 10 == 0; e /= 10)t--;\n        t < 0 && (t = 0);\n    }\n    return t;\n};\nm.dividedBy = m.div = function(e) {\n    return F(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var r = this, t = r.constructor;\n    return y(F(r, new t(e), 0, 1, 1), t.precision, t.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var r = this.cmp(e);\n    return r == 1 || r === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, r, t, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    t = s.precision, n = s.rounding, s.precision = t + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), r = (1 / fn(4, e)).toString()) : (e = 16, r = \"2.3283064365386962890625e-10\"), o = Pr(s, 1, o.times(r), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return y(o, s.precision = t, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (r = o.precision, t = o.rounding, o.precision = r + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = Pr(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / fn(5, e)), i = Pr(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = r, o.rounding = t, y(i, r, t, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 7, n.rounding = 1, F(t.sinh(), t.cosh(), n.precision = e, n.rounding = r)) : new n(t.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e = this, r = e.constructor, t = e.abs().cmp(1), n = r.precision, i = r.rounding;\n    return t !== -1 ? t === 0 ? e.isNeg() ? we(r, n, i) : new r(0) : new r(NaN) : e.isZero() ? we(r, n + 4, i).times(.5) : (r.precision = n + 6, r.rounding = 1, e = new r(1).minus(e).div(e.plus(1)).sqrt().atan(), r.precision = n, r.rounding = i, e.times(2));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, w = !1, t = t.times(t).minus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln()) : new n(t);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, r, t = this, n = t.constructor;\n    return !t.isFinite() || t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, w = !1, t = t.times(t).plus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, r = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, r, !0) : (o.precision = t = n - i.e, i = F(i.plus(1), new o(1).minus(i), t + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = r, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (r = i.abs().cmp(1), t = o.precision, n = o.rounding, r !== -1 ? r === 0 ? (e = we(o, t + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = t + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = t, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Vi) return s = we(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Vi) return s = we(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, t = Math.min(28, a / E + 2 | 0), e = t; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(w = !1, r = Math.ceil(a / E), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[r] !== void 0) for(e = r; s.d[e] === o.d[e] && e--;);\n    return t && (s = s.times(2 << t - 1)), w = !0, y(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && X(this.e / E) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), r = !0;\n    else {\n        if (e = new c(e), t = e.d, e.s < 0 || !t || !t[0] || e.eq(1)) return new c(NaN);\n        r = e.eq(10);\n    }\n    if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1)) return new c(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);\n    if (r) if (t.length > 1) o = !0;\n    else {\n        for(i = t[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (w = !1, a = p + f, s = Je(u, a), n = r ? pn(c, a + 10) : Je(e, a), l = F(s, n, a, 1), st(l.d, i = p, d)) do if (a += 10, s = Je(u, a), n = r ? pn(c, a + 10) : Je(e, a), l = F(s, n, a, 1), !o) {\n        +J(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));\n        break;\n    }\n    while (st(l.d, i += 10, d));\n    return w = !0, y(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, g = f.constructor;\n    if (e = new g(e), !f.d || !e.d) return !f.s || !e.s ? e = new g(NaN) : f.d ? e.s = -e.s : e = new g(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = g.precision, l = g.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new g(f);\n        else return new g(l === 3 ? -0 : 0);\n        return w ? y(e, a, l) : e;\n    }\n    if (t = X(e.e / E), c = X(f.e / E), u = u.slice(), o = c - t, o) {\n        for(p = o < 0, p ? (r = u, o = -o, s = d.length) : (r = d, t = c, s = u.length), n = Math.max(Math.ceil(a / E), s) + 2, o > n && (o = n, r.length = 1), r.reverse(), n = o; n--;)r.push(0);\n        r.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (r = u, u = d, d = r, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = fe - 1;\n            --u[i], u[n] += fe;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--t;\n    return u[0] ? (e.d = u, e.e = mn(u, t), w ? y(e, a, l) : e) : new g(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var r, t = this, n = t.constructor;\n    return e = new n(e), !t.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || t.d && !t.d[0] ? y(new n(t), n.precision, n.rounding) : (w = !1, n.modulo == 9 ? (r = F(t, e.abs(), 0, 3, 1), r.s *= e.s) : r = F(t, e, 0, n.modulo, 1), r = r.times(e), w = !0, t.minus(r));\n};\nm.naturalExponential = m.exp = function() {\n    return Bi(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Je(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, y(e);\n};\nm.plus = m.add = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), w ? y(e, a, l) : e;\n    if (o = X(p.e / E), n = X(e.e / E), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (t = u, i = -i, s = c.length) : (t = c, n = o, s = u.length), o = Math.ceil(a / E), s = o > s ? o + 1 : s + 1, i > s && (i = s, t.length = 1), t.reverse(); i--;)t.push(0);\n        t.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, t = c, c = u, u = t), r = 0; i;)r = (u[--i] = u[i] + c[i] + r) / fe | 0, u[i] %= fe;\n    for(r && (u.unshift(r), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = mn(u, n), w ? y(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var r, t = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(He + e);\n    return t.d ? (r = Qs(t.d), e && t.e + 1 > r && (r = t.e + 1)) : r = NaN, r;\n};\nm.round = function() {\n    var e = this, r = e.constructor;\n    return y(new r(e), e.e + 1, r.rounding);\n};\nm.sine = m.sin = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Tp(n, Hs(n, t)), n.precision = e, n.rounding = r, y(Fe > 2 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, r, t, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(w = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (r = J(a), (r.length + l) % 2 == 0 && (r += \"0\"), u = Math.sqrt(r), l = X((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? r = \"5e\" + l : (r = u.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + l), n = new c(r)) : n = new c(u.toString()), t = (l = c.precision) + 3;;)if (o = n, n = o.plus(F(s, o, t + 2, 1)).times(.5), J(o.d).slice(0, t) === (r = J(n.d)).slice(0, t)) if (r = r.slice(t - 3, t + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        t += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (y(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return w = !0, y(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = F(t, new n(1).minus(t.times(t)).sqrt(), e + 10, 0), n.precision = e, n.rounding = r, y(Fe == 2 || Fe == 4 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var r, t, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(t = X(c.e / E) + X(e.e / E), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(r = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + r, o[i--] = a % fe | 0, r = a / fe | 0;\n        o[i] = (o[i] + r) % fe | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return r ? ++t : o.shift(), e.d = o, e.e = mn(o, t), w ? y(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, r) {\n    return Ui(this, 2, e, r);\n};\nm.toDecimalPlaces = m.toDP = function(e, r) {\n    var t = this, n = t.constructor;\n    return t = new n(t), e === void 0 ? t : (ie(e, 0, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8), y(t, e + t.e + 1, r));\n};\nm.toExponential = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, !0) : (ie(e, 0, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e + 1, r), t = xe(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toFixed = function(e, r) {\n    var t, n, i = this, o = i.constructor;\n    return e === void 0 ? t = xe(i) : (ie(e, 0, Ke), r === void 0 ? r = o.rounding : ie(r, 0, 8), n = y(new o(i), e + i.e + 1, r), t = xe(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + t : t;\n};\nm.toFraction = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, g = f.d, h = f.constructor;\n    if (!g) return new h(f);\n    if (u = t = new h(1), n = l = new h(0), r = new h(n), o = r.e = Qs(g) - f.e - 1, s = o % E, r.d[0] = U(10, s < 0 ? E + s : s), e == null) e = o > 0 ? r : u;\n    else {\n        if (a = new h(e), !a.isInt() || a.lt(u)) throw Error(He + a);\n        e = a.gt(r) ? o > 0 ? r : u : a;\n    }\n    for(w = !1, a = new h(J(g)), c = h.precision, h.precision = o = g.length * E * 2; p = F(a, r, 0, 1, 1), i = t.plus(p.times(n)), i.cmp(e) != 1;)t = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = r, r = a.minus(p.times(i)), a = i;\n    return i = F(e.minus(t), n, 0, 1, 1), l = l.plus(i.times(u)), t = t.plus(i.times(n)), l.s = u.s = f.s, d = F(u, n, o, 1).minus(f).abs().cmp(F(l, t, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        t\n    ], h.precision = c, w = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, r) {\n    return Ui(this, 16, e, r);\n};\nm.toNearest = function(e, r) {\n    var t = this, n = t.constructor;\n    if (t = new n(t), e == null) {\n        if (!t.d) return t;\n        e = new n(1), r = n.rounding;\n    } else {\n        if (e = new n(e), r === void 0 ? r = n.rounding : ie(r, 0, 8), !t.d) return e.s ? t : e;\n        if (!e.d) return e.s && (e.s = t.s), e;\n    }\n    return e.d[0] ? (w = !1, t = F(t, e, 0, r, 1).times(e), w = !0, y(t)) : (e.s = t.s, t = e), t;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, r) {\n    return Ui(this, 8, e, r);\n};\nm.toPower = m.pow = function(e) {\n    var r, t, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(U(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);\n    if (r = X(e.e / E), r >= e.d.length - 1 && (t = u < 0 ? -u : u) <= wp) return i = Gs(l, a, t, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);\n    if (s = a.s, s < 0) {\n        if (r < e.d.length - 1) return new l(NaN);\n        if ((e.d[r] & 1) == 0 && (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return t = U(+a, u), r = t == 0 || !isFinite(t) ? X(u * (Math.log(\"0.\" + J(a.d)) / Math.LN10 + a.e + 1)) : new l(t + \"\").e, r > l.maxE + 1 || r < l.minE - 1 ? new l(r > 0 ? s / 0 : 0) : (w = !1, l.rounding = a.s = 1, t = Math.min(12, (r + \"\").length), i = Bi(e.times(Je(a, n + t)), n), i.d && (i = y(i, n + 5, 1), st(i.d, n, o) && (r = n + 10, i = y(Bi(e.times(Je(a, r + t)), r), r + 5, 1), +J(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, w = !0, l.rounding = o, y(i, n, o));\n};\nm.toPrecision = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ie(e, 1, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e, r), t = xe(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toSignificantDigits = m.toSD = function(e, r) {\n    var t = this, n = t.constructor;\n    return e === void 0 ? (e = n.precision, r = n.rounding) : (ie(e, 1, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8)), y(new n(t), e, r);\n};\nm.toString = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + t : t;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() ? \"-\" + t : t;\n};\nfunction J(e) {\n    var r, t, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, r = 1; r < i; r++)n = e[r] + \"\", t = E - n.length, t && (o += We(t)), o += n;\n        s = e[r], n = s + \"\", t = E - n.length, t && (o += We(t));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ie(e, r, t) {\n    if (e !== ~~e || e < r || e > t) throw Error(He + e);\n}\nfunction st(e, r, t, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--r;\n    return --r < 0 ? (r += E, i = 0) : (i = Math.ceil((r + 1) / E), r %= E), o = U(10, E - r), a = e[i] % o | 0, n == null ? r < 3 ? (r == 0 ? a = a / 100 | 0 : r == 1 && (a = a / 10 | 0), s = t < 4 && a == 99999 || t > 3 && a == 49999 || a == 5e4 || a == 0) : s = (t < 4 && a + 1 == o || t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == U(10, r - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : r < 4 ? (r == 0 ? a = a / 1e3 | 0 : r == 1 ? a = a / 100 | 0 : r == 2 && (a = a / 10 | 0), s = (n || t < 4) && a == 9999 || !n && t > 3 && a == 4999) : s = ((n || t < 4) && a + 1 == o || !n && t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == U(10, r - 3) - 1, s;\n}\nfunction an(e, r, t) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= r;\n        for(i[0] += qi.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > t - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / t | 0, i[n] %= t);\n    }\n    return i.reverse();\n}\nfunction vp(e, r) {\n    var t, n, i;\n    if (r.isZero()) return r;\n    n = r.d.length, n < 32 ? (t = Math.ceil(n / 3), i = (1 / fn(4, t)).toString()) : (t = 16, i = \"2.3283064365386962890625e-10\"), e.precision += t, r = Pr(e, 1, r.times(i), new e(1));\n    for(var o = t; o--;){\n        var s = r.times(r);\n        r = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= t, r;\n}\nvar F = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function r(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function t(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, g, h, I, P, S, b, O, me, ae, Jr, V, te, Ae, H, fr, $t = n.constructor, Xn = n.s == i.s ? 1 : -1, K = n.d, _ = i.d;\n        if (!K || !K[0] || !_ || !_[0]) return new $t(!n.s || !i.s || (K ? _ && K[0] == _[0] : !_) ? NaN : K && K[0] == 0 || !_ ? Xn * 0 : Xn / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = fe, f = E, c = X(n.e / f) - X(i.e / f)), H = _.length, te = K.length, P = new $t(Xn), S = P.d = [], p = 0; _[p] == (K[p] || 0); p++);\n        if (_[p] > (K[p] || 0) && c--, o == null ? (ae = o = $t.precision, s = $t.rounding) : a ? ae = o + (n.e - i.e) + 1 : ae = o, ae < 0) S.push(1), g = !0;\n        else {\n            if (ae = ae / f + 2 | 0, p = 0, H == 1) {\n                for(d = 0, _ = _[0], ae++; (p < te || d) && ae--; p++)Jr = d * l + (K[p] || 0), S[p] = Jr / _ | 0, d = Jr % _ | 0;\n                g = d || p < te;\n            } else {\n                for(d = l / (_[0] + 1) | 0, d > 1 && (_ = e(_, d, l), K = e(K, d, l), H = _.length, te = K.length), V = H, b = K.slice(0, H), O = b.length; O < H;)b[O++] = 0;\n                fr = _.slice(), fr.unshift(0), Ae = _[0], _[1] >= l / 2 && ++Ae;\n                do d = 0, u = r(_, b, H, O), u < 0 ? (me = b[0], H != O && (me = me * l + (b[1] || 0)), d = me / Ae | 0, d > 1 ? (d >= l && (d = l - 1), h = e(_, d, l), I = h.length, O = b.length, u = r(h, b, I, O), u == 1 && (d--, t(h, H < I ? fr : _, I, l))) : (d == 0 && (u = d = 1), h = _.slice()), I = h.length, I < O && h.unshift(0), t(b, h, O, l), u == -1 && (O = b.length, u = r(_, b, H, O), u < 1 && (d++, t(b, H < O ? fr : _, O, l))), O = b.length) : u === 0 && (d++, b = [\n                    0\n                ]), S[p++] = d, u && b[0] ? b[O++] = K[V] || 0 : (b = [\n                    K[V]\n                ], O = 1);\n                while ((V++ < te || b[0] !== void 0) && ae--);\n                g = b[0] !== void 0;\n            }\n            S[0] || S.shift();\n        }\n        if (f == 1) P.e = c, qs = g;\n        else {\n            for(p = 1, d = S[0]; d >= 10; d /= 10)p++;\n            P.e = p + c * f - 1, y(P, a ? o + P.e + 1 : o, s, g);\n        }\n        return P;\n    };\n}();\nfunction y(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (r != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = r - i, o < 0) o += E, s = r, c = p[d = 0], l = c / U(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / E), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= E, s = o - E + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= E, s = o - E + i, l = s < 0 ? 0 : c / U(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || r < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % U(10, i - s - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && (o > 0 ? s > 0 ? c / U(10, i - s) : 0 : p[d - 1]) % 10 & 1 || t == (e.s < 0 ? 8 : 7)), r < 1 || !p[0]) return p.length = 0, u ? (r -= e.e + 1, p[0] = U(10, (E - r % E) % E), e.e = -r || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = U(10, E - o), p[d] = s > 0 ? (c / U(10, i - s) % U(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == fe && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != fe) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return w && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction xe(e, r, t) {\n    if (!e.isFinite()) return Js(e);\n    var n, i = e.e, o = J(e.d), s = o.length;\n    return r ? (t && (n = t - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + We(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + We(-i - 1) + o, t && (n = t - s) > 0 && (o += We(n))) : i >= s ? (o += We(i + 1 - s), t && (n = t - i - 1) > 0 && (o = o + \".\" + We(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), t && (n = t - s) > 0 && (i + 1 === s && (o += \".\"), o += We(n))), o;\n}\nfunction mn(e, r) {\n    var t = e[0];\n    for(r *= E; t >= 10; t /= 10)r++;\n    return r;\n}\nfunction pn(e, r, t) {\n    if (r > xp) throw w = !0, t && (e.precision = t), Error(js);\n    return y(new e(un), r, 1, !0);\n}\nfunction we(e, r, t) {\n    if (r > Vi) throw Error(js);\n    return y(new e(cn), r, t, !0);\n}\nfunction Qs(e) {\n    var r = e.length - 1, t = r * E + 1;\n    if (r = e[r], r) {\n        for(; r % 10 == 0; r /= 10)t--;\n        for(r = e[0]; r >= 10; r /= 10)t++;\n    }\n    return t;\n}\nfunction We(e) {\n    for(var r = \"\"; e--;)r += \"0\";\n    return r;\n}\nfunction Gs(e, r, t, n) {\n    var i, o = new e(1), s = Math.ceil(n / E + 4);\n    for(w = !1;;){\n        if (t % 2 && (o = o.times(r), Ms(o.d, s) && (i = !0)), t = X(t / 2), t === 0) {\n            t = o.d.length - 1, i && o.d[t] === 0 && ++o.d[t];\n            break;\n        }\n        r = r.times(r), Ms(r.d, s);\n    }\n    return w = !0, o;\n}\nfunction Ls(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction Ws(e, r, t) {\n    for(var n, i, o = new e(r[0]), s = 0; ++s < r.length;){\n        if (i = new e(r[s]), !i.s) {\n            o = i;\n            break;\n        }\n        n = o.cmp(i), (n === t || n === 0 && o.s === t) && (o = i);\n    }\n    return o;\n}\nfunction Bi(e, r) {\n    var t, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, g = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(r == null ? (w = !1, l = g) : l = r, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(U(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, t = o = s = new d(1), d.precision = l;;){\n        if (o = y(o.times(e), l, 1), t = t.times(++c), a = s.plus(F(o, t, l, 1)), J(a.d).slice(0, l) === J(s.d).slice(0, l)) {\n            for(i = p; i--;)s = y(s.times(s), l, 1);\n            if (r == null) if (u < 3 && st(s.d, l - n, f, u)) d.precision = l += 10, t = o = a = new d(1), c = 0, u++;\n            else return y(s, d.precision = g, f, w = !0);\n            else return d.precision = g, s;\n        }\n        s = a;\n    }\n}\nfunction Je(e, r) {\n    var t, n, i, o, s, a, l, u, c, p, d, f = 1, g = 10, h = e, I = h.d, P = h.constructor, S = P.rounding, b = P.precision;\n    if (h.s < 0 || !I || !I[0] || !h.e && I[0] == 1 && I.length == 1) return new P(I && !I[0] ? -1 / 0 : h.s != 1 ? NaN : I ? 0 : h);\n    if (r == null ? (w = !1, c = b) : c = r, P.precision = c += g, t = J(I), n = t.charAt(0), Math.abs(o = h.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3;)h = h.times(e), t = J(h.d), n = t.charAt(0), f++;\n        o = h.e, n > 1 ? (h = new P(\"0.\" + t), o++) : h = new P(n + \".\" + t.slice(1));\n    } else return u = pn(P, c + 2, b).times(o + \"\"), h = Je(new P(n + \".\" + t.slice(1)), c - g).plus(u), P.precision = b, r == null ? y(h, b, S, w = !0) : h;\n    for(p = h, l = s = h = F(h.minus(1), h.plus(1), c, 1), d = y(h.times(h), c, 1), i = 3;;){\n        if (s = y(s.times(d), c, 1), u = l.plus(F(s, new P(i), c, 1)), J(u.d).slice(0, c) === J(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(pn(P, c + 2, b).times(o + \"\"))), l = F(l, new P(f), c, 1), r == null) if (st(l.d, c - g, S, a)) P.precision = c += g, u = s = h = F(p.minus(1), p.plus(1), c, 1), d = y(h.times(h), c, 1), i = a = 1;\n        else return y(l, P.precision = b, S, w = !0);\n        else return P.precision = b, l;\n        l = u, i += 2;\n    }\n}\nfunction Js(e) {\n    return String(e.s * e.s / 0);\n}\nfunction ln(e, r) {\n    var t, n, i;\n    for((t = r.indexOf(\".\")) > -1 && (r = r.replace(\".\", \"\")), (n = r.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +r.slice(n + 1), r = r.substring(0, n)) : t < 0 && (t = r.length), n = 0; r.charCodeAt(n) === 48; n++);\n    for(i = r.length; r.charCodeAt(i - 1) === 48; --i);\n    if (r = r.slice(n, i), r) {\n        if (i -= n, e.e = t = t - n - 1, e.d = [], n = (t + 1) % E, t < 0 && (n += E), n < i) {\n            for(n && e.d.push(+r.slice(0, n)), i -= E; n < i;)e.d.push(+r.slice(n, n += E));\n            r = r.slice(n), n = E - r.length;\n        } else n -= i;\n        for(; n--;)r += \"0\";\n        e.d.push(+r), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Pp(e, r) {\n    var t, n, i, o, s, a, l, u, c;\n    if (r.indexOf(\"_\") > -1) {\n        if (r = r.replace(/(\\d)_(?=\\d)/g, \"$1\"), Us.test(r)) return ln(e, r);\n    } else if (r === \"Infinity\" || r === \"NaN\") return +r || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (bp.test(r)) t = 16, r = r.toLowerCase();\n    else if (yp.test(r)) t = 2;\n    else if (Ep.test(r)) t = 8;\n    else throw Error(He + r);\n    for(o = r.search(/p/i), o > 0 ? (l = +r.slice(o + 1), r = r.substring(2, o)) : r = r.slice(2), o = r.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (r = r.replace(\".\", \"\"), a = r.length, o = a - o, i = Gs(n, new n(t), o, o * 2)), u = an(r, t, fe), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = mn(u, c), e.d = u, w = !1, s && (e = F(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? U(2, l) : sr.pow(2, l))), w = !0, e);\n}\nfunction Tp(e, r) {\n    var t, n = r.d.length;\n    if (n < 3) return r.isZero() ? r : Pr(e, 2, r, r);\n    t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, r = r.times(1 / fn(5, t)), r = Pr(e, 2, r, r);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); t--;)i = r.times(r), r = r.times(o.plus(i.times(s.times(i).minus(a))));\n    return r;\n}\nfunction Pr(e, r, t, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / E);\n    for(w = !1, l = t.times(t), a = new e(n);;){\n        if (s = F(a.times(l), new e(r++ * r++), c, 1), a = i ? n.plus(s) : n.minus(s), n = F(s.times(l), new e(r++ * r++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return w = !0, s.d.length = p + 1, s;\n}\nfunction fn(e, r) {\n    for(var t = e; --r;)t *= e;\n    return t;\n}\nfunction Hs(e, r) {\n    var t, n = r.s < 0, i = we(e, e.precision, 1), o = i.times(.5);\n    if (r = r.abs(), r.lte(o)) return Fe = n ? 4 : 1, r;\n    if (t = r.divToInt(i), t.isZero()) Fe = n ? 3 : 2;\n    else {\n        if (r = r.minus(t.times(i)), r.lte(o)) return Fe = Ls(t) ? n ? 2 : 3 : n ? 4 : 1, r;\n        Fe = Ls(t) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return r.minus(i).abs();\n}\nfunction Ui(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, g = t !== void 0;\n    if (g ? (ie(t, 1, Ke), n === void 0 ? n = f.rounding : ie(n, 0, 8)) : (t = f.precision, n = f.rounding), !e.isFinite()) c = Js(e);\n    else {\n        for(c = xe(e), s = c.indexOf(\".\"), g ? (i = 2, r == 16 ? t = t * 4 - 3 : r == 8 && (t = t * 3 - 2)) : i = r, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = an(xe(d), 10, i), d.e = d.d.length), p = an(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = g ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = F(e, d, t, n, 0, i), p = e.d, o = e.e, u = qs), s = p[t], a = i / 2, u = u || p[t + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[t - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = t, u) for(; ++p[--t] > i - 1;)p[t] = 0, t || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += qi.charAt(p[s]);\n            if (g) {\n                if (l > 1) if (r == 16 || r == 8) {\n                    for(s = r == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = an(c, i, r), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += qi.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (r == 16 ? \"0x\" : r == 2 ? \"0b\" : r == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction Ms(e, r) {\n    if (e.length > r) return e.length = r, !0;\n}\nfunction Sp(e) {\n    return new this(e).abs();\n}\nfunction Rp(e) {\n    return new this(e).acos();\n}\nfunction Cp(e) {\n    return new this(e).acosh();\n}\nfunction Ap(e, r) {\n    return new this(e).plus(r);\n}\nfunction Ip(e) {\n    return new this(e).asin();\n}\nfunction kp(e) {\n    return new this(e).asinh();\n}\nfunction Op(e) {\n    return new this(e).atan();\n}\nfunction Dp(e) {\n    return new this(e).atanh();\n}\nfunction _p(e, r) {\n    e = new this(e), r = new this(r);\n    var t, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !r.s ? t = new this(NaN) : !e.d && !r.d ? (t = we(this, o, 1).times(r.s > 0 ? .25 : .75), t.s = e.s) : !r.d || e.isZero() ? (t = r.s < 0 ? we(this, n, i) : new this(0), t.s = e.s) : !e.d || r.isZero() ? (t = we(this, o, 1).times(.5), t.s = e.s) : r.s < 0 ? (this.precision = o, this.rounding = 1, t = this.atan(F(e, r, o, 1)), r = we(this, o, 1), this.precision = n, this.rounding = i, t = e.s < 0 ? t.minus(r) : t.plus(r)) : t = this.atan(F(e, r, o, 1)), t;\n}\nfunction Np(e) {\n    return new this(e).cbrt();\n}\nfunction Fp(e) {\n    return y(e = new this(e), e.e + 1, 2);\n}\nfunction Lp(e, r, t) {\n    return new this(e).clamp(r, t);\n}\nfunction Mp(e) {\n    if (!e || typeof e != \"object\") throw Error(dn + \"Object expected\");\n    var r, t, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        Ke,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -vr,\n        0,\n        \"toExpPos\",\n        0,\n        vr,\n        \"maxE\",\n        0,\n        vr,\n        \"minE\",\n        -vr,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(r = 0; r < o.length; r += 3)if (t = o[r], i && (this[t] = ji[t]), (n = e[t]) !== void 0) if (X(n) === n && n >= o[r + 1] && n <= o[r + 2]) this[t] = n;\n    else throw Error(He + t + \": \" + n);\n    if (t = \"crypto\", i && (this[t] = ji[t]), (n = e[t]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[t] = !0;\n    else throw Error(Vs);\n    else this[t] = !1;\n    else throw Error(He + t + \": \" + n);\n    return this;\n}\nfunction $p(e) {\n    return new this(e).cos();\n}\nfunction qp(e) {\n    return new this(e).cosh();\n}\nfunction Ks(e) {\n    var r, t, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, $s(o)) {\n            u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            }\n            if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return ln(u, o.toString());\n        }\n        if (l === \"string\") return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Us.test(o) ? ln(u, o) : Pp(u, o);\n        if (l === \"bigint\") return o < 0 ? (o = -o, u.s = -1) : u.s = 1, ln(u, o.toString());\n        throw Error(He + o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = Mp, i.clone = Ks, i.isDecimal = $s, i.abs = Sp, i.acos = Rp, i.acosh = Cp, i.add = Ap, i.asin = Ip, i.asinh = kp, i.atan = Op, i.atanh = Dp, i.atan2 = _p, i.cbrt = Np, i.ceil = Fp, i.clamp = Lp, i.cos = $p, i.cosh = qp, i.div = jp, i.exp = Vp, i.floor = Bp, i.hypot = Up, i.ln = Qp, i.log = Gp, i.log10 = Jp, i.log2 = Wp, i.max = Hp, i.min = Kp, i.mod = Yp, i.mul = zp, i.pow = Zp, i.random = Xp, i.round = ed, i.sign = rd, i.sin = td, i.sinh = nd, i.sqrt = id, i.sub = od, i.sum = sd, i.tan = ad, i.tanh = ld, i.trunc = ud, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], r = 0; r < n.length;)e.hasOwnProperty(t = n[r++]) || (e[t] = this[t]);\n    return i.config(e), i;\n}\nfunction jp(e, r) {\n    return new this(e).div(r);\n}\nfunction Vp(e) {\n    return new this(e).exp();\n}\nfunction Bp(e) {\n    return y(e = new this(e), e.e + 1, 3);\n}\nfunction Up() {\n    var e, r, t = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (r = new this(arguments[e++]), r.d) t.d && (t = t.plus(r.times(r)));\n    else {\n        if (r.s) return w = !0, new this(1 / 0);\n        t = r;\n    }\n    return w = !0, t.sqrt();\n}\nfunction $s(e) {\n    return e instanceof sr || e && e.toStringTag === Bs || !1;\n}\nfunction Qp(e) {\n    return new this(e).ln();\n}\nfunction Gp(e, r) {\n    return new this(e).log(r);\n}\nfunction Wp(e) {\n    return new this(e).log(2);\n}\nfunction Jp(e) {\n    return new this(e).log(10);\n}\nfunction Hp() {\n    return Ws(this, arguments, -1);\n}\nfunction Kp() {\n    return Ws(this, arguments, 1);\n}\nfunction Yp(e, r) {\n    return new this(e).mod(r);\n}\nfunction zp(e, r) {\n    return new this(e).mul(r);\n}\nfunction Zp(e, r) {\n    return new this(e).pow(r);\n}\nfunction Xp(e) {\n    var r, t, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ie(e, 1, Ke), n = Math.ceil(e / E), this.crypto) if (crypto.getRandomValues) for(r = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = r[o], i >= 429e7 ? r[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(r = crypto.randomBytes(n *= 4); o < n;)i = r[o] + (r[o + 1] << 8) + (r[o + 2] << 16) + ((r[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(r, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(Vs);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= E, n && e && (i = U(10, E - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) t = 0, a = [\n        0\n    ];\n    else {\n        for(t = -1; a[0] === 0; t -= E)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < E && (t -= E - n);\n    }\n    return s.e = t, s.d = a, s;\n}\nfunction ed(e) {\n    return y(e = new this(e), e.e + 1, this.rounding);\n}\nfunction rd(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction td(e) {\n    return new this(e).sin();\n}\nfunction nd(e) {\n    return new this(e).sinh();\n}\nfunction id(e) {\n    return new this(e).sqrt();\n}\nfunction od(e, r) {\n    return new this(e).sub(r);\n}\nfunction sd() {\n    var e = 0, r = arguments, t = new this(r[e]);\n    for(w = !1; t.s && ++e < r.length;)t = t.plus(r[e]);\n    return w = !0, y(t, this.precision, this.rounding);\n}\nfunction ad(e) {\n    return new this(e).tan();\n}\nfunction ld(e) {\n    return new this(e).tanh();\n}\nfunction ud(e) {\n    return y(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar sr = m.constructor = Ks(ji);\nun = new sr(un);\ncn = new sr(cn);\nvar ve = sr;\nfunction Tr(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(Tr) : typeof e == \"object\" ? cd(e) ? pd(e) : xr(e, Tr) : e;\n}\nfunction cd(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction pd({ $type: e, value: r }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(r);\n        case \"Bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"DateTime\":\n            return new Date(r);\n        case \"Decimal\":\n            return new ve(r);\n        case \"Json\":\n            return JSON.parse(r);\n        default:\n            _e(r, \"Unknown tagged value\");\n    }\n}\nvar Pe = class {\n    get(r) {\n        return this._map.get(r)?.value;\n    }\n    set(r, t) {\n        this._map.set(r, {\n            value: t\n        });\n    }\n    getOrCreate(r, t) {\n        let n = this._map.get(r);\n        if (n) return n.value;\n        let i = t();\n        return this.set(r, i), i;\n    }\n    constructor(){\n        this._map = new Map;\n    }\n};\nfunction Ye(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction Ys(e, r) {\n    let t = {};\n    for (let n of e){\n        let i = n[r];\n        t[i] = n;\n    }\n    return t;\n}\nfunction at(e) {\n    let r;\n    return {\n        get () {\n            return r || (r = {\n                value: e()\n            }), r.value;\n        }\n    };\n}\nfunction zs(e) {\n    return {\n        models: Qi(e.models),\n        enums: Qi(e.enums),\n        types: Qi(e.types)\n    };\n}\nfunction Qi(e) {\n    let r = {};\n    for (let { name: t, ...n } of e)r[t] = n;\n    return r;\n}\nfunction Sr(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction gn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nfunction Rr(e) {\n    return sr.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar lt = {};\ntr(lt, {\n    ModelAction: ()=>Cr,\n    datamodelEnumToSchemaEnum: ()=>dd\n});\nfunction dd(e) {\n    return {\n        name: e.name,\n        values: e.values.map((r)=>r.name)\n    };\n}\nvar Cr = ((b)=>(b.findUnique = \"findUnique\", b.findUniqueOrThrow = \"findUniqueOrThrow\", b.findFirst = \"findFirst\", b.findFirstOrThrow = \"findFirstOrThrow\", b.findMany = \"findMany\", b.create = \"create\", b.createMany = \"createMany\", b.createManyAndReturn = \"createManyAndReturn\", b.update = \"update\", b.updateMany = \"updateMany\", b.updateManyAndReturn = \"updateManyAndReturn\", b.upsert = \"upsert\", b.delete = \"delete\", b.deleteMany = \"deleteMany\", b.groupBy = \"groupBy\", b.count = \"count\", b.aggregate = \"aggregate\", b.findRaw = \"findRaw\", b.aggregateRaw = \"aggregateRaw\", b))(Cr || {});\nvar ta = k(Ri());\nvar ra = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar Zs = {\n    keyword: Oe,\n    entity: Oe,\n    value: (e)=>W(nr(e)),\n    punctuation: nr,\n    directive: Oe,\n    function: Oe,\n    variable: (e)=>W(nr(e)),\n    string: (e)=>W(qe(e)),\n    boolean: ke,\n    number: Oe,\n    comment: Hr\n};\nvar md = (e)=>e, hn = {}, fd = 0, v = {\n    manual: hn.Prism && hn.Prism.manual,\n    disableWorkerMessageHandler: hn.Prism && hn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof ge) {\n                let r = e;\n                return new ge(r.type, v.util.encode(r.content), r.alias);\n            } else return Array.isArray(e) ? e.map(v.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++fd\n            }), e.__id;\n        },\n        clone: function e(r, t) {\n            let n, i, o = v.util.type(r);\n            switch(t = t || {}, o){\n                case \"Object\":\n                    if (i = v.util.objId(r), t[i]) return t[i];\n                    n = {}, t[i] = n;\n                    for(let s in r)r.hasOwnProperty(s) && (n[s] = e(r[s], t));\n                    return n;\n                case \"Array\":\n                    return i = v.util.objId(r), t[i] ? t[i] : (n = [], t[i] = n, r.forEach(function(s, a) {\n                        n[a] = e(s, t);\n                    }), n);\n                default:\n                    return r;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, r) {\n            let t = v.util.clone(v.languages[e]);\n            for(let n in r)t[n] = r[n];\n            return t;\n        },\n        insertBefore: function(e, r, t, n) {\n            n = n || v.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == r) for(let l in t)t.hasOwnProperty(l) && (o[l] = t[l]);\n                t.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, v.languages.DFS(v.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(r, t, n, i) {\n            i = i || {};\n            let o = v.util.objId;\n            for(let s in r)if (r.hasOwnProperty(s)) {\n                t.call(r, s, r[s], n || s);\n                let a = r[s], l = v.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, t, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, t, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, r, t) {\n        let n = {\n            code: e,\n            grammar: r,\n            language: t\n        };\n        return v.hooks.run(\"before-tokenize\", n), n.tokens = v.tokenize(n.code, n.grammar), v.hooks.run(\"after-tokenize\", n), ge.stringify(v.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, r, t, n, i, o, s) {\n        for(let h in t){\n            if (!t.hasOwnProperty(h) || !t[h]) continue;\n            if (h == s) return;\n            let I = t[h];\n            I = v.util.type(I) === \"Array\" ? I : [\n                I\n            ];\n            for(let P = 0; P < I.length; ++P){\n                let S = I[P], b = S.inside, O = !!S.lookbehind, me = !!S.greedy, ae = 0, Jr = S.alias;\n                if (me && !S.pattern.global) {\n                    let V = S.pattern.toString().match(/[imuy]*$/)[0];\n                    S.pattern = RegExp(S.pattern.source, V + \"g\");\n                }\n                S = S.pattern || S;\n                for(let V = n, te = i; V < r.length; te += r[V].length, ++V){\n                    let Ae = r[V];\n                    if (r.length > e.length) return;\n                    if (Ae instanceof ge) continue;\n                    if (me && V != r.length - 1) {\n                        S.lastIndex = te;\n                        var p = S.exec(e);\n                        if (!p) break;\n                        var c = p.index + (O ? p[1].length : 0), d = p.index + p[0].length, a = V, l = te;\n                        for(let _ = r.length; a < _ && (l < d || !r[a].type && !r[a - 1].greedy); ++a)l += r[a].length, c >= l && (++V, te = l);\n                        if (r[V] instanceof ge) continue;\n                        u = a - V, Ae = e.slice(te, l), p.index -= te;\n                    } else {\n                        S.lastIndex = 0;\n                        var p = S.exec(Ae), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    O && (ae = p[1] ? p[1].length : 0);\n                    var c = p.index + ae, p = p[0].slice(ae), d = c + p.length, f = Ae.slice(0, c), g = Ae.slice(d);\n                    let H = [\n                        V,\n                        u\n                    ];\n                    f && (++V, te += f.length, H.push(f));\n                    let fr = new ge(h, b ? v.tokenize(p, b) : p, Jr, p, me);\n                    if (H.push(fr), g && H.push(g), Array.prototype.splice.apply(r, H), u != 1 && v.matchGrammar(e, r, t, V, te, !0, h), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, r) {\n        let t = [\n            e\n        ], n = r.rest;\n        if (n) {\n            for(let i in n)r[i] = n[i];\n            delete r.rest;\n        }\n        return v.matchGrammar(e, t, r, 0, 0, !1), t;\n    },\n    hooks: {\n        all: {},\n        add: function(e, r) {\n            let t = v.hooks.all;\n            t[e] = t[e] || [], t[e].push(r);\n        },\n        run: function(e, r) {\n            let t = v.hooks.all[e];\n            if (!(!t || !t.length)) for(var n = 0, i; i = t[n++];)i(r);\n        }\n    },\n    Token: ge\n};\nv.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nv.languages.javascript = v.languages.extend(\"clike\", {\n    \"class-name\": [\n        v.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nv.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nv.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nv.languages.markup && v.languages.markup.tag.addInlined(\"script\", \"javascript\");\nv.languages.js = v.languages.javascript;\nv.languages.typescript = v.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nv.languages.ts = v.languages.typescript;\nfunction ge(e, r, t, n, i) {\n    this.type = e, this.content = r, this.alias = t, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nge.stringify = function(e, r) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(t) {\n        return ge.stringify(t, r);\n    }).join(\"\") : gd(e.type)(e.content);\n};\nfunction gd(e) {\n    return Zs[e] || md;\n}\nfunction Xs(e) {\n    return hd(e, v.languages.javascript);\n}\nfunction hd(e, r) {\n    return v.tokenize(e, r).map((n)=>ge.stringify(n)).join(\"\");\n}\nfunction ea(e) {\n    return Ti(e);\n}\nvar yn = class e {\n    static read(r) {\n        let t;\n        try {\n            t = ra.default.readFileSync(r, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(t);\n    }\n    static fromContent(r) {\n        let t = r.split(/\\r?\\n/);\n        return new e(1, t);\n    }\n    constructor(r, t){\n        this.firstLineNumber = r, this.lines = t;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(r, t) {\n        if (r < this.firstLineNumber || r > this.lines.length + this.firstLineNumber) return this;\n        let n = r - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = t(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(r) {\n        return new e(this.firstLineNumber, this.lines.map((t, n)=>r(t, this.firstLineNumber + n)));\n    }\n    lineAt(r) {\n        return this.lines[r - this.firstLineNumber];\n    }\n    prependSymbolAt(r, t) {\n        return this.mapLines((n, i)=>i === r ? `${t} ${n}` : `  ${n}`);\n    }\n    slice(r, t) {\n        let n = this.lines.slice(r - 1, t).join(`\n`);\n        return new e(r, ea(n).split(`\n`));\n    }\n    highlight() {\n        let r = Xs(this.toString());\n        return new e(this.firstLineNumber, r.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar yd = {\n    red: ce,\n    gray: Hr,\n    dim: Ie,\n    bold: W,\n    underline: Y,\n    highlightSource: (e)=>e.highlight()\n}, bd = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Ed({ message: e, originalMethod: r, isPanic: t, callArguments: n }) {\n    return {\n        functionName: `prisma.${r}()`,\n        message: e,\n        isPanic: t ?? !1,\n        callArguments: n\n    };\n}\nfunction wd({ callsite: e, message: r, originalMethod: t, isPanic: n, callArguments: i }, o) {\n    let s = Ed({\n        message: r,\n        originalMethod: t,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = yn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = vd(c), d = xd(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (g)=>g.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((g, h)=>o.gray(String(h).padStart(f)) + \" \" + g).mapLines((g)=>o.dim(g)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"→\"))), i) {\n            let g = p + f + 1;\n            g += 2, s.callArguments = (0, ta.default)(i, g).slice(g);\n        }\n    }\n    return s;\n}\nfunction xd(e) {\n    let r = Object.keys(Cr).join(\"|\"), n = new RegExp(String.raw`\\.(${r})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction vd(e) {\n    let r = 0;\n    for(let t = 0; t < e.length; t++){\n        if (e.charAt(t) !== \" \") return r;\n        r++;\n    }\n    return r;\n}\nfunction Pd({ functionName: e, location: r, message: t, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = r ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), r && a.push(s.underline(Td(r))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(t), a.join(`\n`);\n}\nfunction Td(e) {\n    let r = [\n        e.fileName\n    ];\n    return e.lineNumber && r.push(String(e.lineNumber)), e.columnNumber && r.push(String(e.columnNumber)), r.join(\":\");\n}\nfunction bn(e) {\n    let r = e.showColors ? yd : bd, t;\n    return t = wd(e, r), Pd(t, r);\n}\nvar pa = k(Gi());\nfunction sa(e, r, t) {\n    let n = aa(e), i = Sd(n), o = Cd(i);\n    o ? En(o, r, t) : r.addErrorMessage(()=>\"Unknown error\");\n}\nfunction aa(e) {\n    return e.errors.flatMap((r)=>r.kind === \"Union\" ? aa(r) : [\n            r\n        ]);\n}\nfunction Sd(e) {\n    let r = new Map, t = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            t.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = r.get(i);\n        o ? r.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Rd(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : r.set(i, n);\n    }\n    return t.push(...r.values()), t;\n}\nfunction Rd(e, r) {\n    return [\n        ...new Set(e.concat(r))\n    ];\n}\nfunction Cd(e) {\n    return $i(e, (r, t)=>{\n        let n = ia(r), i = ia(t);\n        return n !== i ? n - i : oa(r) - oa(t);\n    });\n}\nfunction ia(e) {\n    let r = 0;\n    return Array.isArray(e.selectionPath) && (r += e.selectionPath.length), Array.isArray(e.argumentPath) && (r += e.argumentPath.length), r;\n}\nfunction oa(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(r, t){\n        this.isRequired = !1;\n        this.name = r;\n        this.value = t;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.addMarginSymbol(t(this.isRequired ? \"+\" : \"?\")), r.write(t(this.name)), this.isRequired || r.write(t(\"?\")), r.write(t(\": \")), typeof this.value == \"string\" ? r.write(t(this.value)) : r.write(this.value);\n    }\n};\nua();\nvar Ar = class {\n    constructor(r = 0, t){\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.context = t;\n        this.currentIndent = r;\n    }\n    write(r) {\n        return typeof r == \"string\" ? this.currentLine += r : r.write(this), this;\n    }\n    writeJoined(r, t, n = (i, o)=>o.write(i)) {\n        let i = t.length - 1;\n        for(let o = 0; o < t.length; o++)n(t[o], this), o !== i && this.write(r);\n        return this;\n    }\n    writeLine(r) {\n        return this.write(r).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let r = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, r?.(), this;\n    }\n    withIndent(r) {\n        return this.indent(), r(this), this.unindent(), this;\n    }\n    afterNextNewline(r) {\n        return this.afterNextNewLineCallback = r, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(r) {\n        return this.marginSymbol = r, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let r = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + r.slice(1) : r;\n    }\n};\nla();\nvar wn = class {\n    constructor(r){\n        this.value = r;\n    }\n    write(r) {\n        r.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar xn = (e)=>e, vn = {\n    bold: xn,\n    red: xn,\n    green: xn,\n    dim: xn,\n    enabled: !1\n}, ca = {\n    bold: W,\n    red: ce,\n    green: qe,\n    dim: Ie,\n    enabled: !0\n}, Ir = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Te = class {\n    constructor(r){\n        this.isUnderlined = !1;\n        this.color = (r)=>r;\n        this.contents = r;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(r) {\n        return this.color = r, this;\n    }\n    write(r) {\n        let t = r.getCurrentLineLength();\n        r.write(this.color(this.contents)), this.isUnderlined && r.afterNextNewline(()=>{\n            r.write(\" \".repeat(t)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar ze = class {\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n    constructor(){\n        this.hasError = !1;\n    }\n};\nvar kr = class extends ze {\n    addItem(r) {\n        return this.items.push(new wn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((t)=>t.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let t = new Te(\"[]\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithItems(r) {\n        let { colors: t } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(Ir, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(t.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n    constructor(...args){\n        super(...args);\n        this.items = [];\n    }\n};\nvar Or = class e extends ze {\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [t, ...n] = r, i = this.getField(t);\n        if (!i) return;\n        let o = i;\n        for (let s of n){\n            let a;\n            if (o.value instanceof e ? a = o.value.getField(s) : o.value instanceof kr && (a = o.value.getField(Number(s))), !a) return;\n            o = a;\n        }\n        return o;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let t = this;\n        for (let n of r){\n            if (!(t instanceof e)) return;\n            let i = t.getSubSelectionValue(n);\n            if (!i) return;\n            t = i;\n        }\n        return t;\n    }\n    getDeepSelectionParent(r) {\n        let t = this.getSelectionParent();\n        if (!t) return;\n        let n = t;\n        for (let i of r){\n            let o = n.value.getFieldValue(i);\n            if (!o || !(o instanceof e)) return;\n            let s = o.getSelectionParent();\n            if (!s) return;\n            n = s;\n        }\n        return n;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let t = this.getField(\"include\")?.value.asObject();\n        if (t) return {\n            kind: \"include\",\n            value: t\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((n)=>n.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let t = Object.values(this.fields);\n        if (t.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, t);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let t = new Te(\"{}\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithContents(r, t) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(Ir, [\n                ...t,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.fields = {};\n        this.suggestions = [];\n    }\n};\nvar G = class extends ze {\n    constructor(t){\n        super();\n        this.text = t;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(t) {\n        let n = new Te(this.text);\n        this.hasError && n.underline().setColor(t.context.colors.red), t.write(n);\n    }\n    asObject() {}\n};\nvar ut = class {\n    addField(r, t) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${r}: ${t}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.writeLine(t(\"{\")).withIndent(()=>{\n            r.writeJoined(Ir, this.fields).newLine();\n        }).write(t(\"}\")).addMarginSymbol(t(\"+\"));\n    }\n    constructor(){\n        this.fields = [];\n    }\n};\nfunction En(e, r, t) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            Ad(e, r);\n            break;\n        case \"IncludeOnScalar\":\n            Id(e, r);\n            break;\n        case \"EmptySelection\":\n            kd(e, r, t);\n            break;\n        case \"UnknownSelectionField\":\n            Nd(e, r);\n            break;\n        case \"InvalidSelectionValue\":\n            Fd(e, r);\n            break;\n        case \"UnknownArgument\":\n            Ld(e, r);\n            break;\n        case \"UnknownInputField\":\n            Md(e, r);\n            break;\n        case \"RequiredArgumentMissing\":\n            $d(e, r);\n            break;\n        case \"InvalidArgumentType\":\n            qd(e, r);\n            break;\n        case \"InvalidArgumentValue\":\n            jd(e, r);\n            break;\n        case \"ValueTooLarge\":\n            Vd(e, r);\n            break;\n        case \"SomeFieldsMissing\":\n            Bd(e, r);\n            break;\n        case \"TooManyFieldsGiven\":\n            Ud(e, r);\n            break;\n        case \"Union\":\n            sa(e, r, t);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction Ad(e, r) {\n    let t = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    t && (t.getField(e.firstField)?.markAsError(), t.getField(e.secondField)?.markAsError()), r.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Id(e, r) {\n    let [t, n] = ct(e.selectionPath), i = e.outputType, o = r.arguments.getDeepSelectionParent(t)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new ue(s.name, \"true\"));\n    r.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${pt(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction kd(e, r, t) {\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            Od(e, r, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            Dd(e, r);\n            return;\n        }\n    }\n    if (t?.[Ye(e.outputType.name)]) {\n        _d(e, r);\n        return;\n    }\n    r.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction Od(e, r, t) {\n    t.removeAllFields();\n    for (let n of e.outputType.fields)t.addSuggestion(new ue(n.name, \"false\"));\n    r.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Dd(e, r) {\n    let t = e.outputType, n = r.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), fa(n, t)), r.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} must not be empty. ${pt(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction _d(e, r) {\n    let t = new ut;\n    for (let i of e.outputType.fields)i.isRelation || t.addField(i.name, \"false\");\n    let n = new ue(\"omit\", t).makeRequired();\n    if (e.selectionPath.length === 0) r.arguments.addSuggestion(n);\n    else {\n        let [i, o] = ct(e.selectionPath), a = r.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new Or;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    r.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Nd(e, r) {\n    let t = ga(e.selectionPath, r);\n    if (t.parentKind !== \"unknown\") {\n        t.field.markAsError();\n        let n = t.parent;\n        switch(t.parentKind){\n            case \"select\":\n                fa(n, e.outputType);\n                break;\n            case \"include\":\n                Qd(n, e.outputType);\n                break;\n            case \"omit\":\n                Gd(n, e.outputType);\n                break;\n        }\n    }\n    r.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${t.fieldName}\\``)}`\n        ];\n        return t.parentKind !== \"unknown\" && i.push(`for ${n.bold(t.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(pt(n)), i.join(\" \");\n    });\n}\nfunction Fd(e, r) {\n    let t = ga(e.selectionPath, r);\n    t.parentKind !== \"unknown\" && t.field.value.markAsError(), r.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(t.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction Ld(e, r) {\n    let t = e.argumentPath[0], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(t)?.markAsError(), Wd(n, e.arguments)), r.addErrorMessage((i)=>da(i, t, e.arguments.map((o)=>o.name)));\n}\nfunction Md(e, r) {\n    let [t, n] = ct(e.argumentPath), i = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(t)?.asObject();\n        o && ha(o, e.inputType);\n    }\n    r.addErrorMessage((o)=>da(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction da(e, r, t) {\n    let n = [\n        `Unknown argument \\`${e.red(r)}\\`.`\n    ], i = Hd(r, t);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), t.length > 0 && n.push(pt(e)), n.join(\" \");\n}\nfunction $d(e, r) {\n    let t;\n    r.addErrorMessage((l)=>t?.value instanceof G && t.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = ct(e.argumentPath), s = new ut, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) if (t = a.getField(o), t && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n        for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n        a.addSuggestion(new ue(o, s).makeRequired());\n    } else {\n        let l = e.inputTypes.map(ma).join(\" | \");\n        a.addSuggestion(new ue(o, l).makeRequired());\n    }\n}\nfunction ma(e) {\n    return e.kind === \"list\" ? `${ma(e.elementType)}[]` : e.name;\n}\nfunction qd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = Pn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(t)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction jd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(t)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = Pn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Vd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof G && (i = s.text);\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(t)}\\``), s.join(\" \");\n    });\n}\nfunction Bd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && ha(i, e.inputType);\n    }\n    r.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(t)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${Pn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(pt(i)), o.join(\" \");\n    });\n}\nfunction Ud(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(t)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${Pn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction fa(e, r) {\n    for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Qd(e, r) {\n    for (let t of r.fields)t.isRelation && !e.hasField(t.name) && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Gd(e, r) {\n    for (let t of r.fields)!e.hasField(t.name) && !t.isRelation && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Wd(e, r) {\n    for (let t of r)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction ga(e, r) {\n    let [t, n] = ct(e), i = r.arguments.getDeepSubSelectionValue(t)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction ha(e, r) {\n    if (r.kind === \"object\") for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction ct(e) {\n    let r = [\n        ...e\n    ], t = r.pop();\n    if (!t) throw new Error(\"unexpected empty path\");\n    return [\n        r,\n        t\n    ];\n}\nfunction pt({ green: e, enabled: r }) {\n    return \"Available options are \" + (r ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction Pn(e, r) {\n    if (r.length === 1) return r[0];\n    let t = [\n        ...r\n    ], n = t.pop();\n    return `${t.join(\", \")} ${e} ${n}`;\n}\nvar Jd = 3;\nfunction Hd(e, r) {\n    let t = 1 / 0, n;\n    for (let i of r){\n        let o = (0, pa.default)(e, i);\n        o > Jd || o < t && (t = o, n = i);\n    }\n    return n;\n}\nvar dt = class {\n    constructor(r, t, n, i, o){\n        this.modelName = r, this.name = t, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let r = this.isList ? \"List\" : \"\", t = this.isEnum ? \"Enum\" : \"\";\n        return `${r}${t}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction Dr(e) {\n    return e instanceof dt;\n}\nvar Tn = Symbol(), Ji = new WeakMap, Le = class {\n    constructor(r){\n        r === Tn ? Ji.set(this, `Prisma.${this._getName()}`) : Ji.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Ji.get(this);\n    }\n}, mt = class extends Le {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, ft = class extends mt {\n    #e;\n};\nHi(ft, \"DbNull\");\nvar gt = class extends mt {\n    #e;\n};\nHi(gt, \"JsonNull\");\nvar ht = class extends mt {\n    #e;\n};\nHi(ht, \"AnyNull\");\nvar Sn = {\n    classes: {\n        DbNull: ft,\n        JsonNull: gt,\n        AnyNull: ht\n    },\n    instances: {\n        DbNull: new ft(Tn),\n        JsonNull: new gt(Tn),\n        AnyNull: new ht(Tn)\n    }\n};\nfunction Hi(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar ya = \": \", Rn = class {\n    constructor(r, t){\n        this.hasError = !1;\n        this.name = r;\n        this.value = t;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + ya.length;\n    }\n    write(r) {\n        let t = new Te(this.name);\n        this.hasError && t.underline().setColor(r.context.colors.red), r.write(t).write(ya).write(this.value);\n    }\n};\nvar Ki = class {\n    constructor(r){\n        this.errorMessages = [];\n        this.arguments = r;\n    }\n    write(r) {\n        r.write(this.arguments);\n    }\n    addErrorMessage(r) {\n        this.errorMessages.push(r);\n    }\n    renderAllMessages(r) {\n        return this.errorMessages.map((t)=>t(r)).join(`\n`);\n    }\n};\nfunction _r(e) {\n    return new Ki(ba(e));\n}\nfunction ba(e) {\n    let r = new Or;\n    for (let [t, n] of Object.entries(e)){\n        let i = new Rn(t, Ea(n));\n        r.addField(i);\n    }\n    return r;\n}\nfunction Ea(e) {\n    if (typeof e == \"string\") return new G(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new G(String(e));\n    if (typeof e == \"bigint\") return new G(`${e}n`);\n    if (e === null) return new G(\"null\");\n    if (e === void 0) return new G(\"undefined\");\n    if (Rr(e)) return new G(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new G(`Buffer.alloc(${e.byteLength})`) : new G(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let r = gn(e) ? e.toISOString() : \"Invalid Date\";\n        return new G(`new Date(\"${r}\")`);\n    }\n    return e instanceof Le ? new G(`Prisma.${e._getName()}`) : Dr(e) ? new G(`prisma.${Ye(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? Kd(e) : typeof e == \"object\" ? ba(e) : new G(Object.prototype.toString.call(e));\n}\nfunction Kd(e) {\n    let r = new kr;\n    for (let t of e)r.addItem(Ea(t));\n    return r;\n}\nfunction Cn(e, r) {\n    let t = r === \"pretty\" ? ca : vn, n = e.renderAllMessages(t), i = new Ar(0, {\n        colors: t\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction An({ args: e, errors: r, errorFormat: t, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = _r(e);\n    for (let p of r)En(p, a, s);\n    let { message: l, args: u } = Cn(a, t), c = bn({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: t === \"pretty\",\n        callArguments: u\n    });\n    throw new Z(c, {\n        clientVersion: o\n    });\n}\nfunction Se(e) {\n    return e.replace(/^./, (r)=>r.toLowerCase());\n}\nfunction xa(e, r, t) {\n    let n = Se(t);\n    return !r.result || !(r.result.$allModels || r.result[n]) ? e : Yd({\n        ...e,\n        ...wa(r.name, e, r.result.$allModels),\n        ...wa(r.name, e, r.result[n])\n    });\n}\nfunction Yd(e) {\n    let r = new Pe, t = (n, i)=>r.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>t(o, i)) : [\n                n\n            ]));\n    return xr(e, (n)=>({\n            ...n,\n            needs: t(n.name, new Set)\n        }));\n}\nfunction wa(e, r, t) {\n    return t ? xr(t, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: zd(r, o, i)\n        })) : {};\n}\nfunction zd(e, r, t) {\n    let n = e?.[r]?.compute;\n    return n ? (i)=>t({\n            ...i,\n            [r]: n(i)\n        }) : t;\n}\nfunction va(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (e[n.name]) for (let i of n.needs)t[i] = !0;\n    return t;\n}\nfunction Pa(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (!e[n.name]) for (let i of n.needs)delete t[i];\n    return t;\n}\nvar In = class {\n    constructor(r, t){\n        this.computedFieldsCache = new Pe;\n        this.modelExtensionsCache = new Pe;\n        this.queryCallbacksCache = new Pe;\n        this.clientExtensions = at(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = at(()=>{\n            let r = this.previous?.getAllBatchQueryCallbacks() ?? [], t = this.extension.query?.$__internalBatch;\n            return t ? r.concat(t) : r;\n        });\n        this.extension = r;\n        this.previous = t;\n    }\n    getAllComputedFields(r) {\n        return this.computedFieldsCache.getOrCreate(r, ()=>xa(this.previous?.getAllComputedFields(r), this.extension, r));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(r) {\n        return this.modelExtensionsCache.getOrCreate(r, ()=>{\n            let t = Se(r);\n            return !this.extension.model || !(this.extension.model[t] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(r) : {\n                ...this.previous?.getAllModelExtensions(r),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[t]\n            };\n        });\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.queryCallbacksCache.getOrCreate(`${r}:${t}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(r, t) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[r] || o.$allModels || o[t] || o.$allOperations) ? n : (o[r] !== void 0 && (o[r][t] !== void 0 && i.push(o[r][t]), o[r].$allOperations !== void 0 && i.push(o[r].$allOperations)), r !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[t] !== void 0 && i.push(o.$allModels[t]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[t] !== void 0 && i.push(o[t]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Nr = class e {\n    constructor(r){\n        this.head = r;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(r) {\n        return new e(new In(r));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(r) {\n        return new e(new In(r, this.head));\n    }\n    getAllComputedFields(r) {\n        return this.head?.getAllComputedFields(r);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(r) {\n        return this.head?.getAllModelExtensions(r);\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.head?.getAllQueryCallbacks(r, t) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar kn = class {\n    constructor(r){\n        this.name = r;\n    }\n};\nfunction Ta(e) {\n    return e instanceof kn;\n}\nfunction Sa(e) {\n    return new kn(e);\n}\nvar Ra = Symbol(), yt = class {\n    constructor(r){\n        if (r !== Ra) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(r) {\n        return r === void 0 ? On : r;\n    }\n}, On = new yt(Ra);\nfunction Re(e) {\n    return e instanceof yt;\n}\nvar Zd = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, Ca = \"explicitly `undefined` values are not allowed\";\nfunction Dn({ modelName: e, action: r, args: t, runtimeDataModel: n, extensions: i = Nr.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new Yi({\n        runtimeDataModel: n,\n        modelName: e,\n        action: r,\n        rootArgs: t,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: Zd[r],\n        query: bt(t, p)\n    };\n}\nfunction bt({ select: e, include: r, ...t } = {}, n) {\n    let i = t.omit;\n    return delete t.omit, {\n        arguments: Ia(t, n),\n        selection: Xd(e, r, i, n)\n    };\n}\nfunction Xd(e, r, t, n) {\n    return e ? (r ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : t && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), nm(e, n)) : em(n, r, t);\n}\nfunction em(e, r, t) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), r && rm(n, r, e), tm(n, t, e), n;\n}\nfunction rm(e, r, t) {\n    for (let [n, i] of Object.entries(r)){\n        if (Re(i)) continue;\n        let o = t.nestSelection(n);\n        if (zi(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = t.findField(n);\n        if (s && s.kind !== \"object\" && t.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: t.getSelectionPath().concat(n),\n            outputType: t.getOutputTypeDescription()\n        }), s) {\n            e[n] = bt(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = bt(i, o);\n    }\n}\nfunction tm(e, r, t) {\n    let n = t.getComputedFields(), i = {\n        ...t.getGlobalOmit(),\n        ...r\n    }, o = Pa(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Re(a)) continue;\n        zi(a, t.nestSelection(s));\n        let l = t.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction nm(e, r) {\n    let t = {}, n = r.getComputedFields(), i = va(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Re(s)) continue;\n        let a = r.nestSelection(o);\n        zi(s, a);\n        let l = r.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Re(s)) {\n                t[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? t[o] = bt({}, a) : t[o] = !0;\n                continue;\n            }\n            t[o] = bt(s, a);\n        }\n    }\n    return t;\n}\nfunction Aa(e, r) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Sr(e)) {\n        if (gn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: r.getSelectionPath(),\n            argumentPath: r.getArgumentPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (Ta(e)) return {\n        $type: \"Param\",\n        value: e.name\n    };\n    if (Dr(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return im(e, r);\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    if (om(e)) return e.values;\n    if (Rr(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof Le) {\n        if (e !== Sn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (sm(e)) return e.toJSON();\n    if (typeof e == \"object\") return Ia(e, r);\n    r.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: r.getSelectionPath(),\n        argumentPath: r.getArgumentPath(),\n        argument: {\n            name: r.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Ia(e, r) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let t = {};\n    for(let n in e){\n        let i = e[n], o = r.nestArgument(n);\n        Re(i) || (i !== void 0 ? t[n] = Aa(i, o) : r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: r.getSelectionPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: Ca\n        }));\n    }\n    return t;\n}\nfunction im(e, r) {\n    let t = [];\n    for(let n = 0; n < e.length; n++){\n        let i = r.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Re(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            r.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${r.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        t.push(Aa(o, i));\n    }\n    return t;\n}\nfunction om(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction sm(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction zi(e, r) {\n    e === void 0 && r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: r.getSelectionPath(),\n        underlyingError: Ca\n    });\n}\nvar Yi = class e {\n    constructor(r){\n        this.params = r;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(r) {\n        An({\n            errors: [\n                r\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((r)=>({\n                    name: r.name,\n                    typeName: \"boolean\",\n                    isRelation: r.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(r) {\n        return this.params.previewFeatures.includes(r);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(r) {\n        return this.modelOrType?.fields.find((t)=>t.name === r);\n    }\n    nestSelection(r) {\n        let t = this.findField(r), n = t?.kind === \"object\" ? t.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(r)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Ye(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                _e(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(r) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(r)\n        });\n    }\n};\nfunction ka(e) {\n    if (!e._hasPreviewFlag(\"metrics\")) throw new Z(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e._clientVersion\n    });\n}\nvar Fr = class {\n    constructor(r){\n        this._client = r;\n    }\n    prometheus(r) {\n        return ka(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...r\n        });\n    }\n    json(r) {\n        return ka(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...r\n        });\n    }\n};\nfunction Oa(e, r) {\n    let t = at(()=>am(r));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>t.get()\n    });\n}\nfunction am(e) {\n    return {\n        datamodel: {\n            models: Zi(e.models),\n            enums: Zi(e.enums),\n            types: Zi(e.types)\n        }\n    };\n}\nfunction Zi(e) {\n    return Object.entries(e).map(([r, t])=>({\n            name: r,\n            ...t\n        }));\n}\nvar Xi = new WeakMap, _n = \"$$PrismaTypedSql\", Et = class {\n    constructor(r, t){\n        Xi.set(this, {\n            sql: r,\n            values: t\n        }), Object.defineProperty(this, _n, {\n            value: _n\n        });\n    }\n    get sql() {\n        return Xi.get(this).sql;\n    }\n    get values() {\n        return Xi.get(this).values;\n    }\n};\nfunction Da(e) {\n    return (...r)=>new Et(e, r);\n}\nfunction Nn(e) {\n    return e != null && e[_n] === _n;\n}\nvar cu = k(Ei());\nvar pu = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"), du = __webpack_require__(/*! node:events */ \"node:events\"), mu = k(__webpack_require__(/*! node:fs */ \"node:fs\")), Zn = k(__webpack_require__(/*! node:path */ \"node:path\"));\nvar oe = class e {\n    constructor(r, t){\n        if (r.length - 1 !== t.length) throw r.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${r.length} strings to have ${r.length - 1} values`);\n        let n = t.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = r[0];\n        let i = 0, o = 0;\n        for(; i < t.length;){\n            let s = t[i++], a = r[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `?${this.strings[t++]}`;\n        return n;\n    }\n    get statement() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `:${t}${this.strings[t++]}`;\n        return n;\n    }\n    get text() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `$${t}${this.strings[t++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction _a(e, r = \",\", t = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        t,\n        ...Array(e.length - 1).fill(r),\n        n\n    ], e);\n}\nfunction eo(e) {\n    return new oe([\n        e\n    ], []);\n}\nvar Na = eo(\"\");\nfunction ro(e, ...r) {\n    return new oe(e, r);\n}\nfunction wt(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (r) {\n            return e[r];\n        }\n    };\n}\nfunction re(e, r) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return r();\n        }\n    };\n}\nfunction ar(e) {\n    let r = new Pe;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (t) {\n            return r.getOrCreate(t, ()=>e.getPropertyValue(t));\n        },\n        getPropertyDescriptor (t) {\n            return e.getPropertyDescriptor?.(t);\n        }\n    };\n}\nvar Fn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Ln(e) {\n    let r = new Set(e);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>Fn,\n        has: (t, n)=>r.has(n),\n        set: (t, n, i)=>r.add(n) && Reflect.set(t, n, i),\n        ownKeys: ()=>[\n                ...r\n            ]\n    };\n}\nvar Fa = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction he(e, r) {\n    let t = lm(r), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = t.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = t.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = La(Reflect.ownKeys(o), t), a = La(Array.from(t.keys()), t);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return t.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = t.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...Fn,\n                ...l?.getPropertyDescriptor(s)\n            } : Fn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i[Fa] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[Fa], o;\n    }, i;\n}\nfunction lm(e) {\n    let r = new Map;\n    for (let t of e){\n        let n = t.getKeys();\n        for (let i of n)r.set(i, t);\n    }\n    return r;\n}\nfunction La(e, r) {\n    return e.filter((t)=>r.get(t)?.has?.(t) ?? !0);\n}\nfunction Lr(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Mr(e, r) {\n    return {\n        batch: e,\n        transaction: r?.kind === \"batch\" ? {\n            isolationLevel: r.options.isolationLevel\n        } : void 0\n    };\n}\nfunction Ma(e) {\n    if (e === void 0) return \"\";\n    let r = _r(e);\n    return new Ar(0, {\n        colors: vn\n    }).write(r).toString();\n}\nvar um = \"P2037\";\nfunction $r({ error: e, user_facing_error: r }, t, n) {\n    return r.error_code ? new z(cm(r, n), {\n        code: r.error_code,\n        clientVersion: t,\n        meta: r.meta,\n        batchRequestIdx: r.batch_request_idx\n    }) : new j(e, {\n        clientVersion: t,\n        batchRequestIdx: r.batch_request_idx\n    });\n}\nfunction cm(e, r) {\n    let t = e.message;\n    return (r === \"postgresql\" || r === \"postgres\" || r === \"mysql\") && e.error_code === um && (t += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), t;\n}\nvar xt = \"<unknown>\";\nfunction $a(e) {\n    var r = e.split(`\n`);\n    return r.reduce(function(t, n) {\n        var i = mm(n) || gm(n) || bm(n) || vm(n) || wm(n);\n        return i && t.push(i), t;\n    }, []);\n}\nvar pm = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, dm = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction mm(e) {\n    var r = pm.exec(e);\n    if (!r) return null;\n    var t = r[2] && r[2].indexOf(\"native\") === 0, n = r[2] && r[2].indexOf(\"eval\") === 0, i = dm.exec(r[2]);\n    return n && i != null && (r[2] = i[1], r[3] = i[2], r[4] = i[3]), {\n        file: t ? null : r[2],\n        methodName: r[1] || xt,\n        arguments: t ? [\n            r[2]\n        ] : [],\n        lineNumber: r[3] ? +r[3] : null,\n        column: r[4] ? +r[4] : null\n    };\n}\nvar fm = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction gm(e) {\n    var r = fm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || xt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar hm = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, ym = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction bm(e) {\n    var r = hm.exec(e);\n    if (!r) return null;\n    var t = r[3] && r[3].indexOf(\" > eval\") > -1, n = ym.exec(r[3]);\n    return t && n != null && (r[3] = n[1], r[4] = n[2], r[5] = null), {\n        file: r[3],\n        methodName: r[1] || xt,\n        arguments: r[2] ? r[2].split(\",\") : [],\n        lineNumber: r[4] ? +r[4] : null,\n        column: r[5] ? +r[5] : null\n    };\n}\nvar Em = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction wm(e) {\n    var r = Em.exec(e);\n    return r ? {\n        file: r[3],\n        methodName: r[1] || xt,\n        arguments: [],\n        lineNumber: +r[4],\n        column: r[5] ? +r[5] : null\n    } : null;\n}\nvar xm = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction vm(e) {\n    var r = xm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || xt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar to = class {\n    getLocation() {\n        return null;\n    }\n}, no = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let r = this._error.stack;\n        if (!r) return null;\n        let n = $a(r).find((i)=>{\n            if (!i.file) return !1;\n            let o = Oi(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Ze(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new to : new no;\n}\nvar qa = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction qr(e = {}) {\n    let r = Tm(e);\n    return Object.entries(r).reduce((n, [i, o])=>(qa[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Tm(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Mn(e = {}) {\n    return (r)=>(typeof e._count == \"boolean\" && (r._count = r._count._all), r);\n}\nfunction ja(e, r) {\n    let t = Mn(e);\n    return r({\n        action: \"aggregate\",\n        unpacker: t,\n        argsMapper: qr\n    })(e);\n}\nfunction Sm(e = {}) {\n    let { select: r, ...t } = e;\n    return typeof r == \"object\" ? qr({\n        ...t,\n        _count: r\n    }) : qr({\n        ...t,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Rm(e = {}) {\n    return typeof e.select == \"object\" ? (r)=>Mn(e)(r)._count : (r)=>Mn(e)(r)._count._all;\n}\nfunction Va(e, r) {\n    return r({\n        action: \"count\",\n        unpacker: Rm(e),\n        argsMapper: Sm\n    })(e);\n}\nfunction Cm(e = {}) {\n    let r = qr(e);\n    if (Array.isArray(r.by)) for (let t of r.by)typeof t == \"string\" && (r.select[t] = !0);\n    else typeof r.by == \"string\" && (r.select[r.by] = !0);\n    return r;\n}\nfunction Am(e = {}) {\n    return (r)=>(typeof e?._count == \"boolean\" && r.forEach((t)=>{\n            t._count = t._count._all;\n        }), r);\n}\nfunction Ba(e, r) {\n    return r({\n        action: \"groupBy\",\n        unpacker: Am(e),\n        argsMapper: Cm\n    })(e);\n}\nfunction Ua(e, r, t) {\n    if (r === \"aggregate\") return (n)=>ja(n, t);\n    if (r === \"count\") return (n)=>Va(n, t);\n    if (r === \"groupBy\") return (n)=>Ba(n, t);\n}\nfunction Qa(e, r) {\n    let t = r.fields.filter((i)=>!i.relationName), n = Ys(t, \"name\");\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new dt(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...Ln(Object.keys(n))\n    });\n}\nvar Ga = (e)=>Array.isArray(e) ? e : e.split(\".\"), io = (e, r)=>Ga(r).reduce((t, n)=>t && t[n], e), Wa = (e, r, t)=>Ga(r).reduceRight((n, i, o, s)=>Object.assign({}, io(e, s.slice(0, o)), {\n            [i]: n\n        }), t);\nfunction Im(e, r) {\n    return e === void 0 || r === void 0 ? [] : [\n        ...r,\n        \"select\",\n        e\n    ];\n}\nfunction km(e, r, t) {\n    return r === void 0 ? e ?? {} : Wa(r, t, e || !0);\n}\nfunction oo(e, r, t, n, i, o) {\n    let a = e._runtimeDataModel.models[r].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Ze(e._errorFormat), c = Im(n, i), p = km(l, o, c), d = t({\n            dataPath: c,\n            callsite: u\n        })(p), f = Om(e, r);\n        return new Proxy(d, {\n            get (g, h) {\n                if (!f.includes(h)) return g[h];\n                let P = [\n                    a[h].type,\n                    t,\n                    h\n                ], S = [\n                    c,\n                    p\n                ];\n                return oo(e, ...P, ...S);\n            },\n            ...Ln([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction Om(e, r) {\n    return e._runtimeDataModel.models[r].fields.filter((t)=>t.kind === \"object\").map((t)=>t.name);\n}\nvar Dm = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], _m = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction so(e, r) {\n    let t = e._extensions.getAllModelExtensions(r) ?? {}, n = [\n        Nm(e, r),\n        Lm(e, r),\n        wt(t),\n        re(\"name\", ()=>r),\n        re(\"$name\", ()=>r),\n        re(\"$parent\", ()=>e._appliedParent)\n    ];\n    return he({}, n);\n}\nfunction Nm(e, r) {\n    let t = Se(r), n = Object.keys(Cr).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (a)=>(l)=>{\n                    let u = Ze(e._errorFormat);\n                    return e._createPrismaPromise((c)=>{\n                        let p = {\n                            args: l,\n                            dataPath: [],\n                            action: o,\n                            model: r,\n                            clientMethod: `${t}.${i}`,\n                            jsModelName: t,\n                            transaction: c,\n                            callsite: u\n                        };\n                        return e._request({\n                            ...p,\n                            ...a\n                        });\n                    }, {\n                        action: o,\n                        args: l,\n                        model: r\n                    });\n                };\n            return Dm.includes(o) ? oo(e, r, s) : Fm(i) ? Ua(e, i, s) : s({});\n        }\n    };\n}\nfunction Fm(e) {\n    return _m.includes(e);\n}\nfunction Lm(e, r) {\n    return ar(re(\"fields\", ()=>{\n        let t = e._runtimeDataModel.models[r];\n        return Qa(r, t);\n    }));\n}\nfunction Ja(e) {\n    return e.replace(/^./, (r)=>r.toUpperCase());\n}\nvar ao = Symbol();\nfunction vt(e) {\n    let r = [\n        Mm(e),\n        $m(e),\n        re(ao, ()=>e),\n        re(\"$parent\", ()=>e._appliedParent)\n    ], t = e._extensions.getAllClientExtensions();\n    return t && r.push(wt(t)), he(e, r);\n}\nfunction Mm(e) {\n    let r = Object.getPrototypeOf(e._originalClient), t = [\n        ...new Set(Object.getOwnPropertyNames(r))\n    ];\n    return {\n        getKeys () {\n            return t;\n        },\n        getPropertyValue (n) {\n            return e[n];\n        }\n    };\n}\nfunction $m(e) {\n    let r = Object.keys(e._runtimeDataModel.models), t = r.map(Se), n = [\n        ...new Set(r.concat(t))\n    ];\n    return ar({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Ja(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return so(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return so(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!t.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Ha(e) {\n    return e[ao] ? e[ao] : e;\n}\nfunction Ka(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let t = e.client.__AccelerateEngine;\n        this._originalClient._engine = new t(this._originalClient._accelerateEngineConfig);\n    }\n    let r = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return vt(r);\n}\nfunction Ya({ result: e, modelName: r, select: t, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(r);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(Lr(u));\n        } else if (t) {\n            if (!t[l.name]) continue;\n            let u = l.needs.filter((c)=>!t[c]);\n            u.length > 0 && a.push(Lr(u));\n        }\n        qm(e, l.needs) && s.push(jm(l, he(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? he(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction qm(e, r) {\n    return r.every((t)=>Mi(e, t));\n}\nfunction jm(e, r) {\n    return ar(re(e.name, ()=>e.compute(r)));\n}\nfunction $n({ visitor: e, result: r, args: t, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(r)) {\n        for(let s = 0; s < r.length; s++)r[s] = $n({\n            result: r[s],\n            args: t,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return r;\n    }\n    let o = e(r, i, t) ?? r;\n    return t.include && za({\n        includeOrSelect: t.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), t.select && za({\n        includeOrSelect: t.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction za({ includeOrSelect: e, result: r, parentModelName: t, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || r[o] == null || Re(s)) continue;\n        let l = n.models[t].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        r[o] = $n({\n            visitor: i,\n            result: r[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction Za({ result: e, modelName: r, args: t, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[r] ? e : $n({\n        result: e,\n        args: t ?? {},\n        modelName: r,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Se(l);\n            return Ya({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nvar Vm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], Xa = Vm;\nfunction el(e) {\n    if (e instanceof oe) return Bm(e);\n    if (Nn(e)) return Um(e);\n    if (Array.isArray(e)) {\n        let t = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)t[n] = Pt(e[n]);\n        return t;\n    }\n    let r = {};\n    for(let t in e)r[t] = Pt(e[t]);\n    return r;\n}\nfunction Bm(e) {\n    return new oe(e.strings, e.values);\n}\nfunction Um(e) {\n    return new Et(e.sql, e.values);\n}\nfunction Pt(e) {\n    if (typeof e != \"object\" || e == null || e instanceof Le || Dr(e)) return e;\n    if (Rr(e)) return new ve(e.toFixed());\n    if (Sr(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let r = e.length, t;\n        for(t = Array(r); r--;)t[r] = Pt(e[r]);\n        return t;\n    }\n    if (typeof e == \"object\") {\n        let r = {};\n        for(let t in e)t === \"__proto__\" ? Object.defineProperty(r, t, {\n            value: Pt(e[t]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : r[t] = Pt(e[t]);\n        return r;\n    }\n    _e(e, \"Unknown value\");\n}\nfunction tl(e, r, t, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = r.customDataProxyFetch;\n        return \"transaction\" in r && i !== void 0 && (r.transaction?.kind === \"batch\" && r.transaction.lock.then(), r.transaction = i), n === t.length ? e._executeRequest(r) : t[n]({\n            model: r.model,\n            operation: r.model ? r.action : r.clientMethod,\n            args: el(r.args ?? {}),\n            __internalParams: r,\n            query: (s, a = r)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = sl(o, l), a.args = s, tl(e, a, t, n + 1);\n            }\n        });\n    });\n}\nfunction nl(e, r) {\n    let { jsModelName: t, action: n, clientMethod: i } = r, o = t ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(r);\n    let s = e._extensions.getAllQueryCallbacks(t ?? \"$none\", o);\n    return tl(e, r, s);\n}\nfunction il(e) {\n    return (r)=>{\n        let t = {\n            requests: r\n        }, n = r[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? ol(t, n, 0, e) : e(t);\n    };\n}\nfunction ol(e, r, t, n) {\n    if (t === r.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return r[t]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = sl(i, l), ol(a, r, t + 1, n);\n        }\n    });\n}\nvar rl = (e)=>e;\nfunction sl(e = rl, r = rl) {\n    return (t)=>e(r(t));\n}\nvar al = N(\"prisma:client\"), ll = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction ul({ postinstall: e, ciName: r, clientVersion: t }) {\n    if (al(\"checkPlatformCaching:postinstall\", e), al(\"checkPlatformCaching:ciName\", r), e === !0 && r && r in ll) {\n        let n = `Prisma has detected that this project was built on ${r}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${ll[r]}-build`;\n        throw console.error(n), new T(n, t);\n    }\n}\nfunction cl(e, r) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [r[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Qm = ()=>globalThis.process?.release?.name === \"node\", Gm = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, Wm = ()=>!!globalThis.Deno, Jm = ()=>typeof globalThis.Netlify == \"object\", Hm = ()=>typeof globalThis.EdgeRuntime == \"object\", Km = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction Ym() {\n    return [\n        [\n            Jm,\n            \"netlify\"\n        ],\n        [\n            Hm,\n            \"edge-light\"\n        ],\n        [\n            Km,\n            \"workerd\"\n        ],\n        [\n            Wm,\n            \"deno\"\n        ],\n        [\n            Gm,\n            \"bun\"\n        ],\n        [\n            Qm,\n            \"node\"\n        ]\n    ].flatMap((t)=>t[0]() ? [\n            t[1]\n        ] : []).at(0) ?? \"\";\n}\nvar zm = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction qn() {\n    let e = Ym();\n    return {\n        id: e,\n        prettyName: zm[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar gl = k(__webpack_require__(/*! node:fs */ \"node:fs\")), Tt = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction jn(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Add \"${r}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Zm(e)}`;\n}\nfunction Zm(e) {\n    let { generator: r, generatorBinaryTargets: t, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...t,\n        i\n    ];\n    return Ai({\n        ...r,\n        binaryTargets: o\n    });\n}\nfunction Xe(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${r}\".`;\n}\nfunction er(e) {\n    let { searchedLocations: r } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(r)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction pl(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `${Xe(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${r}\".\n${jn(e)}\n\n${er(e)}`;\n}\nfunction Vn(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Bn(e) {\n    let { errorStack: r } = e;\n    return r?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction dl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Bn(e)}\n\nThis is likely caused by a bundler that has not copied \"${r}\" next to the resulting bundle.\nEnsure that \"${r}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${Vn(\"engine-not-found-bundler-investigation\")}\n\n${er(e)}`;\n}\nfunction ml(e) {\n    let { runtimeBinaryTarget: r, generatorBinaryTargets: t } = e, n = t.find((i)=>i.native);\n    return `${Xe(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${r}\".\n${jn(e)}\n\n${er(e)}`;\n}\nfunction fl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Bn(e)}\n\nThis is likely caused by tooling that has not copied \"${r}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${r}\" has been copied to \"${e.expectedLocation}\".\n\n${Vn(\"engine-not-found-tooling-investigation\")}\n\n${er(e)}`;\n}\nvar Xm = N(\"prisma:client:engines:resolveEnginePath\"), ef = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function hl(e, r) {\n    let t = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? r.prismaPath;\n    if (t !== void 0) return t;\n    let { enginePath: n, searchedLocations: i } = await rf(e, r);\n    if (Xm(\"enginePath\", n), n !== void 0 && e === \"binary\" && vi(n), n !== void 0) return r.prismaPath = n;\n    let o = await ir(), s = r.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(ef()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: r.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: yl(e, o),\n        expectedLocation: Tt.default.relative(process.cwd(), r.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = ml(c) : l ? p = pl(c) : u ? p = dl(c) : p = fl(c), new T(p, r.clientVersion);\n}\nasync function rf(e, r) {\n    let t = await ir(), n = [], i = [\n        r.dirname,\n        Tt.default.resolve(__dirname, \"..\"),\n        r.generator?.output?.value ?? __dirname,\n        Tt.default.resolve(__dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        r.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && i.push(fs());\n    for (let o of i){\n        let s = yl(e, t), a = Tt.default.join(o, s);\n        if (n.push(o), gl.default.existsSync(a)) return {\n            enginePath: a,\n            searchedLocations: n\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations: n\n    };\n}\nfunction yl(e, r) {\n    return e === \"library\" ? Bt(r, \"fs\") : `query-engine-${r}${r === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar lo = k(ki());\nfunction bl(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (r)=>`${r[0]}5`) : \"\";\n}\nfunction El(e) {\n    return e.split(`\n`).map((r)=>r.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar wl = k(Ns());\nfunction xl({ title: e, user: r = \"prisma\", repo: t = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, wl.default)({\n        user: r,\n        repo: t,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction vl({ version: e, binaryTarget: r, title: t, description: n, engineVersion: i, database: o, query: s }) {\n    let a = Qo(6e3 - (s?.length ?? 0)), l = El((0, lo.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, lo.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${r?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? bl(s) : \"\"}\n\\`\\`\\`\n`), p = xl({\n        title: t,\n        body: c\n    });\n    return `${t}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${Y(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction uo(e) {\n    return e.name === \"DriverAdapterError\" && typeof e.cause == \"object\";\n}\nfunction Un(e) {\n    return {\n        ok: !0,\n        value: e,\n        map (r) {\n            return Un(r(e));\n        },\n        flatMap (r) {\n            return r(e);\n        }\n    };\n}\nfunction lr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return lr(e);\n        },\n        flatMap () {\n            return lr(e);\n        }\n    };\n}\nvar Pl = N(\"driver-adapter-utils\"), co = class {\n    consumeError(r) {\n        return this.registeredErrors[r];\n    }\n    registerNewError(r) {\n        let t = 0;\n        for(; this.registeredErrors[t] !== void 0;)t++;\n        return this.registeredErrors[t] = {\n            error: r\n        }, t;\n    }\n    constructor(){\n        this.registeredErrors = [];\n    }\n};\nvar po = (e, r = new co)=>{\n    let t = {\n        adapterName: e.adapterName,\n        errorRegistry: r,\n        queryRaw: Me(r, e.queryRaw.bind(e)),\n        executeRaw: Me(r, e.executeRaw.bind(e)),\n        executeScript: Me(r, e.executeScript.bind(e)),\n        dispose: Me(r, e.dispose.bind(e)),\n        provider: e.provider,\n        startTransaction: async (...n)=>(await Me(r, e.startTransaction.bind(e))(...n)).map((o)=>tf(r, o))\n    };\n    return e.getConnectionInfo && (t.getConnectionInfo = nf(r, e.getConnectionInfo.bind(e))), t;\n}, tf = (e, r)=>({\n        adapterName: r.adapterName,\n        provider: r.provider,\n        options: r.options,\n        queryRaw: Me(e, r.queryRaw.bind(r)),\n        executeRaw: Me(e, r.executeRaw.bind(r)),\n        commit: Me(e, r.commit.bind(r)),\n        rollback: Me(e, r.rollback.bind(r))\n    });\nfunction Me(e, r) {\n    return async (...t)=>{\n        try {\n            return Un(await r(...t));\n        } catch (n) {\n            if (Pl(\"[error@wrapAsync]\", n), uo(n)) return lr(n.cause);\n            let i = e.registerNewError(n);\n            return lr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction nf(e, r) {\n    return (...t)=>{\n        try {\n            return Un(r(...t));\n        } catch (n) {\n            if (Pl(\"[error@wrapSync]\", n), uo(n)) return lr(n.cause);\n            let i = e.registerNewError(n);\n            return lr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction jr({ inlineDatasources: e, overrideDatasources: r, env: t, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = r[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = t[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new T(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new T(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar Qn = class extends Error {\n    constructor(r, t){\n        super(r), this.clientVersion = t.clientVersion, this.cause = t.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends Qn {\n    constructor(r, t){\n        super(r, t), this.isRetryable = t.isRetryable ?? !0;\n    }\n};\nfunction R(e, r) {\n    return {\n        ...e,\n        isRetryable: r\n    };\n}\nvar Vr = class extends se {\n    constructor(r){\n        super(\"This request must be retried\", R(r, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nx(Vr, \"ForcedRetryError\");\nvar ur = class extends se {\n    constructor(r, t){\n        super(r, R(t, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P6001\";\n    }\n};\nx(ur, \"InvalidDatasourceError\");\nvar cr = class extends se {\n    constructor(r, t){\n        super(r, R(t, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nx(cr, \"NotImplementedYetError\");\nvar $ = class extends se {\n    constructor(r, t){\n        super(r, t), this.response = t.response;\n        let n = this.response.headers.get(\"prisma-request-id\");\n        if (n) {\n            let i = `(The request id was: ${n})`;\n            this.message = this.message + \" \" + i;\n        }\n    }\n};\nvar pr = class extends $ {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", R(r, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nx(pr, \"SchemaMissingError\");\nvar mo = \"This request could not be understood by the server\", St = class extends $ {\n    constructor(r, t, n){\n        var _temp;\n        _temp = super(t || mo, R(r, !1)), this.name = \"BadRequestError\", this.code = \"P5000\", _temp, n && (this.code = n);\n    }\n};\nx(St, \"BadRequestError\");\nvar Rt = class extends $ {\n    constructor(r, t){\n        var _temp;\n        _temp = super(\"Engine not started: healthcheck timeout\", R(r, !0)), this.name = \"HealthcheckTimeoutError\", this.code = \"P5013\", _temp, this.logs = t;\n    }\n};\nx(Rt, \"HealthcheckTimeoutError\");\nvar Ct = class extends $ {\n    constructor(r, t, n){\n        var _temp;\n        _temp = super(t, R(r, !0)), this.name = \"EngineStartupError\", this.code = \"P5014\", _temp, this.logs = n;\n    }\n};\nx(Ct, \"EngineStartupError\");\nvar At = class extends $ {\n    constructor(r){\n        super(\"Engine version is not supported\", R(r, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nx(At, \"EngineVersionNotSupportedError\");\nvar fo = \"Request timed out\", It = class extends $ {\n    constructor(r, t = fo){\n        super(t, R(r, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nx(It, \"GatewayTimeoutError\");\nvar of = \"Interactive transaction error\", kt = class extends $ {\n    constructor(r, t = of){\n        super(t, R(r, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nx(kt, \"InteractiveTransactionError\");\nvar sf = \"Request parameters are invalid\", Ot = class extends $ {\n    constructor(r, t = sf){\n        super(t, R(r, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nx(Ot, \"InvalidRequestError\");\nvar go = \"Requested resource does not exist\", Dt = class extends $ {\n    constructor(r, t = go){\n        super(t, R(r, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nx(Dt, \"NotFoundError\");\nvar ho = \"Unknown server error\", Br = class extends $ {\n    constructor(r, t, n){\n        var _temp;\n        _temp = super(t || ho, R(r, !0)), this.name = \"ServerError\", this.code = \"P5006\", _temp, this.logs = n;\n    }\n};\nx(Br, \"ServerError\");\nvar yo = \"Unauthorized, check your connection string\", _t = class extends $ {\n    constructor(r, t = yo){\n        super(t, R(r, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nx(_t, \"UnauthorizedError\");\nvar bo = \"Usage exceeded, retry again later\", Nt = class extends $ {\n    constructor(r, t = bo){\n        super(t, R(r, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nx(Nt, \"UsageExceededError\");\nasync function af(e) {\n    let r;\n    try {\n        r = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let t = JSON.parse(r);\n        if (typeof t == \"string\") switch(t){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: t\n                };\n        }\n        if (typeof t == \"object\" && t !== null) {\n            if (\"is_panic\" in t && \"message\" in t && \"error_code\" in t) return {\n                type: \"QueryEngineError\",\n                body: t\n            };\n            if (\"EngineNotStarted\" in t || \"InteractiveTransactionMisrouted\" in t || \"InvalidRequestError\" in t) {\n                let n = Object.values(t)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: t\n                } : {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: t\n        };\n    } catch  {\n        return r === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: r\n        };\n    }\n}\nasync function Ft(e, r) {\n    if (e.ok) return;\n    let t = {\n        clientVersion: r,\n        response: e\n    }, n = await af(e);\n    if (n.type === \"QueryEngineError\") throw new z(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: r\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Br(t, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new pr(t);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new At(t);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Ct(t, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new T(i, r, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new Rt(t, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new kt(t, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new Ot(t, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new _t(t, Ur(yo, n));\n    if (e.status === 404) return new Dt(t, Ur(go, n));\n    if (e.status === 429) throw new Nt(t, Ur(bo, n));\n    if (e.status === 504) throw new It(t, Ur(fo, n));\n    if (e.status >= 500) throw new Br(t, Ur(ho, n));\n    if (e.status >= 400) throw new St(t, Ur(mo, n));\n}\nfunction Ur(e, r) {\n    return r.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(r)}`;\n}\nfunction Tl(e) {\n    let r = Math.pow(2, e) * 50, t = Math.ceil(Math.random() * r) - Math.ceil(r / 2), n = r + t;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction Sl(e) {\n    let r = new TextEncoder().encode(e), t = \"\", n = r.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = r[p] << 16 | r[p + 1] << 8 | r[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, t += $e[s] + $e[a] + $e[l] + $e[u];\n    return i == 1 ? (c = r[o], s = (c & 252) >> 2, a = (c & 3) << 4, t += $e[s] + $e[a] + \"==\") : i == 2 && (c = r[o] << 8 | r[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, t += $e[s] + $e[a] + $e[l] + \"=\"), t;\n}\nfunction Rl(e) {\n    if (!!e.generator?.previewFeatures.some((t)=>t.toLowerCase().includes(\"metrics\"))) throw new T(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nfunction lf(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction Eo(e) {\n    return new Date(lf(e));\n}\nvar Cl = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Lt = class extends se {\n    constructor(r, t){\n        super(`Cannot fetch data from service:\n${r}`, R(t, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nx(Lt, \"RequestError\");\nasync function dr(e, r, t = (n)=>n) {\n    let { clientVersion: n, ...i } = r, o = t(fetch);\n    try {\n        return await o(e, i);\n    } catch (s) {\n        let a = s.message ?? \"Unknown error\";\n        throw new Lt(a, {\n            clientVersion: n,\n            cause: s\n        });\n    }\n}\nvar cf = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, Al = N(\"prisma:client:dataproxyEngine\");\nasync function pf(e, r) {\n    let t = Cl[\"@prisma/engines-version\"], n = r.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && cf.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        if (e.startsWith(\"localhost\") || e.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s] = t.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = df(`<=${a}.${l}.${u}`), p = await dr(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        Al(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (g) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), g;\n        }\n        return f.version;\n    }\n    throw new cr(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function Il(e, r) {\n    let t = await pf(e, r);\n    return Al(\"version\", t), t;\n}\nfunction df(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar kl = 3, Gn = N(\"prisma:client:dataproxyEngine\"), wo = class {\n    constructor({ apiKey: r, tracingHelper: t, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = r, this.tracingHelper = t, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: r, interactiveTransaction: t } = {}) {\n        let n = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = r ?? this.tracingHelper.getTraceParent()), t && (n[\"X-transaction-id\"] = t.id);\n        let i = this.buildCaptureSettings();\n        return i.length > 0 && (n[\"X-capture-telemetry\"] = i.join(\", \")), n;\n    }\n    buildCaptureSettings() {\n        let r = [];\n        return this.tracingHelper.isEnabled() && r.push(\"tracing\"), this.logLevel && r.push(this.logLevel), this.logQueries && r.push(\"query\"), r;\n    }\n}, Mt = class {\n    constructor(r){\n        this.name = \"DataProxyEngine\";\n        Rl(r), this.config = r, this.env = {\n            ...r.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }, this.inlineSchema = Sl(r.inlineSchema), this.inlineDatasources = r.inlineDatasources, this.inlineSchemaHash = r.inlineSchemaHash, this.clientVersion = r.clientVersion, this.engineHash = r.engineVersion, this.logEmitter = r.logEmitter, this.tracingHelper = r.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [r, t] = this.extractHostAndApiKey();\n            this.host = r, this.headerBuilder = new wo({\n                apiKey: t,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await Il(r, this.config), Gn(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r) {\n        r?.logs?.length && r.logs.forEach((t)=>{\n            switch(t.level){\n                case \"debug\":\n                case \"trace\":\n                    Gn(t);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(t.level, {\n                            timestamp: Eo(t.timestamp),\n                            message: t.attributes.message ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: t.attributes.query ?? \"\",\n                            timestamp: Eo(t.timestamp),\n                            duration: t.attributes.duration_ms ?? 0,\n                            params: t.attributes.params ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                default:\n                    t.level;\n            }\n        }), r?.traces?.length && this.tracingHelper.dispatchEngineSpans(r.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(r) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r}`;\n    }\n    async uploadSchema() {\n        let r = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r, async ()=>{\n            let t = await dr(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            t.ok || Gn(\"schema response status\", t.status);\n            let n = await Ft(t, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(r, { traceparent: t, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: r,\n            traceparent: t,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(r, { traceparent: t, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = Mr(r, n);\n        return (await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: t\n        })).map((l)=>(l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));\n    }\n    requestInternal({ body: r, traceparent: t, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await dr(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: t,\n                        interactiveTransaction: i\n                    }),\n                    body: JSON.stringify(r),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || Gn(\"graphql response status\", a.status), await this.handleError(await Ft(a, this.clientVersion));\n                let l = await a.json();\n                if (l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l) throw this.convertProtocolErrorsToClientError(l.errors);\n                return \"batchResult\" in l ? l.batchResult : l;\n            }\n        });\n    }\n    async transaction(r, t, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[r]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (r === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await dr(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(l, this.clientVersion));\n                    let u = await l.json(), { extensions: c } = u;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, d = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: d\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${r}`;\n                    o(s);\n                    let a = await dr(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(a, this.clientVersion));\n                    let l = await a.json(), { extensions: u } = l;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let r = {\n            clientVersion: this.clientVersion\n        }, t = Object.keys(this.inlineDatasources)[0], n = jr({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i;\n        try {\n            i = new URL(n);\n        } catch  {\n            throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n        }\n        let { protocol: o, host: s, searchParams: a } = i;\n        if (o !== \"prisma:\" && o !== en) throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n        let l = a.get(\"api_key\");\n        if (l === null || l.length < 1) throw new ur(`Error validating datasource \\`${t}\\`: the URL must contain a valid API key`, r);\n        return [\n            s,\n            l\n        ];\n    }\n    metrics() {\n        throw new cr(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r) {\n        for(let t = 0;; t++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${t})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await r.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof se) || !i.isRetryable) throw i;\n                if (t >= kl) throw i instanceof Vr ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${t + 1}/${kl} failed for ${r.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await Tl(t);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(r) {\n        if (r instanceof pr) throw await this.uploadSchema(), new Vr({\n            clientVersion: this.clientVersion,\n            cause: r\n        });\n        if (r) throw r;\n    }\n    convertProtocolErrorsToClientError(r) {\n        return r.length === 1 ? $r(r[0], this.config.clientVersion, this.config.activeProvider) : new j(JSON.stringify(r), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction Ol(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar vo = k(__webpack_require__(/*! node:os */ \"node:os\")), Dl = k(__webpack_require__(/*! node:path */ \"node:path\"));\nvar xo = Symbol(\"PrismaLibraryEngineCache\");\nfunction mf() {\n    let e = globalThis;\n    return e[xo] === void 0 && (e[xo] = {}), e[xo];\n}\nfunction ff(e) {\n    let r = mf();\n    if (r[e] !== void 0) return r[e];\n    let t = Dl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = vo.default.constants.dlopen.RTLD_LAZY | vo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, t, i), r[e] = n.exports, n.exports;\n}\nvar _l = {\n    async loadLibrary (e) {\n        let r = await pi(), t = await hl(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>ff(t));\n        } catch (n) {\n            let i = Pi({\n                e: n,\n                platformInfo: r,\n                id: t\n            });\n            throw new T(i, e.clientVersion);\n        }\n    }\n};\nvar Po, Nl = {\n    async loadLibrary (e) {\n        let { clientVersion: r, adapter: t, engineWasm: n } = e;\n        if (t === void 0) throw new T(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${qn().prettyName})`, r);\n        if (n === void 0) throw new T(\"WASM engine was unexpectedly `undefined`\", r);\n        Po === void 0 && (Po = (async ()=>{\n            let o = await n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new T(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a), u = l.exports.__wbindgen_start;\n            return o.__wbg_set_wasm(l.exports), u(), o.QueryEngine;\n        })());\n        let i = await Po;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar gf = \"P2036\", Ce = N(\"prisma:client:libraryEngine\");\nfunction hf(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction yf(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar Fl = [\n    ...oi,\n    \"native\"\n], bf = 0xffffffffffffffffn, To = 1n;\nfunction Ef() {\n    let e = To++;\n    return To > bf && (To = 1n), e;\n}\nvar Qr = class {\n    constructor(r, t){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = t ?? _l, r.engineWasm !== void 0 && (this.libraryLoader = t ?? Nl), this.config = r, this.libraryStarted = !1, this.logQueries = r.logQueries ?? !1, this.logLevel = r.logLevel ?? \"error\", this.logEmitter = r.logEmitter, this.datamodel = r.inlineSchema, this.tracingHelper = r.tracingHelper, r.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(r.overrideDatasources)[0], i = r.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(r) {\n        return {\n            applyPendingMigrations: r.applyPendingMigrations?.bind(r),\n            commitTransaction: this.withRequestId(r.commitTransaction.bind(r)),\n            connect: this.withRequestId(r.connect.bind(r)),\n            disconnect: this.withRequestId(r.disconnect.bind(r)),\n            metrics: r.metrics?.bind(r),\n            query: this.withRequestId(r.query.bind(r)),\n            rollbackTransaction: this.withRequestId(r.rollbackTransaction.bind(r)),\n            sdlSchema: r.sdlSchema?.bind(r),\n            startTransaction: this.withRequestId(r.startTransaction.bind(r)),\n            trace: r.trace.bind(r)\n        };\n    }\n    withRequestId(r) {\n        return async (...t)=>{\n            let n = Ef().toString();\n            try {\n                return await r(...t, n);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i = await this.engine?.trace(n);\n                    if (i) {\n                        let o = JSON.parse(i);\n                        this.tracingHelper.dispatchEngineSpans(o.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(r, t, n) {\n        await this.start();\n        let i = await this.adapterPromise, o = JSON.stringify(t), s;\n        if (r === \"start\") {\n            let l = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            s = await this.engine?.startTransaction(l, o);\n        } else r === \"commit\" ? s = await this.engine?.commitTransaction(n.id, o) : r === \"rollback\" && (s = await this.engine?.rollbackTransaction(n.id, o));\n        let a = this.parseEngineResponse(s);\n        if (wf(a)) {\n            let l = this.getExternalAdapterError(a, i?.errorRegistry);\n            throw l ? l.error : new z(a.message, {\n                code: a.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a.meta\n            });\n        } else if (typeof a.message == \"string\") throw new j(a.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return a;\n    }\n    async instantiateLibrary() {\n        if (Ce(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        ii(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let r = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ir());\n            if (!Fl.includes(r)) throw new T(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(W(r))}. Possible binaryTargets: ${qe(Fl.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r;\n        }\n    }\n    parseEngineResponse(r) {\n        if (!r) throw new j(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r);\n        } catch  {\n            throw new j(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r = new WeakRef(this);\n                this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(po));\n                let t = await this.adapterPromise;\n                t && Ce(\"Using driver adapter: %O\", t), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n)=>{\n                    r.deref()?.logger(n);\n                }, t));\n            } catch (r) {\n                let t = r, n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(r) {\n        let t = this.parseEngineResponse(r);\n        t && (t.level = t?.level.toLowerCase() ?? \"unknown\", hf(t) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: t.query,\n            params: t.params,\n            duration: Number(t.duration_ms),\n            target: t.module_path\n        }) : yf(t) ? this.loggerRustPanic = new le(So(this, `${t.message}: ${t.reason} in ${t.file}:${t.line}:${t.column}`), this.config.clientVersion) : this.logEmitter.emit(t.level, {\n            timestamp: new Date,\n            message: t.message,\n            target: t.module_path\n        }));\n    }\n    parseInitError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    parseRequestError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r = async ()=>{\n            Ce(\"library starting\");\n            try {\n                let t = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(t)), this.libraryStarted = !0, Ce(\"library started\");\n            } catch (t) {\n                let n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", r), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryInstantiationPromise, await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ce(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let r = async ()=>{\n            await new Promise((n)=>setTimeout(n, 5)), Ce(\"library stopping\");\n            let t = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(t)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0, Ce(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", r), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r) {\n        return this.library?.debugPanic(r);\n    }\n    async request(r, { traceparent: t, interactiveTransaction: n }) {\n        Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: t\n        }), o = JSON.stringify(r);\n        try {\n            await this.start();\n            let s = await this.adapterPromise;\n            this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let a = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], s?.errorRegistry) : new j(JSON.stringify(a.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a\n            };\n        } catch (s) {\n            if (s instanceof T) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new le(So(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new j(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r, { transaction: t, traceparent: n }) {\n        Ce(\"requestBatch\");\n        let i = Mr(r, t);\n        await this.start();\n        let o = await this.adapterPromise;\n        this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), Ol(t));\n        let s = await this.executingQueryPromise, a = this.parseEngineResponse(s);\n        if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], o?.errorRegistry) : new j(JSON.stringify(a.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l, errors: u } = a;\n        if (Array.isArray(l)) return l.map((c)=>c.errors && c.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c.errors[0], o?.errorRegistry) : {\n                data: c\n            });\n        throw u && u.length === 1 ? new Error(u[0].error) : new Error(JSON.stringify(a));\n    }\n    buildQueryError(r, t) {\n        if (r.user_facing_error.is_panic) return new le(So(this, r.user_facing_error.message), this.config.clientVersion);\n        let n = this.getExternalAdapterError(r.user_facing_error, t);\n        return n ? n.error : $r(r, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(r, t) {\n        if (r.error_code === gf && t) {\n            let n = r.meta?.id;\n            rn(typeof n == \"number\", \"Malformed external JS error received from the engine\");\n            let i = t.consumeError(n);\n            return rn(i, \"External error with reported id was not registered\"), i;\n        }\n    }\n    async metrics(r) {\n        await this.start();\n        let t = await this.engine.metrics(JSON.stringify(r));\n        return r.format === \"prometheus\" ? t : this.parseEngineResponse(t);\n    }\n};\nfunction wf(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction So(e, r) {\n    return vl({\n        binaryTarget: e.binaryTarget,\n        title: r,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction Ll({ copyEngine: e = !0 }, r) {\n    let t;\n    try {\n        t = jr({\n            inlineDatasources: r.inlineDatasources,\n            overrideDatasources: r.overrideDatasources,\n            env: {\n                ...r.env,\n                ...process.env\n            },\n            clientVersion: r.clientVersion\n        });\n    } catch  {}\n    let n = !!(t?.startsWith(\"prisma://\") || Si(t));\n    e && n && ot(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let i = Er(r.generator), o = n || !e, s = !!r.adapter, a = i === \"library\", l = i === \"binary\", u = i === \"client\";\n    if (o && s || s && !1) {\n        let c;\n        throw e ? t?.startsWith(\"prisma://\") ? c = [\n            \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n            \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n        ] : c = [\n            \"Prisma Client was configured to use both the `adapter` and Accelerate, please chose one.\"\n        ] : c = [\n            \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n            \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n        ], new Z(c.join(`\n`), {\n            clientVersion: r.clientVersion\n        });\n    }\n    return o ? new Mt(r) : a ? new Qr(r) : new Qr(r);\n}\nfunction Wn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar Ml = (e)=>({\n        command: e\n    });\nvar $l = (e)=>e.strings.reduce((r, t, n)=>`${r}@P${n}${t}`);\nfunction Gr(e) {\n    try {\n        return ql(e, \"fast\");\n    } catch  {\n        return ql(e, \"slow\");\n    }\n}\nfunction ql(e, r) {\n    return JSON.stringify(e.map((t)=>Vl(t, r)));\n}\nfunction Vl(e, r) {\n    if (Array.isArray(e)) return e.map((t)=>Vl(t, r));\n    if (typeof e == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    };\n    if (Sr(e)) return {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    };\n    if (ve.isDecimal(e)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    };\n    if (Buffer.isBuffer(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    };\n    if (xf(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    return typeof e == \"object\" && r === \"slow\" ? Bl(e) : e;\n}\nfunction xf(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Bl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(jl);\n    let r = {};\n    for (let t of Object.keys(e))r[t] = jl(e[t]);\n    return r;\n}\nfunction jl(e) {\n    return typeof e == \"bigint\" ? e.toString() : Bl(e);\n}\nvar vf = /^(\\s*alter\\s)/i, Ul = N(\"prisma:client\");\nfunction Ro(e, r, t, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && t.length > 0 && vf.exec(r)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Co = ({ clientMethod: e, activeProvider: r })=>(t)=>{\n        let n = \"\", i;\n        if (Nn(t)) n = t.sql, i = {\n            values: Gr(t.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(t)) {\n            let [o, ...s] = t;\n            n = o, i = {\n                values: Gr(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(r){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = t.sql, i = {\n                        values: Gr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = t.text, i = {\n                        values: Gr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = $l(t), i = {\n                        values: Gr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${r} provider does not support ${e}`);\n        }\n        return i?.values ? Ul(`prisma.${e}(${n}, ${i.values})`) : Ul(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Ql = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [r, ...t] = e;\n        return new oe(r, t);\n    }\n}, Gl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction Ao(e) {\n    return function(t, n) {\n        let i, o = (s = e)=>{\n            try {\n                return s === void 0 || s?.kind === \"itx\" ? i ??= Wl(t(s)) : Wl(t(s));\n            } catch (a) {\n                return Promise.reject(a);\n            }\n        };\n        return {\n            get spec () {\n                return n;\n            },\n            then (s, a) {\n                return o().then(s, a);\n            },\n            catch (s) {\n                return o().catch(s);\n            },\n            finally (s) {\n                return o().finally(s);\n            },\n            requestTransaction (s) {\n                let a = o(s);\n                return a.requestTransaction ? a.requestTransaction(s) : a;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Wl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Pf = bi.split(\".\")[0], Tf = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e, r) {\n        return r();\n    }\n}, Io = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(r) {\n        return this.getGlobalTracingHelper().getTraceParent(r);\n    }\n    dispatchEngineSpans(r) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(r);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(r, t) {\n        return this.getGlobalTracingHelper().runInChildSpan(r, t);\n    }\n    getGlobalTracingHelper() {\n        let r = globalThis[`V${Pf}_PRISMA_INSTRUMENTATION`], t = globalThis.PRISMA_INSTRUMENTATION;\n        return r?.helper ?? t?.helper ?? Tf;\n    }\n};\nfunction Jl() {\n    return new Io;\n}\nfunction Hl(e, r = ()=>{}) {\n    let t, n = new Promise((i)=>t = i);\n    return {\n        then (i) {\n            return --e === 0 && t(r()), i?.(n);\n        }\n    };\n}\nfunction Kl(e) {\n    return typeof e == \"string\" ? e : e.reduce((r, t)=>{\n        let n = typeof t == \"string\" ? t : t.level;\n        return n === \"query\" ? r : r && (t === \"info\" || r === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar Jn = class {\n    use(r) {\n        this._middlewares.push(r);\n    }\n    get(r) {\n        return this._middlewares[r];\n    }\n    has(r) {\n        return !!this._middlewares[r];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n    constructor(){\n        this._middlewares = [];\n    }\n};\nvar zl = k(ki());\nfunction Hn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction Yl(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let r = [];\n    return e.modelName && r.push(e.modelName), e.query.arguments && r.push(ko(e.query.arguments)), r.push(ko(e.query.selection)), r.join(\"\");\n}\nfunction ko(e) {\n    return `(${Object.keys(e).sort().map((t)=>{\n        let n = e[t];\n        return typeof n == \"object\" && n !== null ? `(${t} ${ko(n)})` : t;\n    }).join(\" \")})`;\n}\nvar Sf = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Oo(e) {\n    return Sf[e];\n}\nvar Kn = class {\n    constructor(r){\n        this.tickActive = !1;\n        this.options = r;\n        this.batches = {};\n    }\n    request(r) {\n        let t = this.options.batchBy(r);\n        return t ? (this.batches[t] || (this.batches[t] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[t].push({\n                request: r,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(r);\n    }\n    dispatchBatches() {\n        for(let r in this.batches){\n            let t = this.batches[r];\n            delete this.batches[r], t.length === 1 ? this.options.singleLoader(t[0].request).then((n)=>{\n                n instanceof Error ? t[0].reject(n) : t[0].resolve(n);\n            }).catch((n)=>{\n                t[0].reject(n);\n            }) : (t.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(t.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < t.length; i++)t[i].reject(n);\n                else for(let i = 0; i < t.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? t[i].reject(o) : t[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < t.length; i++)t[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction mr(e, r) {\n    if (r === null) return r;\n    switch(e){\n        case \"bigint\":\n            return BigInt(r);\n        case \"bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"decimal\":\n            return new ve(r);\n        case \"datetime\":\n        case \"date\":\n            return new Date(r);\n        case \"time\":\n            return new Date(`1970-01-01T${r}Z`);\n        case \"bigint-array\":\n            return r.map((t)=>mr(\"bigint\", t));\n        case \"bytes-array\":\n            return r.map((t)=>mr(\"bytes\", t));\n        case \"decimal-array\":\n            return r.map((t)=>mr(\"decimal\", t));\n        case \"datetime-array\":\n            return r.map((t)=>mr(\"datetime\", t));\n        case \"date-array\":\n            return r.map((t)=>mr(\"date\", t));\n        case \"time-array\":\n            return r.map((t)=>mr(\"time\", t));\n        default:\n            return r;\n    }\n}\nfunction Yn(e) {\n    let r = [], t = Rf(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...t\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = mr(e.types[s], i[s]);\n        r.push(o);\n    }\n    return r;\n}\nfunction Rf(e) {\n    let r = {};\n    for(let t = 0; t < e.columns.length; t++)r[e.columns[t]] = null;\n    return r;\n}\nvar Cf = N(\"prisma:client:request_handler\"), zn = class {\n    constructor(r, t){\n        this.logEmitter = t, this.client = r, this.dataloader = new Kn({\n            batchLoader: il(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>Oo(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: Af(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? Zl(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: Oo(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : Yl(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(r) {\n        try {\n            return await this.dataloader.request(r);\n        } catch (t) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = r;\n            this.handleAndLogRequestError({\n                error: t,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: r.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: r, unpacker: t }, n) {\n        let i = n?.data, o = this.unpack(i, r, t);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o\n        } : o;\n    }\n    handleAndLogRequestError(r) {\n        try {\n            this.handleRequestError(r);\n        } catch (t) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: t.message,\n                target: r.clientMethod,\n                timestamp: new Date\n            }), t;\n        }\n    }\n    handleRequestError({ error: r, clientMethod: t, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Cf(r), If(r, i)) throw r;\n        if (r instanceof z && kf(r)) {\n            let u = Xl(r.meta);\n            An({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: t,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = r.message;\n        if (n && (l = bn({\n            callsite: n,\n            originalMethod: t,\n            isPanic: r.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), r.code) {\n            let u = s ? {\n                modelName: s,\n                ...r.meta\n            } : r.meta;\n            throw new z(l, {\n                code: r.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: r.batchRequestIdx\n            });\n        } else {\n            if (r.isPanic) throw new le(l, this.client._clientVersion);\n            if (r instanceof j) throw new j(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: r.batchRequestIdx\n            });\n            if (r instanceof T) throw new T(l, this.client._clientVersion);\n            if (r instanceof le) throw new le(l, this.client._clientVersion);\n        }\n        throw r.clientVersion = this.client._clientVersion, r;\n    }\n    sanitizeMessage(r) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, zl.default)(r) : r;\n    }\n    unpack(r, t, n) {\n        if (!r || (r.data && (r = r.data), !r)) return r;\n        let i = Object.keys(r)[0], o = Object.values(r)[0], s = t.filter((u)=>u !== \"select\" && u !== \"include\"), a = io(o, s), l = i === \"queryRaw\" ? Yn(a) : Tr(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction Af(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Zl(e)\n        };\n        _e(e, \"Unknown transaction kind\");\n    }\n}\nfunction Zl(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction If(e, r) {\n    return Hn(e) && r?.kind === \"batch\" && e.batchRequestIdx !== r.index;\n}\nfunction kf(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction Xl(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(Xl)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...r] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: r\n        };\n    }\n    return e;\n}\nvar eu = \"6.7.0\";\nvar ru = eu;\nvar su = k(Gi());\nvar D = class extends Error {\n    constructor(r){\n        super(r + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(D, \"PrismaClientConstructorValidationError\");\nvar tu = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], nu = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], iu = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Df = {\n    datasources: (e, { datasourceNames: r })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new D(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [t, n] of Object.entries(e)){\n                if (!r.includes(t)) {\n                    let i = Wr(t, r) || ` Available datasources: ${r.join(\", \")}`;\n                    throw new D(`Unknown datasource ${t} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new D(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new D(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new D(`Invalid value ${JSON.stringify(o)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, r)=>{\n        if (!e && Er(r.generator) === \"client\") throw new D('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e === null) return;\n        if (e === void 0) throw new D('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Wn(r).includes(\"driverAdapters\")) throw new D('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Er(r.generator) === \"binary\") throw new D('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new D(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new D(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!nu.includes(e)) {\n                let r = Wr(e, nu);\n                throw new D(`Invalid errorFormat ${e} provided to PrismaClient constructor.${r}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new D(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function r(t) {\n            if (typeof t == \"string\" && !iu.includes(t)) {\n                let n = Wr(t, iu);\n                throw new D(`Invalid log level \"${t}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let t of e){\n            r(t);\n            let n = {\n                level: r,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Wr(i, o);\n                        throw new D(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (t && typeof t == \"object\") for (let [i, o] of Object.entries(t))if (n[i]) n[i](o);\n            else throw new D(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let r = e.maxWait;\n        if (r != null && r <= 0) throw new D(`Invalid value ${r} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let t = e.timeout;\n        if (t != null && t <= 0) throw new D(`Invalid value ${t} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, r)=>{\n        if (typeof e != \"object\") throw new D('\"omit\" option is expected to be an object.');\n        if (e === null) throw new D('\"omit\" option can not be `null`');\n        let t = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = Nf(n, r.runtimeDataModel);\n            if (!o) {\n                t.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    t.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    t.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && t.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (t.length > 0) throw new D(Ff(e, t));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let r = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new D(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [t] of Object.entries(e))if (!r.includes(t)) {\n            let n = Wr(t, r);\n            throw new D(`Invalid property ${JSON.stringify(t)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction au(e, r) {\n    for (let [t, n] of Object.entries(e)){\n        if (!tu.includes(t)) {\n            let i = Wr(t, tu);\n            throw new D(`Unknown property ${t} provided to PrismaClient constructor.${i}`);\n        }\n        Df[t](n, r);\n    }\n    if (e.datasourceUrl && e.datasources) throw new D('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Wr(e, r) {\n    if (r.length === 0 || typeof e != \"string\") return \"\";\n    let t = _f(e, r);\n    return t ? ` Did you mean \"${t}\"?` : \"\";\n}\nfunction _f(e, r) {\n    if (r.length === 0) return null;\n    let t = r.map((i)=>({\n            value: i,\n            distance: (0, su.default)(e, i)\n        }));\n    t.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = t[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction Nf(e, r) {\n    return ou(r.models, e) ?? ou(r.types, e);\n}\nfunction ou(e, r) {\n    let t = Object.keys(e).find((n)=>Ye(n) === r);\n    if (t) return e[t];\n}\nfunction Ff(e, r) {\n    let t = _r(e);\n    for (let o of r)switch(o.kind){\n        case \"UnknownModel\":\n            t.arguments.getField(o.modelKey)?.markAsError(), t.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            t.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = Cn(t, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction lu(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((r, t)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? t(i) : r(n)));\n        }, l = (u)=>{\n            o || (o = !0, t(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!Hn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar rr = N(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar Lf = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, Mf = Symbol.for(\"prisma.client.transaction.id\"), $f = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction fu(e) {\n    class r {\n        constructor(n){\n            this._originalClient = this;\n            this._middlewares = new Jn;\n            this._createPrismaPromise = Ao();\n            this.$metrics = new Fr(this);\n            this.$extends = Ka;\n            e = n?.__internal?.configOverride?.(e) ?? e, ul(e), n && au(n, e);\n            let i = new du.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Nr.empty(), this._previewFeatures = Wn(e), this._clientVersion = e.clientVersion ?? ru, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Jl();\n            let o = e.relativeEnvPaths && {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && Zn.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Zn.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = n.adapter;\n                let l = e.activeProvider === \"postgresql\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new T(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new T(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && o && it(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && N.enable(\"prisma:client\");\n                let p = Zn.default.resolve(e.dirname, e.relativePath);\n                mu.default.existsSync(p) || (p = e.dirname), rr(\"dirname\", e.dirname), rr(\"relativePath\", e.relativePath), rr(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && Kl(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    compilerWasm: e.compilerWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: cl(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: jr,\n                        getBatchRequestPayload: Mr,\n                        prismaGraphQLToJSError: $r,\n                        PrismaClientUnknownRequestError: j,\n                        PrismaClientInitializationError: T,\n                        PrismaClientKnownRequestError: z,\n                        debug: N(\"prisma:client:accelerateEngine\"),\n                        engineVersion: cu.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, rr(\"clientVersion\", e.clientVersion), this._engine = Ll(e, this._engineConfig), this._requestHandler = new zn(this, i), l.log) for (let f of l.log){\n                    let g = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    g && this.$on(g, (h)=>{\n                        tt.log(`${tt.tags[g] ?? \"\"}`, h.message || h.query);\n                    });\n                }\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = vt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            return n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Go();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Co({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = uu(n, i);\n                    return Ro(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new Z(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(Ro(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new Z(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: Ml,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Co({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...uu(n, i));\n                throw new Z(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new Z(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = $f.nextId(), s = Hl(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return lu(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return he(vt(he(Ha(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                re(\"_createPrismaPromise\", ()=>Ao(n)),\n                re(Mf, ()=>n.id)\n            ])), [\n                Lr(Xa)\n            ]);\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? Lf, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (I)=>c(u, (P)=>(I?.end(), l(P))));\n                let { runInTransaction: p, args: d, ...f } = u, g = {\n                    ...n,\n                    ...f\n                };\n                d && (g.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === !1 && delete g.transaction;\n                let h = await nl(this, g);\n                return g.model ? Za({\n                    result: h,\n                    modelName: g.model,\n                    args: g.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : h;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new pu.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let g = {\n                    name: \"serialize\"\n                }, h = this._tracingHelper.runInChildSpan(g, ()=>Dn({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return N.enabled(\"prisma:client\") && (rr(\"Prisma Client call:\"), rr(`prisma.${i}(${Ma(n)})`), rr(\"Generated request:\"), rr(JSON.stringify(h, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: h,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f\n                });\n            } catch (g) {\n                throw g.clientVersion = this._clientVersion, g;\n            }\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return r;\n}\nfunction uu(e, r) {\n    return qf(e) ? [\n        new oe(e, r),\n        Ql\n    ] : [\n        e,\n        Gl\n    ];\n}\nfunction qf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar jf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction gu(e) {\n    return new Proxy(e, {\n        get (r, t) {\n            if (t in r) return r[t];\n            if (!jf.has(t)) throw new TypeError(`Invalid enum value: ${String(t)}`);\n        }\n    });\n}\nfunction hu(e) {\n    it(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.5.0\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/generated/prisma/runtime/library.js\n");

/***/ }),

/***/ "(rsc)/./app/services/documentService.js":
/*!*****************************************!*\
  !*** ./app/services/documentService.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentService: () => (/* binding */ DocumentService)\n/* harmony export */ });\n/* harmony import */ var _app_generated_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../app/generated/prisma */ \"(rsc)/./app/generated/prisma/index.js\");\n/* harmony import */ var _app_generated_prisma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_app_generated_prisma__WEBPACK_IMPORTED_MODULE_0__);\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\n// Initialize Prisma client\nconst prisma = new _app_generated_prisma__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n/**\n * Helper function to log data\n * @param {string} label - Log label\n * @param {any} data - Data to log\n */ const logData = (label, data)=>{\n    console.log(`===== ${label} =====`);\n    console.log(JSON.stringify(data, null, 2));\n    console.log(\"===================\");\n};\n/**\n * Map NurseIO document types to CoreVerify document types\n * @param {string} nurseIOType - NurseIO document type\n * @returns {string} - CoreVerify document type name\n */ const mapDocumentType = (nurseIOType)=>{\n    // Map from NurseIO type to CoreVerify type\n    const typeMap = {\n        // Original mappings\n        \"certificate\": \"mandatory\",\n        \"document\": \"documents\",\n        \"medical\": \"vaccination_record\",\n        \"other\": \"other\",\n        // New mappings (since NurseIO now uses the same names as CoreVerify)\n        \"mandatory\": \"mandatory\",\n        \"documents\": \"documents\",\n        \"vaccination_record\": \"vaccination_record\"\n    };\n    // Check if the nurseIOType is in the map\n    const mappedType = typeMap[nurseIOType] || nurseIOType;\n    // Log the mapping for debugging\n    console.log(`Mapping document type: ${nurseIOType} -> ${mappedType}`);\n    return mappedType;\n};\n/**\n * Convert DocType/DocTitle to form schema format\n * @param {Object} documentType - Document type record from database\n * @param {Object} documentTitle - Document title record from database\n * @returns {Object} - Form schema\n */ const convertToFormSchema = (documentType, documentTitle)=>{\n    const typeId = documentType.name.toLowerCase();\n    try {\n        // Generate a dynamic form schema based on document title properties\n        const formSchema = {\n            title: `${documentTitle.title} Form Schema`,\n            description: `Schema for ${documentTitle.title.toLowerCase()} upload form fields`,\n            formId: `${typeId}-form`,\n            documentType: typeId,\n            hideHeader: true,\n            showFormButtons: false,\n            fields: []\n        };\n        // Add title field (always required)\n        formSchema.fields.push({\n            id: \"certificateAbbreviation\",\n            name: \"certificateAbbreviation\",\n            type: \"text\",\n            label: `${documentTitle.title} Title`,\n            placeholder: `Enter ${documentTitle.title.toLowerCase()} title`,\n            required: true,\n            order: 1,\n            fullWidth: true,\n            validation: {\n                minLength: 3,\n                maxLength: 100,\n                pattern: \"^[A-Za-z0-9\\\\s\\\\-\\\\.\\\\(\\\\)]+$\",\n                message: `Title must be between 3-100 characters`\n            }\n        });\n        // Add specialities/categories field\n        formSchema.fields.push({\n            id: \"specialities\",\n            name: \"specialities\",\n            type: \"text\",\n            label: documentType.name === \"Mandatory\" ? \"Specialities\" : \"Categories\",\n            placeholder: `Enter ${documentType.name.toLowerCase() === \"mandatory\" ? \"specialities\" : \"categories\"}`,\n            required: false,\n            order: 2,\n            fullWidth: true\n        });\n        // Add number field if required\n        if (documentTitle.requireNumber) {\n            formSchema.fields.push({\n                id: \"certLicenseNumber\",\n                name: \"certLicenseNumber\",\n                type: \"text\",\n                label: documentType.name === \"Mandatory\" ? \"Certificate/License Number\" : \"Document Number/ID\",\n                placeholder: `Enter ${documentType.name === \"Mandatory\" ? \"certificate/license number\" : \"document number/ID\"}`,\n                required: true,\n                order: 3,\n                fullWidth: true,\n                validation: {\n                    pattern: \"^[A-Za-z0-9\\\\-\\\\.\\\\/]+$\",\n                    message: \"Can only contain letters, numbers, hyphens, periods, and slashes\"\n                }\n            });\n        }\n        // Add valid date field if required\n        if (documentTitle.requireValidDate) {\n            formSchema.fields.push({\n                id: \"effectiveDate\",\n                name: \"effectiveDate\",\n                type: \"date\",\n                label: documentType.name === \"Vaccination Record\" ? \"Record Date\" : \"Issue Date\",\n                placeholder: `Select ${documentType.name === \"Vaccination Record\" ? \"record\" : \"issue\"} date (MM/DD/YYYY)`,\n                required: true,\n                order: 4,\n                fullWidth: true,\n                validation: {\n                    notInFuture: true,\n                    message: \"Date cannot be in the future\"\n                }\n            });\n        }\n        // Add expiration date field if required\n        if (documentTitle.requireExpireDate) {\n            formSchema.fields.push({\n                id: \"expirationDate\",\n                name: \"expirationDate\",\n                type: \"date\",\n                label: \"Expiration Date\",\n                placeholder: \"Select expiration date (MM/DD/YYYY)\",\n                required: true,\n                order: 5,\n                fullWidth: true,\n                validation: {\n                    afterField: \"effectiveDate\",\n                    message: \"Expiration date must be after issue date\"\n                }\n            });\n        }\n        // Add doc data field if required\n        if (documentTitle.requireDocData && documentTitle.docDataName && documentTitle.docDataOptions) {\n            try {\n                let options = [];\n                if (typeof documentTitle.docDataOptions === \"string\") {\n                    options = JSON.parse(documentTitle.docDataOptions);\n                } else if (documentTitle.docDataOptions.options) {\n                    options = documentTitle.docDataOptions.options;\n                }\n                formSchema.fields.push({\n                    id: \"docData\",\n                    name: \"docData\",\n                    type: \"select\",\n                    label: documentTitle.docDataName,\n                    placeholder: `Select ${documentTitle.docDataName.toLowerCase()}`,\n                    required: true,\n                    order: 6,\n                    fullWidth: true,\n                    options: options\n                });\n            } catch (e) {\n                console.error(\"Error parsing docDataOptions:\", e);\n            }\n        }\n        // Add file upload field (always required)\n        formSchema.fields.push({\n            id: \"fileUpload\",\n            name: \"fileUpload\",\n            type: \"file\",\n            label: `Upload ${documentTitle.title} (PDF, JPG, PNG)`,\n            accept: \".pdf,.jpg,.jpeg,.png\",\n            required: true,\n            order: 7,\n            fullWidth: true,\n            validation: {\n                maxSize: 10000000,\n                fileTypes: [\n                    \"application/pdf\",\n                    \"image/jpeg\",\n                    \"image/png\"\n                ],\n                message: \"Please upload a PDF, JPG, or PNG file less than 10MB\"\n            }\n        });\n        // Add back side upload if required\n        if (documentTitle.requireAttachmentBack) {\n            formSchema.fields.push({\n                id: \"fileUploadBack\",\n                name: \"fileUploadBack\",\n                type: \"file\",\n                label: `Upload ${documentTitle.title} Back Side (PDF, JPG, PNG)`,\n                accept: \".pdf,.jpg,.jpeg,.png\",\n                required: true,\n                order: 8,\n                fullWidth: true,\n                validation: {\n                    maxSize: 10000000,\n                    fileTypes: [\n                        \"application/pdf\",\n                        \"image/jpeg\",\n                        \"image/png\"\n                    ],\n                    message: \"Please upload a PDF, JPG, or PNG file less than 10MB\"\n                }\n            });\n        }\n        // Add notes field\n        formSchema.fields.push({\n            id: \"notes\",\n            name: \"notes\",\n            type: \"textarea\",\n            label: \"Notes\",\n            placeholder: \"Enter notes or description\",\n            required: false,\n            order: 9,\n            fullWidth: true,\n            rows: 3\n        });\n        // Add shareable checkbox\n        formSchema.fields.push({\n            id: \"shareable\",\n            name: \"shareable\",\n            type: \"checkbox\",\n            label: \"Shareable\",\n            defaultValue: documentTitle.shareable,\n            required: false,\n            order: 10,\n            fullWidth: true\n        });\n        // Sort fields by order\n        formSchema.fields.sort((a, b)=>a.order - b.order);\n        // Add form buttons and messages\n        formSchema.submitButtonText = \"Submit\";\n        formSchema.cancelButtonText = \"Cancel\";\n        formSchema.deleteButtonText = \"Delete\";\n        formSchema.successMessage = `${documentTitle.title} uploaded successfully!`;\n        formSchema.errorMessage = `There was an error uploading your ${documentTitle.title.toLowerCase()}. Please try again.`;\n        return formSchema;\n    } catch (error) {\n        console.error(`Failed to generate form schema:`, error);\n        // Create a basic schema if all else fails\n        return {\n            title: documentTitle ? `${documentTitle.title} Form Schema` : \"Document Form Schema\",\n            description: documentTitle ? `Schema for ${documentTitle.title.toLowerCase()} upload form fields` : \"Schema for document upload form fields\",\n            formId: `${typeId}-form`,\n            documentType: typeId,\n            hideHeader: true,\n            showFormButtons: false,\n            fields: [\n                {\n                    id: \"certificateAbbreviation\",\n                    name: \"certificateAbbreviation\",\n                    type: \"text\",\n                    label: \"Document Title\",\n                    placeholder: \"Enter document title\",\n                    required: true,\n                    order: 1,\n                    fullWidth: true\n                },\n                {\n                    id: \"fileUpload\",\n                    name: \"fileUpload\",\n                    type: \"file\",\n                    label: \"Upload Document\",\n                    accept: \".pdf,.jpg,.jpeg,.png\",\n                    required: true,\n                    order: 2,\n                    fullWidth: true\n                }\n            ],\n            submitButtonText: \"Submit\",\n            cancelButtonText: \"Cancel\",\n            deleteButtonText: \"Delete\",\n            successMessage: \"Document uploaded successfully!\",\n            errorMessage: \"There was an error uploading your document. Please try again.\"\n        };\n    }\n};\n/**\n * Service class for document type operations\n */ class DocumentService {\n    /**\n   * Get all document types\n   * @returns {Promise<Array>} - All document types\n   */ static async getAllDocumentTypes() {\n        try {\n            // Use direct SQLite connection if Prisma fails\n            try {\n                const documentTypes = await prisma.documentType.findMany({\n                    include: {\n                        documentTitles: true\n                    },\n                    orderBy: {\n                        name: \"asc\"\n                    }\n                });\n                // Transform to expected format\n                const transformedTypes = documentTypes.map((type)=>{\n                    const title = type.documentTitles[0]; // Assuming one title per type\n                    return {\n                        id: type.id.toString(),\n                        typeId: type.name.toLowerCase(),\n                        name: title ? title.title : type.name,\n                        description: `${type.name} documents`,\n                        color: this._getColorForType(type.name.toLowerCase()),\n                        require_license: title ? title.requireDocData : false,\n                        require_license_options: title && title.docDataOptions ? title.docDataOptions : null\n                    };\n                });\n                logData(\"FETCHED_ALL_DOCUMENT_TYPES\", {\n                    count: transformedTypes.length\n                });\n                return transformedTypes;\n            } catch (error) {\n                // If Prisma fails, use direct SQLite\n                logData(\"PRISMA_ERROR_SWITCHING_TO_SQLITE\", {\n                    error: error.message\n                });\n                // Use direct SQLite query\n                const Database = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n                const path = __webpack_require__(/*! path */ \"path\");\n                const dbPath = path.resolve(process.cwd(), \"prisma/dev.db\");\n                const db = new Database(dbPath);\n                try {\n                    // Query document types and titles\n                    const query = `\n            SELECT dt.id, dt.name, dt.createdAt, dt.updatedAt,\n                   dtl.id as title_id, dtl.title, \n                   dtl.requireDocData, dtl.docDataOptions\n            FROM document_types dt\n            LEFT JOIN document_titles dtl ON dt.id = dtl.documentTypeId\n            ORDER BY dt.name ASC\n          `;\n                    const results = db.prepare(query).all();\n                    // Transform to expected format\n                    const transformedTypes = results.map((row)=>{\n                        return {\n                            id: row.id.toString(),\n                            typeId: row.name.toLowerCase(),\n                            name: row.title || row.name,\n                            description: `${row.name} documents`,\n                            color: this._getColorForType(row.name.toLowerCase()),\n                            require_license: row.requireDocData === 1,\n                            require_license_options: row.docDataOptions\n                        };\n                    });\n                    logData(\"FETCHED_ALL_DOCUMENT_TYPES_SQLITE\", {\n                        count: transformedTypes.length\n                    });\n                    return transformedTypes;\n                } finally{\n                    db.close();\n                }\n            }\n        } catch (error) {\n            logData(\"ERROR_FETCHING_DOCUMENT_TYPES\", {\n                error: error.message\n            });\n            throw new Error(`Failed to fetch document types: ${error.message}`);\n        }\n    }\n    /**\n   * Get document type by ID\n   * @param {string} typeId - Type ID (e.g., 'certificate', 'medical')\n   * @returns {Promise<Object>} - Document type\n   */ static async getDocumentTypeByTypeId(typeId) {\n        try {\n            // Map the typeId to CoreVerify format if needed\n            const mappedTypeId = mapDocumentType(typeId);\n            logData(\"GETTING_DOCUMENT_TYPE\", {\n                originalTypeId: typeId,\n                mappedTypeId\n            });\n            // Try using Prisma first\n            try {\n                const documentType = await prisma.documentType.findFirst({\n                    where: {\n                        name: {\n                            equals: this._capitalizeFirstLetter(mappedTypeId),\n                            mode: \"insensitive\"\n                        }\n                    },\n                    include: {\n                        documentTitles: true\n                    }\n                });\n                if (!documentType) {\n                    throw new Error(`Document type not found: ${typeId}`);\n                }\n                // Transform to expected format\n                const title = documentType.documentTitles[0]; // Assuming one title per type\n                const transformedType = {\n                    id: documentType.id.toString(),\n                    typeId: documentType.name.toLowerCase(),\n                    name: title ? title.title : documentType.name,\n                    description: `${documentType.name} documents`,\n                    color: this._getColorForType(documentType.name.toLowerCase()),\n                    require_license: title ? title.requireDocData : false,\n                    require_license_options: title && title.docDataOptions ? title.docDataOptions : null\n                };\n                logData(\"FETCHED_DOCUMENT_TYPE\", {\n                    typeId,\n                    id: transformedType.id\n                });\n                return transformedType;\n            } catch (error) {\n                // If Prisma fails, use direct SQLite\n                logData(\"PRISMA_ERROR_SWITCHING_TO_SQLITE\", {\n                    error: error.message,\n                    method: \"getDocumentTypeByTypeId\"\n                });\n                // Use direct SQLite query\n                const Database = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n                const path = __webpack_require__(/*! path */ \"path\");\n                const dbPath = path.resolve(process.cwd(), \"prisma/dev.db\");\n                const db = new Database(dbPath);\n                try {\n                    // Query document type and title\n                    const capitalizedTypeId = this._capitalizeFirstLetter(mappedTypeId);\n                    const query = `\n            SELECT dt.id, dt.name, dt.createdAt, dt.updatedAt,\n                   dtl.id as title_id, dtl.title, \n                   dtl.requireDocData, dtl.docDataOptions\n            FROM document_types dt\n            LEFT JOIN document_titles dtl ON dt.id = dtl.documentTypeId\n            WHERE LOWER(dt.name) = LOWER(?)\n          `;\n                    const result = db.prepare(query).get(capitalizedTypeId);\n                    if (!result) {\n                        throw new Error(`Document type not found: ${typeId}`);\n                    }\n                    // Transform to expected format\n                    const transformedType = {\n                        id: result.id.toString(),\n                        typeId: result.name.toLowerCase(),\n                        name: result.title || result.name,\n                        description: `${result.name} documents`,\n                        color: this._getColorForType(result.name.toLowerCase()),\n                        require_license: result.requireDocData === 1,\n                        require_license_options: result.docDataOptions\n                    };\n                    logData(\"FETCHED_DOCUMENT_TYPE_SQLITE\", {\n                        typeId,\n                        id: transformedType.id\n                    });\n                    return transformedType;\n                } finally{\n                    db.close();\n                }\n            }\n        } catch (error) {\n            logData(\"ERROR_FETCHING_DOCUMENT_TYPE\", {\n                typeId,\n                error: error.message\n            });\n            throw new Error(`Failed to fetch document type: ${error.message}`);\n        }\n    }\n    /**\n   * Get form schema by document type\n   * @param {string} typeId - Type ID (e.g., 'certificate', 'medical')\n   * @param {Object} options - Additional options (locationId, childTypeId, etc.)\n   * @returns {Promise<Object>} - Form schema\n   */ static async getFormSchemaByTypeId(typeId, options = {}) {\n        try {\n            logData(\"FETCHING_FORM_SCHEMA\", {\n                originalTypeId: typeId,\n                options\n            });\n            // If childTypeId is provided, use the new method to get schema for specific subtype\n            if (options.childTypeId) {\n                return await this.getFormSchemaByTypeAndSubType(typeId, options.childTypeId, options);\n            }\n            // Map NurseIO type to CoreVerify type\n            const mappedTypeId = mapDocumentType(typeId);\n            logData(\"MAPPED_TYPE_ID\", {\n                originalTypeId: typeId,\n                mappedTypeId: mappedTypeId,\n                locationId: options.locationId\n            });\n            // First, check if this type exists in the global configuration\n            const config = this._loadDocumentTypesConfig();\n            const globalDocType = config.documentTypes.find((dt)=>dt.id.toLowerCase() === mappedTypeId.toLowerCase());\n            // If found in global config and has child types, return a special schema that prompts for child type selection\n            if (globalDocType && globalDocType.childTypes && globalDocType.childTypes.length > 0) {\n                const childTypeOptions = globalDocType.childTypes.map((childType)=>({\n                        value: childType.id,\n                        label: childType.name\n                    }));\n                return {\n                    title: `Select ${globalDocType.name} Type`,\n                    formId: `${typeId.toLowerCase()}-select-form`,\n                    documentType: typeId.toLowerCase(),\n                    hideHeader: false,\n                    showFormButtons: true,\n                    isChildTypeSelector: true,\n                    fields: [\n                        {\n                            id: \"childDocumentType\",\n                            name: \"childDocumentType\",\n                            type: \"select\",\n                            label: `${globalDocType.name} Type`,\n                            placeholder: `Select ${globalDocType.name.toLowerCase()} type`,\n                            required: true,\n                            order: 1,\n                            fullWidth: true,\n                            options: childTypeOptions\n                        }\n                    ],\n                    submitButtonText: \"Continue\",\n                    cancelButtonText: \"Cancel\"\n                };\n            }\n            // If not found in global config or doesn't have child types, continue with existing flow\n            // First, find the document type in the database\n            const documentType = await prisma.documentType.findFirst({\n                where: {\n                    name: {\n                        equals: mappedTypeId,\n                        mode: \"insensitive\"\n                    }\n                }\n            });\n            if (!documentType) {\n                throw new Error(`Document type not found: ${mappedTypeId}`);\n            }\n            let formSchema = {\n                title: `${mappedTypeId} Form Schema`,\n                description: `Schema for ${mappedTypeId.toLowerCase()}`,\n                formId: documentType.formId || `${typeId.toLowerCase()}-form`,\n                documentType: typeId.toLowerCase(),\n                hideHeader: documentType.hideHeader || false,\n                showFormButtons: documentType.showFormButtons !== false,\n                fields: []\n            };\n            // Handle location-specific configuration\n            let documentTitle;\n            let locationSpecificFields = [];\n            // If locationId is provided, try to get location-specific document configurations\n            if (options.locationId) {\n                try {\n                    // Find region by location ID\n                    const region = await this._getRegionByLocationId(options.locationId);\n                    if (region) {\n                        // Find document configurations for this region and document type\n                        const documentConfigurations = await prisma.documentConfiguration.findMany({\n                            where: {\n                                regionId: region.id,\n                                documentType: {\n                                    name: {\n                                        equals: mappedTypeId,\n                                        mode: \"insensitive\"\n                                    }\n                                },\n                                active: true\n                            },\n                            include: {\n                                documentTitle: true,\n                                documentType: true\n                            },\n                            orderBy: {\n                                priority: \"desc\"\n                            }\n                        });\n                        if (documentConfigurations.length > 0) {\n                            // Use the first matching document title\n                            documentTitle = documentConfigurations[0].documentTitle;\n                            // Check for custom field overrides in the configuration\n                            if (documentConfigurations[0].customFields) {\n                                try {\n                                    const customFieldsData = documentConfigurations[0].customFields;\n                                    locationSpecificFields = Array.isArray(customFieldsData) ? customFieldsData : [];\n                                } catch (e) {\n                                    console.error(\"Error parsing custom fields:\", e);\n                                }\n                            }\n                            // If the document title has formFields as JSON, parse and use those\n                            if (documentTitle.formFields) {\n                                try {\n                                    let fieldsData = documentTitle.formFields;\n                                    // Parse if it's a string\n                                    if (typeof fieldsData === \"string\") {\n                                        fieldsData = JSON.parse(fieldsData);\n                                    }\n                                    // If it's an array, use directly; otherwise check for fields property\n                                    const fields = Array.isArray(fieldsData) ? fieldsData : fieldsData.fields || [];\n                                    // Add each field to the schema\n                                    fields.forEach((field)=>{\n                                        formSchema.fields.push(field);\n                                    });\n                                    logData(\"USING_JSON_FORM_FIELDS\", {\n                                        documentTitle: documentTitle.title,\n                                        fieldCount: fields.length\n                                    });\n                                } catch (e) {\n                                    console.error(\"Error parsing formFields JSON:\", e);\n                                }\n                            }\n                        }\n                    }\n                } catch (error) {\n                    logData(\"ERROR_FETCHING_LOCATION_CONFIG\", {\n                        error: error.message\n                    });\n                // Continue without location-specific config\n                }\n            }\n            // If we don't have a document title yet, get the default one\n            if (!documentTitle) {\n                try {\n                    const defaultTitle = await prisma.documentTitle.findFirst({\n                        where: {\n                            documentTypeId: documentType.id,\n                            isDisplay: true\n                        },\n                        orderBy: {\n                            id: \"asc\" // Get the first one by ID\n                        }\n                    });\n                    if (defaultTitle) {\n                        documentTitle = defaultTitle;\n                        // If the document title has formFields as JSON, parse and use those\n                        if (defaultTitle.formFields) {\n                            try {\n                                let fieldsData = defaultTitle.formFields;\n                                // Parse if it's a string\n                                if (typeof fieldsData === \"string\") {\n                                    fieldsData = JSON.parse(fieldsData);\n                                }\n                                // If it's an array, use directly; otherwise check for fields property\n                                const fields = Array.isArray(fieldsData) ? fieldsData : fieldsData.fields || [];\n                                // Add each field to the schema\n                                fields.forEach((field)=>{\n                                    formSchema.fields.push(field);\n                                });\n                                logData(\"USING_DEFAULT_JSON_FORM_FIELDS\", {\n                                    documentTitle: defaultTitle.title,\n                                    fieldCount: fields.length\n                                });\n                            } catch (e) {\n                                console.error(\"Error parsing default formFields JSON:\", e);\n                            }\n                        }\n                    }\n                } catch (error) {\n                    logData(\"ERROR_FETCHING_DEFAULT_TITLE\", {\n                        error: error.message\n                    });\n                }\n            }\n            // If we have a document title but no fields yet, generate standard fields\n            if (documentTitle && formSchema.fields.length === 0) {\n                // Use custom form title/description if available\n                if (documentTitle.formTitle) {\n                    formSchema.title = documentTitle.formTitle;\n                }\n                if (documentTitle.formDescription) {\n                    formSchema.description = documentTitle.formDescription;\n                }\n                // Add title field (always required)\n                formSchema.fields.push({\n                    id: \"certificateAbbreviation\",\n                    name: \"certificateAbbreviation\",\n                    type: \"text\",\n                    label: `${documentTitle.title} Title`,\n                    placeholder: `Enter ${documentTitle.title.toLowerCase()} title`,\n                    required: true,\n                    order: 1,\n                    fullWidth: true,\n                    validation: {\n                        minLength: 3,\n                        maxLength: 100,\n                        pattern: \"^[A-Za-z0-9\\\\s\\\\-\\\\.\\\\(\\\\)]+$\",\n                        message: `Title must be between 3-100 characters`\n                    }\n                });\n                // Add specialities/categories field\n                formSchema.fields.push({\n                    id: \"specialities\",\n                    name: \"specialities\",\n                    type: \"text\",\n                    label: documentType.name === \"Mandatory\" ? \"Specialities\" : \"Categories\",\n                    placeholder: `Enter ${documentType.name.toLowerCase() === \"mandatory\" ? \"specialities\" : \"categories\"}`,\n                    required: false,\n                    order: 2,\n                    fullWidth: true\n                });\n                // Add document number field if required by document title\n                if (documentTitle.requireNumber) {\n                    formSchema.fields.push({\n                        id: \"certLicenseNumber\",\n                        name: \"certLicenseNumber\",\n                        type: \"text\",\n                        label: `${documentTitle.title} Number`,\n                        placeholder: `Enter ${documentTitle.title.toLowerCase()} number`,\n                        required: true,\n                        order: 3,\n                        fullWidth: true\n                    });\n                }\n                // Add issue date field if required by document title\n                if (documentTitle.requireValidDate) {\n                    formSchema.fields.push({\n                        id: \"effectiveDate\",\n                        name: \"effectiveDate\",\n                        type: \"date\",\n                        label: \"Issue Date\",\n                        placeholder: \"Select issue date (MM/DD/YYYY)\",\n                        required: true,\n                        order: 4,\n                        fullWidth: true\n                    });\n                }\n                // Add expiration date field if required by document title\n                if (documentTitle.requireExpireDate) {\n                    formSchema.fields.push({\n                        id: \"expirationDate\",\n                        name: \"expirationDate\",\n                        type: \"date\",\n                        label: \"Expiration Date\",\n                        placeholder: \"Select expiration date (MM/DD/YYYY)\",\n                        required: true,\n                        order: 5,\n                        fullWidth: true\n                    });\n                }\n                // Add doc data field if required\n                if (documentTitle.requireDocData && documentTitle.docDataName && documentTitle.docDataOptions) {\n                    try {\n                        let options = [];\n                        if (typeof documentTitle.docDataOptions === \"string\") {\n                            options = JSON.parse(documentTitle.docDataOptions);\n                        } else {\n                            options = documentTitle.docDataOptions.options || documentTitle.docDataOptions;\n                        }\n                        formSchema.fields.push({\n                            id: \"docData\",\n                            name: \"docData\",\n                            type: \"select\",\n                            label: documentTitle.docDataName,\n                            placeholder: `Select ${documentTitle.docDataName.toLowerCase()}`,\n                            required: true,\n                            order: 6,\n                            fullWidth: true,\n                            options: options\n                        });\n                    } catch (e) {\n                        console.error(\"Error parsing docDataOptions:\", e);\n                    }\n                }\n                // Add file upload field (always required)\n                formSchema.fields.push({\n                    id: \"fileUpload\",\n                    name: \"fileUpload\",\n                    type: \"file\",\n                    label: `Upload ${documentTitle.title} (PDF, JPG, PNG)`,\n                    accept: \".pdf,.jpg,.jpeg,.png\",\n                    required: true,\n                    order: 7,\n                    fullWidth: true,\n                    validation: {\n                        maxSize: 10000000,\n                        fileTypes: [\n                            \"application/pdf\",\n                            \"image/jpeg\",\n                            \"image/png\"\n                        ],\n                        message: \"Please upload a PDF, JPG, or PNG file less than 10MB\"\n                    }\n                });\n                // Add notes field - Skip for fingerprint clearance\n                if (!isFingerPrintClearance) {\n                    formSchema.fields.push({\n                        id: \"notes\",\n                        name: \"notes\",\n                        type: \"textarea\",\n                        label: \"Additional Notes\",\n                        placeholder: \"Enter any additional notes or comments\",\n                        required: false,\n                        order: 8,\n                        fullWidth: true\n                    });\n                }\n                // Add shareable field\n                formSchema.fields.push({\n                    id: \"shareable\",\n                    name: \"shareable\",\n                    type: \"radio\",\n                    label: \"Is this document shareable with facilities?\",\n                    required: true,\n                    order: 9,\n                    fullWidth: true,\n                    options: [\n                        {\n                            value: \"true\",\n                            label: \"Yes\"\n                        },\n                        {\n                            value: \"false\",\n                            label: \"No\"\n                        }\n                    ],\n                    defaultValue: documentTitle.shareable ? \"true\" : \"false\"\n                });\n            }\n            // Apply any location-specific field overrides from DocumentConfiguration\n            if (locationSpecificFields.length > 0) {\n                locationSpecificFields.forEach((customField)=>{\n                    // Find if this field already exists in the schema\n                    const existingFieldIndex = formSchema.fields.findIndex((f)=>f.id === customField.id);\n                    if (existingFieldIndex >= 0) {\n                        // Update existing field\n                        formSchema.fields[existingFieldIndex] = {\n                            ...formSchema.fields[existingFieldIndex],\n                            ...customField\n                        };\n                    } else {\n                        // Add new field\n                        formSchema.fields.push(customField);\n                    }\n                });\n                logData(\"APPLIED_LOCATION_SPECIFIC_FIELDS\", {\n                    fieldCount: locationSpecificFields.length,\n                    locationId: options.locationId\n                });\n            }\n            // Sort fields by order\n            formSchema.fields.sort((a, b)=>a.order - b.order);\n            // Add form submit/cancel buttons text\n            formSchema.submitButtonText = \"Upload Document\";\n            formSchema.cancelButtonText = \"Cancel\";\n            formSchema.errorMessage = \"There was an error uploading your document. Please try again.\";\n            formSchema.successMessage = \"Document uploaded successfully.\";\n            logData(\"FORM_SCHEMA_GENERATED\", {\n                documentType: documentType.name,\n                documentTitle: documentTitle ? documentTitle.title : null,\n                fieldCount: formSchema.fields.length\n            });\n            return formSchema;\n        } catch (error) {\n            logData(\"FORM_SCHEMA_ERROR\", {\n                error: error.message\n            });\n            throw error;\n        }\n    }\n    /**\n   * Create a generic form schema when no specific schema is found\n   * @param {string} typeId - Document type ID\n   * @returns {Object} - Generic form schema\n   * @private\n   */ static _createGenericFormSchema(typeId) {\n        const typeName = this._capitalizeFirstLetter(typeId);\n        // Define all possible fields\n        const titleField = {\n            id: \"certificateAbbreviation\",\n            name: \"certificateAbbreviation\",\n            type: \"text\",\n            label: \"Document Title\",\n            placeholder: \"Enter document title\",\n            required: true,\n            order: 1,\n            fullWidth: true\n        };\n        const docTypeField = {\n            id: \"docData\",\n            name: \"docData\",\n            type: \"select\",\n            label: \"Document Type\",\n            placeholder: \"Select document type\",\n            required: true,\n            order: 0.5,\n            fullWidth: true,\n            options: [\n                {\n                    value: \"rn\",\n                    label: \"Registered Nurse (RN)\"\n                },\n                {\n                    value: \"lpn\",\n                    label: \"Licensed Practical Nurse (LPN)\"\n                },\n                {\n                    value: \"aprn\",\n                    label: \"Advanced Practice Registered Nurse (APRN)\"\n                },\n                {\n                    value: \"crna\",\n                    label: \"Certified Registered Nurse Anesthetist (CRNA)\"\n                },\n                {\n                    value: \"cna\",\n                    label: \"Certified Nursing Assistant (CNA)\"\n                },\n                {\n                    value: \"bls\",\n                    label: \"Basic Life Support (BLS)\"\n                },\n                {\n                    value: \"acls\",\n                    label: \"Advanced Cardiac Life Support (ACLS)\"\n                },\n                {\n                    value: \"pals\",\n                    label: \"Pediatric Advanced Life Support (PALS)\"\n                },\n                {\n                    value: \"nrp\",\n                    label: \"Neonatal Resuscitation Program (NRP)\"\n                },\n                {\n                    value: \"other\",\n                    label: \"Other\"\n                }\n            ]\n        };\n        const specialitiesField = {\n            id: \"specialities\",\n            name: \"specialities\",\n            type: \"text\",\n            label: \"Specialities/Categories\",\n            placeholder: \"Enter specialities or categories\",\n            required: false,\n            order: 3,\n            fullWidth: true\n        };\n        const licenseNumberField = {\n            id: \"certLicenseNumber\",\n            name: \"certLicenseNumber\",\n            type: \"text\",\n            label: \"Certificate/License Number\",\n            placeholder: \"Enter certificate/license number\",\n            required: true,\n            order: 4,\n            fullWidth: true\n        };\n        const effectiveDateField = {\n            id: \"effectiveDate\",\n            name: \"effectiveDate\",\n            type: \"date\",\n            label: \"Effective Date\",\n            placeholder: \"Select effective date (MM/DD/YYYY)\",\n            required: true,\n            order: 5,\n            fullWidth: true\n        };\n        const expirationDateField = {\n            id: \"expirationDate\",\n            name: \"expirationDate\",\n            type: \"date\",\n            label: \"Expiration Date\",\n            placeholder: \"Select expiration date (MM/DD/YYYY)\",\n            required: true,\n            order: 6,\n            fullWidth: true\n        };\n        const fileUploadField = {\n            id: \"fileUpload\",\n            name: \"fileUpload\",\n            type: \"file\",\n            label: \"Upload Document (PDF, JPG, PNG)\",\n            accept: \".pdf,.jpg,.jpeg,.png\",\n            required: true,\n            order: 7,\n            fullWidth: true\n        };\n        const shareableField = {\n            id: \"shareable\",\n            name: \"shareable\",\n            type: \"checkbox\",\n            label: \"Shareable\",\n            defaultValue: true,\n            required: false,\n            order: 8,\n            fullWidth: true\n        };\n        // Build the fields array in the exact order we want\n        let fields = [];\n        // Add document type field first for Mandatory type\n        if (typeId === \"Mandatory\" || typeId === \"mandatory\") {\n            fields.push(docTypeField);\n        }\n        // Then add title and remaining fields\n        fields = [\n            ...fields,\n            titleField,\n            specialitiesField,\n            licenseNumberField,\n            effectiveDateField,\n            expirationDateField,\n            fileUploadField,\n            shareableField\n        ];\n        return {\n            title: `${typeName} Form Schema`,\n            description: `Schema for ${typeId.toLowerCase()} upload form fields`,\n            formId: `${typeId.toLowerCase()}-form`,\n            documentType: typeId.toLowerCase(),\n            hideHeader: true,\n            showFormButtons: false,\n            fields: fields,\n            submitButtonText: \"Submit\",\n            cancelButtonText: \"Cancel\",\n            deleteButtonText: \"Delete\",\n            successMessage: \"Document uploaded successfully!\",\n            errorMessage: \"There was an error uploading your document. Please try again.\"\n        };\n    }\n    /**\n   * Get document data fields for a document type\n   * @param {string} typeId - Type ID (e.g., 'medical')\n   * @returns {Promise<Object>} - Document data fields\n   */ static async getDocDataFields(typeId) {\n        try {\n            // Map the typeId to CoreVerify format if needed\n            const mappedTypeId = mapDocumentType(typeId);\n            logData(\"GETTING_DOC_DATA_FIELDS\", {\n                originalTypeId: typeId,\n                mappedTypeId\n            });\n            // Try with Prisma first\n            try {\n                const documentType = await prisma.documentType.findFirst({\n                    where: {\n                        name: {\n                            equals: this._capitalizeFirstLetter(mappedTypeId),\n                            mode: \"insensitive\"\n                        }\n                    },\n                    include: {\n                        documentTitles: true\n                    }\n                });\n                if (!documentType || documentType.documentTitles.length === 0) {\n                    return null;\n                }\n                const title = documentType.documentTitles[0];\n                if (!title.requireDocData || !title.docDataOptions) {\n                    return null;\n                }\n                // If we have document data options as a string, parse them\n                const docDataOptions = typeof title.docDataOptions === \"string\" ? JSON.parse(title.docDataOptions) : title.docDataOptions;\n                return {\n                    label: title.docDataName || \"Document Data\",\n                    options: docDataOptions.options || [],\n                    requireAttachments: {\n                        front: title.requireAttachmentFront,\n                        back: title.requireAttachmentBack\n                    },\n                    dataType: \"select\"\n                };\n            } catch (error) {\n                // If Prisma fails, use direct SQLite\n                logData(\"PRISMA_ERROR_SWITCHING_TO_SQLITE\", {\n                    error: error.message,\n                    method: \"getDocDataFields\"\n                });\n                // Use direct SQLite query\n                const Database = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n                const path = __webpack_require__(/*! path */ \"path\");\n                const dbPath = path.resolve(process.cwd(), \"prisma/dev.db\");\n                const db = new Database(dbPath);\n                try {\n                    // Query document type and title\n                    const capitalizedTypeId = this._capitalizeFirstLetter(mappedTypeId);\n                    const query = `            SELECT dtl.requireDocData, dtl.docDataOptions, dtl.docDataName,\n                  dtl.requireAttachmentFront, dtl.requireAttachmentBack\n            FROM document_types dt\n            LEFT JOIN document_titles dtl ON dt.id = dtl.documentTypeId\n            WHERE LOWER(dt.name) = LOWER(?)\n          `;\n                    const result = db.prepare(query).get(capitalizedTypeId);\n                    if (!result || result.requireDocData !== 1 || !result.docDataOptions) {\n                        return null;\n                    }\n                    // Parse document data options\n                    const docDataOptions = JSON.parse(result.docDataOptions);\n                    return {\n                        label: result.docDataName || \"Document Data\",\n                        options: docDataOptions.options || [],\n                        requireAttachments: {\n                            front: result.requireAttachmentFront === 1,\n                            back: result.requireAttachmentBack === 1\n                        },\n                        dataType: \"select\"\n                    };\n                } finally{\n                    db.close();\n                }\n            }\n        } catch (error) {\n            logData(\"ERROR_FETCHING_DOC_DATA_FIELDS\", {\n                typeId,\n                error: error.message\n            });\n            return null;\n        }\n    }\n    /**\n   * Check if this document type requires a license\n   * @param {string} typeId - Type ID (e.g., 'medical')\n   * @returns {Promise<boolean>} - Whether document requires license\n   */ static async requiresLicense(typeId) {\n        try {\n            const documentType = await this.getDocumentTypeByTypeId(typeId);\n            return documentType.require_license;\n        } catch (error) {\n            return false;\n        }\n    }\n    /**\n   * Get license options for this document type\n   * @param {string} typeId - Type ID (e.g., 'medical')\n   * @returns {Promise<Array>} - License options\n   */ static async getLicenseOptions(typeId) {\n        try {\n            const documentType = await this.getDocumentTypeByTypeId(typeId);\n            if (documentType.require_license && documentType.require_license_options) {\n                return JSON.parse(documentType.require_license_options);\n            }\n            return [];\n        } catch (error) {\n            logData(\"ERROR_FETCHING_LICENSE_OPTIONS\", {\n                typeId,\n                error: error.message\n            });\n            return [];\n        }\n    }\n    /**\n   * Get color for document type\n   * @param {string} typeId - Type ID (e.g., 'certificate', 'medical')\n   * @returns {string} - Color for type\n   * @private\n   */ static _getColorForType(typeId) {\n        const colors = {\n            certificate: \"success\",\n            medical: \"info\",\n            document: \"primary\",\n            other: \"secondary\"\n        };\n        return colors[typeId] || \"primary\";\n    }\n    /**\n   * Capitalize first letter of string\n   * @param {string} str - String to capitalize\n   * @returns {string} - Capitalized string\n   * @private\n   */ static _capitalizeFirstLetter(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    /**\n   * Helper method to get region by location ID\n   * @param {number} locationId - Location ID from NurseIO\n   * @returns {Promise<Object>} - Region object or null\n   * @private\n   */ static async _getRegionByLocationId(locationId) {\n        try {\n            // Map NurseIO location ID to region code\n            const locationMap = {\n                1: \"CA\",\n                2: \"NY\",\n                3: \"TX\",\n                4: \"FL\",\n                5: \"WA\" // Washington\n            };\n            const regionCode = locationMap[locationId];\n            if (!regionCode) {\n                logData(\"UNKNOWN_LOCATION_ID\", {\n                    locationId\n                });\n                return null;\n            }\n            // Find region by code\n            const region = await prisma.region.findFirst({\n                where: {\n                    code: regionCode\n                }\n            });\n            if (!region) {\n                logData(\"REGION_NOT_FOUND_IN_DATABASE\", {\n                    locationId,\n                    regionCode\n                });\n                // Return a minimal region object for New York if the database doesn't have it yet\n                if (regionCode === \"NY\") {\n                    return {\n                        id: 2,\n                        code: \"NY\",\n                        name: \"New York\"\n                    };\n                }\n            }\n            return region;\n        } catch (error) {\n            logData(\"ERROR_MAPPING_REGION\", {\n                locationId,\n                error: error.message\n            });\n            return null;\n        }\n    }\n    /**\n   * Load the global document types configuration\n   * @returns {Object} - Document types configuration\n   * @private\n   */ static _loadDocumentTypesConfig() {\n        try {\n            const configPath = path.join(process.cwd(), \"config\", \"documentTypes.json\");\n            if (fs.existsSync(configPath)) {\n                const configData = fs.readFileSync(configPath, \"utf8\");\n                const config = JSON.parse(configData);\n                // Optional: Log the document types in the config for debugging\n                console.log(\"Available document types in config:\", config.documentTypes.map((dt)=>({\n                        id: dt.id,\n                        childTypes: dt.childTypes?.length || 0\n                    })));\n                return config;\n            } else {\n                logData(\"DOCUMENT_TYPES_CONFIG_NOT_FOUND\", {\n                    configPath\n                });\n                return {\n                    documentTypes: []\n                };\n            }\n        } catch (error) {\n            logData(\"ERROR_LOADING_DOCUMENT_TYPES_CONFIG\", {\n                error: error.message\n            });\n            return {\n                documentTypes: []\n            };\n        }\n    }\n    /**\n   * Get form schema for a specific document type and subtype\n   * @param {string} typeId - Parent document type ID (e.g., 'mandatory', 'documents')\n   * @param {string} subTypeId - Child document type ID (e.g., 'rn_license', 'covid19_vaccine')\n   * @param {Object} options - Additional options (locationId, etc.)\n   * @returns {Promise<Object>} - Form schema\n   */ static async getFormSchemaByTypeAndSubType(typeId, subTypeId, options = {}) {\n        try {\n            logData(\"FETCHING_FORM_SCHEMA_BY_TYPE_AND_SUBTYPE\", {\n                typeId,\n                subTypeId,\n                options\n            });\n            // Map NurseIO type to CoreVerify type if needed\n            const mappedTypeId = mapDocumentType(typeId);\n            // Try to get the form from the database first using FormTemplateService\n            try {\n                // First check if we have a form service available\n                const formTemplateModule = await __webpack_require__.e(/*! import() */ \"_rsc_app_services_FormTemplateService_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../services/FormTemplateService */ \"(rsc)/./app/services/FormTemplateService.js\", 23));\n                if (formTemplateModule && formTemplateModule.default) {\n                    const formTemplateService = formTemplateModule.default;\n                    // Try to get the form from the database\n                    const dbFormTemplate = await formTemplateService.getFormTemplateByDocumentType(mappedTypeId, subTypeId);\n                    // If we found a form template in the database, use it\n                    if (dbFormTemplate) {\n                        logData(\"USING_DB_FORM_TEMPLATE\", {\n                            formKey: dbFormTemplate.id,\n                            fields: dbFormTemplate.fields.length\n                        });\n                        // Transform to expected schema format\n                        return {\n                            title: dbFormTemplate.name,\n                            description: dbFormTemplate.description || `Upload ${dbFormTemplate.name}`,\n                            formId: `${typeId.toLowerCase()}-${subTypeId.toLowerCase()}-form`,\n                            parentDocumentType: typeId.toLowerCase(),\n                            childDocumentType: subTypeId.toLowerCase(),\n                            hideHeader: false,\n                            showFormButtons: true,\n                            fields: dbFormTemplate.fields\n                        };\n                    }\n                }\n            } catch (dbError) {\n                // Log the error but continue with the JSON-based approach\n                logData(\"ERROR_FETCHING_DB_FORM_TEMPLATE\", {\n                    error: dbError.message,\n                    stack: dbError.stack\n                });\n            }\n            // If we didn't get a form from the database, fall back to JSON config\n            // Load the document types configuration\n            const config = this._loadDocumentTypesConfig();\n            // Check if subTypeId exists in any parent type\n            let foundInOtherParent = null;\n            for (const docType of config.documentTypes){\n                if (docType.childTypes && Array.isArray(docType.childTypes)) {\n                    const foundChild = docType.childTypes.find((ct)=>ct.id.toLowerCase() === subTypeId.toLowerCase());\n                    if (foundChild) {\n                        foundInOtherParent = docType.id;\n                        break;\n                    }\n                }\n            }\n            // Find the parent document type\n            const parentType = config.documentTypes.find((dt)=>dt.id.toLowerCase() === mappedTypeId.toLowerCase());\n            if (!parentType) {\n                throw new Error(`Parent document type not found: ${mappedTypeId}`);\n            }\n            // Find the child document type\n            const childType = parentType.childTypes.find((ct)=>ct.id.toLowerCase() === subTypeId.toLowerCase());\n            if (!childType) {\n                if (foundInOtherParent) {\n                    throw new Error(`Child document type \"${subTypeId}\" belongs to parent type \"${foundInOtherParent}\", not \"${mappedTypeId}\"`);\n                } else {\n                    throw new Error(`Child document type not found: ${subTypeId} in parent ${mappedTypeId}`);\n                }\n            }\n            // Log that we're using the JSON config since DB form wasn't found\n            logData(\"USING_JSON_CONFIG_FORM\", {\n                parentType: mappedTypeId,\n                childType: subTypeId\n            });\n            // Check if this child type is location-specific and if the current location matches\n            if (childType.locations && Array.isArray(childType.locations) && options.locationId) {\n                const locationId = parseInt(options.locationId, 10);\n                if (!childType.locations.includes(locationId)) {\n                    // Log but continue - we'll let the caller handle the response appropriately\n                    logData(\"LOCATION_MISMATCH_FOR_CHILD_TYPE\", {\n                        childTypeId: subTypeId,\n                        allowedLocations: childType.locations,\n                        requestedLocation: locationId\n                    });\n                } else {\n                    logData(\"LOCATION_MATCH_FOR_CHILD_TYPE\", {\n                        childTypeId: subTypeId,\n                        locationId\n                    });\n                }\n            }\n            // Create the base form schema\n            let formSchema = {\n                title: `${childType.name} Form`,\n                description: `Upload ${childType.name}`,\n                formId: `${typeId.toLowerCase()}-${subTypeId.toLowerCase()}-form`,\n                parentDocumentType: typeId.toLowerCase(),\n                childDocumentType: subTypeId.toLowerCase(),\n                hideHeader: false,\n                showFormButtons: true,\n                fields: []\n            };\n            // Add document type selector field\n            formSchema.fields.push({\n                id: \"documentSubType\",\n                name: \"documentSubType\",\n                type: \"hidden\",\n                label: \"Document Sub-Type\",\n                defaultValue: subTypeId,\n                required: true,\n                order: 0,\n                fullWidth: true\n            });\n            // Special handling for Fingerprint Clearance\n            const isFingerPrintClearance1 = subTypeId.toLowerCase() === \"fingerprint_clearance\";\n            // Add the title field only for non-fingerprint clearance documents\n            if (!isFingerPrintClearance1) {\n                formSchema.fields.push({\n                    id: \"certificateAbbreviation\",\n                    name: \"certificateAbbreviation\",\n                    type: \"text\",\n                    label: `${childType.name} Title`,\n                    placeholder: `Enter ${childType.name.toLowerCase()} title`,\n                    required: true,\n                    order: 1,\n                    fullWidth: true,\n                    validation: {\n                        minLength: 3,\n                        maxLength: 100,\n                        pattern: \"^[A-Za-z0-9\\\\s\\\\-\\\\.\\\\(\\\\)]+$\",\n                        message: `Title must be between 3-100 characters`\n                    }\n                });\n            }\n            // Add all fields from the child document type configuration\n            if (childType.fields && Array.isArray(childType.fields)) {\n                // Add custom fields with adjusted order (after title field)\n                childType.fields.forEach((field, index)=>{\n                    const fieldWithAdjustedOrder = {\n                        ...field,\n                        order: field.order + (isFingerPrintClearance1 ? 0 : 1 // Add 1 to allow for title field, except for fingerprint clearance\n                        )\n                    };\n                    formSchema.fields.push(fieldWithAdjustedOrder);\n                });\n            }\n            // Special case for Finger Print Clearance - remove location restriction\n            if (isFingerPrintClearance1) {\n                // Add file upload field for front of the document\n                formSchema.fields.push({\n                    id: \"fileUpload\",\n                    name: \"fileUpload\",\n                    type: \"file\",\n                    label: `Attach Front (PDF, JPG, PNG)`,\n                    accept: \".pdf,.jpg,.jpeg,.png\",\n                    required: true,\n                    order: 90,\n                    fullWidth: true,\n                    validation: {\n                        maxSize: 10000000,\n                        fileTypes: [\n                            \"application/pdf\",\n                            \"image/jpeg\",\n                            \"image/png\"\n                        ],\n                        message: \"Please upload a PDF, JPG, or PNG file less than 10MB\"\n                    }\n                });\n                // Add file upload field for back of the document\n                formSchema.fields.push({\n                    id: \"fileUploadBack\",\n                    name: \"fileUploadBack\",\n                    type: \"file\",\n                    label: `Attach Back (PDF, JPG, PNG)`,\n                    accept: \".pdf,.jpg,.jpeg,.png\",\n                    required: true,\n                    order: 91,\n                    fullWidth: true,\n                    validation: {\n                        maxSize: 10000000,\n                        fileTypes: [\n                            \"application/pdf\",\n                            \"image/jpeg\",\n                            \"image/png\"\n                        ],\n                        message: \"Please upload a PDF, JPG, or PNG file less than 10MB\"\n                    }\n                });\n            } else {\n                // Standard file upload field for other document types\n                formSchema.fields.push({\n                    id: \"fileUpload\",\n                    name: \"fileUpload\",\n                    type: \"file\",\n                    label: `Upload ${childType.name} (PDF, JPG, PNG)`,\n                    accept: \".pdf,.jpg,.jpeg,.png\",\n                    required: true,\n                    order: 100,\n                    fullWidth: true,\n                    validation: {\n                        maxSize: 10000000,\n                        fileTypes: [\n                            \"application/pdf\",\n                            \"image/jpeg\",\n                            \"image/png\"\n                        ],\n                        message: \"Please upload a PDF, JPG, or PNG file less than 10MB\"\n                    }\n                });\n            }\n            // Add notes field - Skip for fingerprint clearance\n            if (!isFingerPrintClearance1) {\n                formSchema.fields.push({\n                    id: \"notes\",\n                    name: \"notes\",\n                    type: \"textarea\",\n                    label: \"Additional Notes\",\n                    placeholder: \"Enter any additional notes or comments\",\n                    required: false,\n                    order: 101,\n                    fullWidth: true\n                });\n            }\n            // Add shareable field for non-fingerprint clearance documents\n            if (!isFingerPrintClearance1) {\n                formSchema.fields.push({\n                    id: \"shareable\",\n                    name: \"shareable\",\n                    type: \"radio\",\n                    label: \"Is this document shareable with facilities?\",\n                    required: true,\n                    order: 102,\n                    fullWidth: true,\n                    options: [\n                        {\n                            value: \"true\",\n                            label: \"Yes\"\n                        },\n                        {\n                            value: \"false\",\n                            label: \"No\"\n                        }\n                    ],\n                    defaultValue: \"true\"\n                });\n            }\n            // Sort fields by order\n            formSchema.fields.sort((a, b)=>a.order - b.order);\n            // Add button configuration\n            // Use child type specific buttons if defined, otherwise use default\n            if (childType.buttons) {\n                // Copy button configuration from child type\n                if (childType.buttons.submitButtonText) {\n                    formSchema.submitButtonText = childType.buttons.submitButtonText;\n                }\n                if (childType.buttons.cancelButtonText) {\n                    formSchema.cancelButtonText = childType.buttons.cancelButtonText;\n                }\n                if (childType.buttons.deleteButtonText) {\n                    formSchema.deleteButtonText = childType.buttons.deleteButtonText;\n                }\n                // Control button visibility\n                if (childType.buttons.showSubmitButton !== undefined) {\n                    formSchema.showSubmitButton = childType.buttons.showSubmitButton;\n                }\n                if (childType.buttons.showCancelButton !== undefined) {\n                    formSchema.showCancelButton = childType.buttons.showCancelButton;\n                }\n                if (childType.buttons.showDeleteButton !== undefined) {\n                    formSchema.showDeleteButton = childType.buttons.showDeleteButton;\n                }\n                // Add custom buttons if defined\n                if (childType.buttons.customButtons && Array.isArray(childType.buttons.customButtons)) {\n                    formSchema.customButtons = childType.buttons.customButtons;\n                }\n            } else {\n                // Default button configuration\n                formSchema.submitButtonText = \"Upload Document\";\n                formSchema.cancelButtonText = \"Cancel\";\n                formSchema.showSubmitButton = true;\n                formSchema.showCancelButton = true;\n                formSchema.showDeleteButton = false;\n            }\n            // Add form messages\n            formSchema.errorMessage = \"There was an error uploading your document. Please try again.\";\n            formSchema.successMessage = \"Document uploaded successfully.\";\n            logData(\"FORM_SCHEMA_GENERATED_FROM_CONFIG\", {\n                parentType: parentType.name,\n                childType: childType.name,\n                fieldCount: formSchema.fields.length,\n                hasCustomButtons: !!childType.buttons\n            });\n            return formSchema;\n        } catch (error) {\n            logData(\"FORM_SCHEMA_ERROR\", {\n                error: error.message\n            });\n            throw error;\n        }\n    }\n    /**\n   * Filter child document types based on location\n   * @param {Array} childTypes - Array of child document types\n   * @param {Object} options - Additional options\n   * @returns {Array} - Filtered child document types\n   */ static filterChildTypesByLocation(childTypes, options = {}) {\n        if (!childTypes || !Array.isArray(childTypes)) {\n            return [];\n        }\n        const locationId = options.locationId ? parseInt(options.locationId, 10) : null;\n        const parentType = options.parentType || \"mandatory\";\n        // Log for debugging\n        console.log(\"Filtering child types by location:\", {\n            locationId,\n            parentType,\n            childTypesCount: childTypes.length\n        });\n        return childTypes.filter((childType)=>{\n            // Special case for fingerprint_clearance - always include it\n            if (childType.id === \"fingerprint_clearance\") {\n                console.log(\"Fingerprint clearance is now available for all locations\");\n                return true;\n            }\n            // For other document types, use the locations array directly from the child type\n            const isAvailable = !locationId || !childType.locations || Array.isArray(childType.locations) && childType.locations.includes(locationId);\n            return isAvailable;\n        });\n    }\n    /**\n   * Get all child document types for a parent document type, filtered by location\n   * @param {string} typeId - Parent document type ID\n   * @param {Object} options - Additional options\n   * @returns {Promise<Array>} - Array of child document types\n   */ static async getChildDocumentTypes(typeId, options = {}) {\n        try {\n            // Map NurseIO type to CoreVerify type\n            const mappedTypeId = mapDocumentType(typeId);\n            logData(\"FETCHING_CHILD_DOCUMENT_TYPES\", {\n                originalTypeId: typeId,\n                mappedTypeId,\n                options\n            });\n            // Load document type configuration from JSON file\n            const config = this._loadDocumentTypesConfig();\n            // Ensure we have documentTypes array from the config\n            if (!config.documentTypes || !Array.isArray(config.documentTypes)) {\n                logData(\"INVALID_DOCUMENT_TYPES_CONFIG\", {\n                    hasDocTypes: !!config.documentTypes,\n                    isArray: Array.isArray(config.documentTypes)\n                });\n                throw new Error(\"Invalid document types configuration: documentTypes is not an array\");\n            }\n            // Find matching parent type\n            const parentType = config.documentTypes.find((dt)=>dt.id === mappedTypeId || dt.id === typeId || dt.name?.toLowerCase() === mappedTypeId?.toLowerCase() || dt.name?.toLowerCase() === typeId?.toLowerCase());\n            if (!parentType) {\n                logData(\"PARENT_DOC_TYPE_NOT_FOUND\", {\n                    typeId,\n                    mappedTypeId\n                });\n                throw new Error(`Parent document type not found: ${typeId}`);\n            }\n            // Get child types for this parent\n            let childTypes = parentType.childTypes || [];\n            // Filter child types based on location, passing the parent type\n            const filterOptions = {\n                ...options,\n                parentType: mappedTypeId || typeId // Pass the parent type ID for proper filtering\n            };\n            childTypes = this.filterChildTypesByLocation(childTypes, filterOptions);\n            // Sort child types by name\n            childTypes.sort((a, b)=>a.name.localeCompare(b.name));\n            logData(\"CHILD_DOC_TYPES_FOUND\", {\n                parentType: parentType.id,\n                mappedParentType: mappedTypeId,\n                childTypeCount: childTypes.length,\n                locationId: options.locationId\n            });\n            return childTypes;\n        } catch (error) {\n            logData(\"GET_CHILD_DOC_TYPES_ERROR\", {\n                error: error.message\n            });\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/services/documentService.js\n");

/***/ }),

/***/ "(rsc)/./utils/logUtils.js":
/*!***************************!*\
  !*** ./utils/logUtils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logData: () => (/* binding */ logData),\n/* harmony export */   logDebug: () => (/* binding */ logDebug)\n/* harmony export */ });\n/**\n * Utility for logging data in a standardized format\n * @param {string} event - The event name\n * @param {object} data - The data to log\n */ function logData(event, data = {}) {\n    const timestamp = new Date().toISOString();\n    console.log(JSON.stringify({\n        timestamp,\n        event,\n        data\n    }));\n}\n/**\n * Debug logging utility\n * @param {string} event - The debug event name\n * @param {object} data - The data to log\n */ function logDebug(event, data = {}) {\n    if (process.env.DEBUG === \"true\") {\n        logData(`DEBUG:${event}`, data);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi91dGlscy9sb2dVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0NBSUMsR0FDTSxTQUFTQSxRQUFRQyxLQUFLLEVBQUVDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLE1BQU1DLFlBQVksSUFBSUMsT0FBT0MsV0FBVztJQUN4Q0MsUUFBUUMsR0FBRyxDQUFDQyxLQUFLQyxTQUFTLENBQUM7UUFDekJOO1FBQ0FGO1FBQ0FDO0lBQ0Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTUSxTQUFTVCxLQUFLLEVBQUVDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLElBQUlTLFFBQVFDLEdBQUcsQ0FBQ0MsS0FBSyxLQUFLLFFBQVE7UUFDaENiLFFBQVEsQ0FBQyxNQUFNLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQztJQUM1QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29yZV92ZXJpZnkvLi91dGlscy9sb2dVdGlscy5qcz83Njk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXRpbGl0eSBmb3IgbG9nZ2luZyBkYXRhIGluIGEgc3RhbmRhcmRpemVkIGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgdG8gbG9nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2dEYXRhKGV2ZW50LCBkYXRhID0ge30pIHtcbiAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh7XG4gICAgdGltZXN0YW1wLFxuICAgIGV2ZW50LFxuICAgIGRhdGFcbiAgfSkpO1xufVxuXG4vKipcbiAqIERlYnVnIGxvZ2dpbmcgdXRpbGl0eVxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIGRlYnVnIGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgdG8gbG9nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2dEZWJ1ZyhldmVudCwgZGF0YSA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5ERUJVRyA9PT0gJ3RydWUnKSB7XG4gICAgbG9nRGF0YShgREVCVUc6JHtldmVudH1gLCBkYXRhKTtcbiAgfVxufSAiXSwibmFtZXMiOlsibG9nRGF0YSIsImV2ZW50IiwiZGF0YSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwibG9nRGVidWciLCJwcm9jZXNzIiwiZW52IiwiREVCVUciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./utils/logUtils.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fform-schema%2Froute&page=%2Fapi%2Fform-schema%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fform-schema%2Froute.js&appDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fswagatmishra%2FDesktop%2Fraj%2Fofficial%2Fcore_verify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();